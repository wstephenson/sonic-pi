# This file is distributed under the same license as the Sonic Pi package.
# Do not edit this file, use Weblate instead.
# Read TRANSLATION.md for more information.
msgid ""
msgstr ""
"Project-Id-Version: Sonic Pi\n"
"PO-Revision-Date: 2018-09-26 19:36+0000\n"
"Last-Translator: psyk10p <psyklop@yandex.ru>\n"
"Language-Team: Russian <https://hosted.weblate.org/projects/sonic-pi/"
"tutorial/ru/>\n"
"Language: ru\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=3; plural=n%10==1 && n%100!=11 ? 0 : n%10>=2 && n%10<="
"4 && (n%100<10 || n%100>=20) ? 1 : 2;\n"
"X-Generator: Weblate 3.2-dev\n"

#: 01-Welcome-to-Sonic-Pi.md:1
msgid "1 Welcome to Sonic Pi"
msgstr "1 Добро пожаловать в Sonic Pi"

#: 01-Welcome-to-Sonic-Pi.md:3
msgid "Welcome friend :-)"
msgstr "Добро пожаловать, друг :-)"

#: 01-Welcome-to-Sonic-Pi.md:5
msgid ""
"Welcome to Sonic Pi. Hopefully you're as excited to get started making crazy s"
"ounds as I am to show you. It's going to be a really *fun* ride where you'll l"
"earn all about music, synthesis, programming, composition, performance and mor"
"e."
msgstr ""
"Добро пожаловать в мир Sonic Pi. Надеюсь, что вам настолько же не терпится нач"
"ать создавать безумные звуки, насколько мне не терпится показать вам, как это "
"делается. Это будет веселое путешествие, в котором ты узнаешь много нового о м"
"узыке, синтезе, программировании и производительности программ, композиции и о"
" много другом."

#: 01-Welcome-to-Sonic-Pi.md:10
msgid ""
"But wait, how rude of me! Let me introduce myself - I'm [Sam Aaron](http://twi"
"tter.com/samaaron) - the chap that created Sonic Pi. You can find me at [@sama"
"aron](http://twitter.com/samaaron) on Twitter and I'd be more than happy to sa"
"y hello to you. You might also be interested in finding out more about my [Liv"
"e Coding Performances](http://facebook.com/livecodersamaaron) where I code wit"
"h Sonic Pi live in front of audiences."
msgstr ""
"Постойте, как же я мог быть таким невоспитанным! Позвольте мне представиться -"
" я [Sam Aaron](http://twitter.com/samaaron) - тот самый парень, который создал"
" Sonic Pi. Меня можно найти по имени [@samaaron](http://twitter.com/samaaron) "
"в Твиттере, и я был бы очень счастлив обменяться там с вами приветствиями. Вам"
", возможно, также было бы интересно узнать больше о моих [лайв-кодинг выступле"
"ниях](http://facebook.com/livecodersamaaron), где я сам пишу на Sonic Pi перед"
" зрителями."

#: 01-Welcome-to-Sonic-Pi.md:18
msgid ""
"If you have any thoughts, or ideas for improving Sonic Pi - please pass them o"
"n - feedback is so helpful. You never know, your idea might be the next big fe"
"ature!"
msgstr ""
"Если у вас появятся какие-либо мысли или идеи о том, как улучшить Sonic Pi, то"
", пожалуйста, передайте мне их. Обратная связь - это очень полезно. Никогда не"
" знаешь, вдруг ваша идея может вырасти в нечто действительно большое!"

#: 01-Welcome-to-Sonic-Pi.md:22
msgid ""
"This tutorial is divided up into sections grouped by category. Whilst I've wri"
"tten it to have an easy learning progression from start to finish, feel very f"
"ree just to dip in and out of sections as you see fit. If you feel that there'"
"s something missing, do let me know and I'll consider it for a future version."
msgstr ""
"Этот учебник разделён на главы, сгруппированные по категориям. Несмотря на то,"
" что я написал его от простого к сложному, можно свободно прыгать туда-сюда ка"
"к вам удобно. Если вам кажется, что здесь чего-то не хватает, обязательно дайт"
"е мне об этом знать, и я посмотрю, что можно сделать для следующей версии."

#: 01-Welcome-to-Sonic-Pi.md:28
msgid ""
"Finally, watching others live code is a really great way to learn. I regularly"
" stream live on [http://youtube.com/samaaron](http://youtube.com/samaaron) so "
"please do drop by, say hi and ask me lots of questions :-)"
msgstr ""
"Наконец, наблюдать за чужим кодингом в режиме реального времени это отличный с"
"пособ учиться. Я регулярно вещаю в прямом эфире на [http://youtube.com/samaaro"
"n](http://youtube.com/samaaron), так что не забывайте появляться там, чтобы по"
"приветствовать всех и задать все свои многочисленные вопросы :-)"

#: 01-Welcome-to-Sonic-Pi.md:33
msgid "OK, let's get started..."
msgstr "Что ж, давайте начнём…"

#: 01.1-Live-Coding.md:1
msgid "1.1 Live Coding"
msgstr "1.1 Лайв-кодинг"

#: 01.1-Live-Coding.md:3 09-Live-Coding.md:3 09.1-Live-Coding-Fundamentals.md:3
#: A.02-live-coding.md:3
msgid "Live Coding"
msgstr "Лайв-кодинг"

#: 01.1-Live-Coding.md:5
msgid ""
"One of the most exciting aspects of Sonic Pi is that it enables you to write a"
"nd *modify code live* to make music, just like you might perform live with a g"
"uitar. This means that given some practice you can take Sonic Pi on stage and "
"gig with it."
msgstr ""
"Одним из самых захватывающих аспектов Sonic Pi является то, что для создания м"
"узыки, вы можете писать и *изменять код здесь и сейчас*. Это похоже на настоящ"
"ее выступление с гитарой. Значит, при достаточной тренировке, вы сможете взять"
" Sonic Pi с собой на сцену и выступать с ней."

#: 01.1-Live-Coding.md:10
msgid "Free your mind"
msgstr "Расширьте своё сознание"

#: 01.1-Live-Coding.md:12
msgid ""
"Before we get into the real details of how Sonic Pi works in the rest of this "
"tutorial, I'd like to give you an experience of what it's like to live code. D"
"on't worry if you don't understand much (or any) of this. Just try to hold ont"
"o your seats and enjoy..."
msgstr ""
"Прежде, чем мы перейдем к деталям того, как Sonic Pi работает, я бы хотел "
"поделиться с вами личным опытом того, что значит \"лайв-кодинг\". Не "
"переживайте, если вы пока чего-то из этого (или ничего) не понимаете. Просто "
"держитесь крепче за стул и наслаждайтесь…"

#: 01.1-Live-Coding.md:17
msgid "A live loop"
msgstr "Живой цикл"

#: 01.1-Live-Coding.md:19
msgid "Let's get started, copy the following code into an empty buffer above:"
msgstr "Для начала скопируйте следующий код в пустой буфер:"

#: 01.1-Live-Coding.md:21
#, no-wrap
msgid ""
"live_loop :flibble do\n"
"  sample :bd_haus, rate: 1\n"
"  sleep 0.5\n"
"end"
msgstr ""
"live_loop :flibble do\n"
"  sample :bd_haus, rate: 1\n"
"  sleep 0.5\n"
"end"

#: 01.1-Live-Coding.md:28
msgid ""
"Now, press the `Run` button and you'll hear a nice fast bass drum beating away"
". If at any time you wish to stop the sound just hit the `Stop` button. Althou"
"gh don't hit it just yet... Instead, follow these steps:"
msgstr ""
"Теперь нажмите кнопку `Выполнить`, и вы услышите приятный быстрый барабанный б"
"ой. В любой момент нажмите кнопку `Остановить`, чтобы остановить звук. Но не н"
"ажимайте её пока что… Вместо этого сделайте вот что:"

#: 01.1-Live-Coding.md:32
msgid "Make sure the bass drum sound is still running"
msgstr "Убедитесь, что барабаны по-прежнему звучат"

#: 01.1-Live-Coding.md:33
msgid "Change the `sleep` value from `0.5` to something higher like `1`."
msgstr "Измените значение `sleep` с `0.5` на значение побольше, например `1`."

#: 01.1-Live-Coding.md:34
msgid "Press the `Run` button again"
msgstr "Еще раз нажмите кнопку `Выполнить`"

#: 01.1-Live-Coding.md:35
msgid "Notice how the drum speed has changed."
msgstr "Можно заметить, что темп барабанов изменился."

#: 01.1-Live-Coding.md:36
msgid ""
"Finally, *remember this moment*, this is the first time you've live coded with"
" Sonic Pi and it's unlikely to be your last..."
msgstr ""
"И, наконец, *запомните этот момент* - это первый, и, наверняка, не последний в"
"аш лайв-кодинг на Sonic Pi…"

#: 01.1-Live-Coding.md:39
msgid ""
"Ok, that was simple enough. Let's add something else into the mix. Above `samp"
"le :bd_haus` add the line `sample :ambi_choir, rate: 0.3`. Your code should lo"
"ok like this:"
msgstr ""
"Ладно, это было довольно просто. Давайте добавим что-нибудь ещё в наш микс. Св"
"ерху от `sample :bd_haus` добавьте строку `sample :ambi_choir, rate: 0.3`. Ваш"
" код должен выглядеть так:"

#: 01.1-Live-Coding.md:43
#, no-wrap
msgid ""
"live_loop :flibble do\n"
"  sample :ambi_choir, rate: 0.3\n"
"  sample :bd_haus, rate: 1\n"
"  sleep 1\n"
"end"
msgstr ""
"live_loop :flibble do\n"
"  sample :ambi_choir, rate: 0.3\n"
"  sample :bd_haus, rate: 1\n"
"  sleep 1\n"
"end"

#: 01.1-Live-Coding.md:51
msgid ""
"Now, play around. Change the rates - what happens when you use high values, or"
" small values or negative values? See what happens when you change the `rate:`"
" value for the `:ambi_choir` sample just slightly (say to `0.29`). What happen"
"s if you choose a really small `sleep` value? See if you can make it go so fas"
"t your computer will stop with an error because it can't keep up (if that happ"
"ens, just choose a bigger `sleep` time and hit `Run` again)."
msgstr ""
"Время поиграться. Поменяйте частоту.  Что происходит, когда вы используете выс"
"окие, малые, или отрицательные значения? Посмотрите, что произойдет, когда вы "
"поменяете значение `rate:` для сэмпла `:ambi_choir` на незначительную величину"
" (например до `0.29`). Что произойдет, если вы выберите очень маленькое значен"
"ие для `sleep`? Проверьте, получится ли заставить его играть так быстро, что в"
"аш компьютер прекратит свою работу и выдаст ошибку из-за того, что он не справ"
"ится с этим (если это всё же произошло, то просто выберите значение побольше д"
"ля `sleep` и снова нажмите `Выполнить`)."

#: 01.1-Live-Coding.md:59
msgid "Try commenting one of the `sample` lines out by adding a `#` to the beginning:"
msgstr ""
"Попробуйте закомментировать одну из строк `sample`. Для этого добавьте `#` в е"
"е начало:"

#: 01.1-Live-Coding.md:62
#, no-wrap
msgid ""
"live_loop :flibble do\n"
"  sample :ambi_choir, rate: 0.3\n"
"#  sample :bd_haus, rate: 1\n"
"  sleep 1\n"
"end"
msgstr ""
"live_loop :flibble do\n"
"  sample :ambi_choir, rate: 0.3\n"
"#  sample :bd_haus, rate: 1\n"
"  sleep 1\n"
"end"

#: 01.1-Live-Coding.md:70
msgid ""
"Notice how it tells the computer to ignore it, so we don't hear it. This is ca"
"lled a comment. In Sonic Pi we can use comments to remove and add things into "
"the mix."
msgstr ""
"Обратите внимание, компьютер проигнорировал её, поэтому мы её не слышим. Это н"
"азывается комментарием. В Sonic Pi мы можем использовать комментарии, чтобы уб"
"ирать или добавлять штуки в микс."

#: 01.1-Live-Coding.md:74
msgid ""
"Finally, let me leave you something fun to play with. Take the code below, and"
" copy it into a spare buffer. Now, don't try to understand it too much other t"
"han see that there are two loops - so two things going round at the same time."
" Now, do what you do best - experiment and play around. Here are some suggesti"
"ons:"
msgstr ""
"Напоследок, позвольте мне оставить вам кое-что забавное, с чем можно поиграть."
" Возьмите код, приведенный ниже, и скопируйте его в свободный буфер. Не пытайт"
"есь пока полностью разобраться в нем. Просто обратите внимание, что в нём два "
"цикла - то есть две вещи играют по кругу одновременно. Теперь ваш черёд делать"
" то, что получается у вас лучше всего - экспериментировать и развлекаться. Вот"
" пара советов:"

#: 01.1-Live-Coding.md:80
msgid "Try changing the blue `rate:` values to hear the sample sound change."
msgstr ""
"Попробуйте изменить синее значение `rate:`, чтобы услышать, как изменится звук"
"."

#: 01.1-Live-Coding.md:81
msgid ""
"Try changing the `sleep` times and hear that both loops can spin round at diff"
"erent rates."
msgstr ""
"Попробуйте изменить время для `sleep` и вы услышите, как оба цикла повторяются"
" по кругу с разными темпами."

#: 01.1-Live-Coding.md:83
msgid ""
"Try uncommenting the sample line (remove the `#`) and enjoy the sound of the g"
"uitar played backwards."
msgstr ""
"Раскомментируйте строку примера (удалите знак `#`) и наслаждайтесь звуками "
"гитары на заднем плане."

#: 01.1-Live-Coding.md:85
msgid ""
"Try changing any of the blue `mix:` values to numbers between `0` (not in the "
"mix) and `1` (fully in the mix)."
msgstr ""
"Попробуйте поменять синее значение любого из `mix:` на число в промежутке от `"
"0` (что соответствует исключению из общего микса) до `1` (полностью сочетается"
")."

#: 01.1-Live-Coding.md:88
msgid ""
"Remember to press `Run` and you'll hear the change next time the loop goes rou"
"nd. If you end up in a pickle, don't worry - hit `Stop`, delete the code in th"
"e buffer and paste a fresh copy in and you're ready to jam again. Making mista"
"kes is how you'll learn the quickest..."
msgstr ""
"Не забывайте нажимать `Выполнить`, и вы услышите изменения в следующий раз, ко"
"гда петля начнётся заново. Не расстраивайтесь, если в конце музыка будет испор"
"чена. Нажмите `Остановить`, удалите код из буфера, вставьте свежую копию, и вы"
" снова готовы к творчеству. На ошибках научиться можно быстрее всего...\n"
"\n"
"Не забывайте нажимать `Выполнить`, вы будете слышать изменения на каждой следу"
"ющей итерации цикла. Не бойтесь ломать музыкальную композицию. Всегда можно на"
"жать `Остановить`, удалить код из буфера и вставить свежую копию. Не забывайте"
" - процесс творчества тесно связан с совершением ошибок..."

#: 01.1-Live-Coding.md:94
#, no-wrap
msgid ""
"live_loop :guit do\n"
"  with_fx :echo, mix: 0.3, phase: 0.25 do\n"
"    sample :guit_em9, rate: 0.5\n"
"  end\n"
"#  sample :guit_em9, rate: -0.5\n"
"  sleep 8\n"
"end\n"
"live_loop :boom do\n"
"  with_fx :reverb, room: 1 do\n"
"    sample :bd_boom, amp: 10, rate: 1\n"
"  end\n"
"  sleep 8\n"
"end"
msgstr ""
"live_loop :guit do\n"
"  with_fx :echo, mix: 0.3, phase: 0.25 do\n"
"    sample :guit_em9, rate: 0.5\n"
"  end\n"
"#  sample :guit_em9, rate: -0.5\n"
"  sleep 8\n"
"end\n"
"live_loop :boom do\n"
"  with_fx :reverb, room: 1 do\n"
"    sample :bd_boom, amp: 10, rate: 1\n"
"  end\n"
"  sleep 8\n"
"end"

#: 01.1-Live-Coding.md:111
msgid ""
"Now, keep playing and experimenting until your curiosity about how this all ac"
"tually works kicks in and you start wondering what else you can do with this. "
"You're now ready to read the rest of the tutorial."
msgstr ""
"Продолжайте играть и экспериментировать до тех пор, пока вам не станет любопыт"
"но, как это на самом деле работает, и вы не начнёте думать, что ещё можно сдел"
"ать. Тогда вы будете готовы к чтению оставшейся части этого учебника."

#: 01.1-Live-Coding.md:115
msgid "So what are you waiting for..."
msgstr "Так чего же вы ждёте..."

#: 01.2-Exploring-the-Interface.md:1
msgid "1.2 Exploring the Interface"
msgstr "1.2 Обзор интерфейса"

#: 01.2-Exploring-the-Interface.md:3
msgid "The Sonic Pi Interface"
msgstr "Интерфейс Sonic Pi"

#: 01.2-Exploring-the-Interface.md:5
msgid ""
"Sonic Pi has a very simple interface for coding music. Let's spend a little ti"
"me exploring it."
msgstr ""
"У Sonic Pi очень простой интерфейс для кодирования музыки. Мы потратим совсем "
"немного времени на его изучение."

#: 01.2-Exploring-the-Interface.md:8
msgid "![Sonic Pi Interface](../images/tutorial/GUI.png)"
msgstr "![Интерфейс Sonic Pi](../images/tutorial/GUI.png)"

#: 01.2-Exploring-the-Interface.md:11
msgid "*A* - Play Controls"
msgstr "*A* - Управление воспроизведением"

#: 01.2-Exploring-the-Interface.md:12
msgid "*B* - Editor Controls"
msgstr "*B* - Управление редактором"

#: 01.2-Exploring-the-Interface.md:13
msgid "*C* - Info and Help"
msgstr "*C* - Помощь и справка"

#: 01.2-Exploring-the-Interface.md:14
msgid "*D* - Code Editor"
msgstr "*D* - Редактор кода"

#: 01.2-Exploring-the-Interface.md:15
msgid "*E* - Prefs Panel"
msgstr "*E* - Панель настроек"

#: 01.2-Exploring-the-Interface.md:16
msgid "*F* - Log Viewer"
msgstr "*F* - Просмотр сообщений"

#: 01.2-Exploring-the-Interface.md:17
msgid "*G* - Help System"
msgstr "*G* - Справочная система"

#: 01.2-Exploring-the-Interface.md:18
msgid "*H* - Scope Viewer"
msgstr "*F* - Просмотр сообщений"

#: 01.2-Exploring-the-Interface.md:20
msgid "A. Play Controls"
msgstr "A. Управление Воспроизведением"

#: 01.2-Exploring-the-Interface.md:22
msgid ""
"These pink buttons are the main controls for starting and stopping sounds. The"
"re's the *Run* button for running the code in the editor, *Stop* for stopping "
"all running code, *Save* for saving the code to an external file and *Record* "
"to create a recording (a WAV file) of the sound playing."
msgstr ""
"Эти розовые кнопки - главные элементы для запуска и остановки звука. Есть кноп"
"ка *Выполнить* для запуска кода из редактора, *Остановить* для остановки всего"
" выполняющегося кода, *Сохранить* для сохранения кода в файл и *Запись* для со"
"здания записи того, что вы слышите в звуковой файл в формате WAV."

#: 01.2-Exploring-the-Interface.md:28
msgid "B. Editor Controls"
msgstr "B. Управление Редактором"

#: 01.2-Exploring-the-Interface.md:30
msgid ""
"These orange buttons allow you to manipulate the code editor. The *Size +* and"
" *Size -* buttons allow you to make the text bigger and smaller. The *Align* b"
"utton will neaten the code for you to make it look more professional."
msgstr ""
"Оранжевые кнопки дают вам возможность манипулировать редактором кода. Кнопки *"
"Размер +* и *Размер -* делают текст больше и меньше. Кнопка *Выровнять* автома"
"тически выравнивает код, от чего он выглядит более профессионально."

#: 01.2-Exploring-the-Interface.md:35
msgid "C. Info and Help"
msgstr "C. Помощь И Справка"

#: 01.2-Exploring-the-Interface.md:37
msgid ""
"These blue buttons give you access to information, help and preferences. The *"
"Info* button will open up the information window which contains information ab"
"out Sonic Pi itself - the core team, history, contributors and community. The "
"*Help* button toggles the help system (*G*) and the *Prefs* button toggles the"
" preferences window which allows you to control some basic system parameters."
msgstr ""
"Данные синие кнопки дают вам доступ к информации и настройкам. Кнопка *Информа"
"ция* открывает справочное окно, в котором находится информация о самом Sonic P"
"i - главной команде разработчиков, истории, помощниках и сообществе. Кнопка *П"
"омощь* включает систему помощи (*F*), а кнопка *Параметры* включает панель нас"
"троек, где можно менять некоторые базовые параметры приложения."

#: 01.2-Exploring-the-Interface.md:44
msgid "D. Code Editor"
msgstr "D. Редактор Кода"

#: 01.2-Exploring-the-Interface.md:46
msgid ""
"This is the area where you'll write your code and compose/perform music. It's "
"a simple text editor where you can write code, delete it, cut and paste, etc. "
"Think of it like a very basic version of Word or Google Docs. The editor will "
"automatically colour words based on their meaning in the code. This may seem s"
"trange at first, but you'll soon find it very useful. For example, you'll know"
" something is a number because it is blue."
msgstr ""
"Это область, в которой вы будете писать свой код и сочинять/исполнять музыку. "
"Это простой текстовый редактор, где можно написать код, удалить его, вырезать,"
" вставить и так далее. Представьте, что это простая версия Word или Google Doc"
"s. Редактор автоматически раскрасит слова в зависимости от их значения в коде."
" Поначалу это может казаться странным, но скоро вы увидите, насколько это помо"
"гает. К примеру, глядя на что-то синее ты будешь знать, что это число."

#: 01.2-Exploring-the-Interface.md:54
msgid "E. Prefs Panel"
msgstr "E. Панель Настроек"

#: 01.2-Exploring-the-Interface.md:56
msgid ""
"Sonic Pi supports a number of tweakable preferences which can be accessed by t"
"oggling the *prefs* button in the Info and Help button set. This will toggle t"
"he visibility of the Prefs Panel which includes a number of options to be chan"
"ged. Examples are forcing mono mode, inverting stereo, toggling log output ver"
"bosity and also a volume slider and audio selector on the Raspberry Pi."
msgstr ""
"В Sonic Pi есть множество настраиваемых параметров. Доступ к ним можно получит"
"ь, нажав кнопку *Параметры* в наборе кнопок \"Помощь и справка\". Она переключит"
" видимость панели настроек, в которой представлено множество вариантов, доступ"
"ных для изменения. Примерами являются режим моно, инвертированное стерео, вклю"
"чение вывода детальных сообщений, ползунок громкости и выбор аудиовыхода Raspb"
"erry Pi."

#: 01.2-Exploring-the-Interface.md:63
msgid "F. Log Viewer"
msgstr "F. Просмотр Сообщений"

#: 01.2-Exploring-the-Interface.md:65
msgid ""
"When you run your code, information about what the program is doing will be di"
"splayed in the log viewer. By default, you'll see a message for every sound yo"
"u create with the exact time the sound was triggered. This is very useful for "
"debugging your code and understanding what your code is doing."
msgstr ""
"Когда твой код выполняется, информация о том, что делает программа, будет выво"
"диться в лог сообщений. По умолчанию, ты будешь видеть новое сообщение для каж"
"дого воспроизводимого звука с точным указанием времени, когда он начался. Это "
"очень полезно для отладки кода и понимания того, что он делает."

#: 01.2-Exploring-the-Interface.md:71
msgid "G. Help System"
msgstr "G. Справочная Система"

#: 01.2-Exploring-the-Interface.md:73
msgid ""
"One of the most important parts of the Sonic Pi interface is the help system w"
"hich appears at the bottom of the window. This can be toggled on and off by cl"
"icking on the blue *Help* button. The help system contains help and informatio"
"n about all aspects of Sonic Pi including this tutorial, a list of available s"
"ynths, samples, examples, FX and a full list of all the functions Sonic Pi pro"
"vides for coding music."
msgstr ""
"Наконец, одна из самых важных частей интерфейса Sonic Pi - это справочная сист"
"ема, которую можно увидеть в нижней части окна приложения. Её можно выводить и"
" прятать, нажимая синюю кнопку *Помощь*. В справочную систему входит помощь и "
"информация обо все аспектах Sonic Pi, включая этот учебник, список доступных с"
"интезаторов, сэмплов, эффектов, примеры и полный перечень всех функций Sonic P"
"i для кодирования музыки."

#: 01.2-Exploring-the-Interface.md:81
msgid "H. Scope Viewer"
msgstr "H. Область видимости"

#: 01.2-Exploring-the-Interface.md:83
msgid ""
"The scope viewer allows you to see the sound you're hearing. You can easily se"
"e that the saw wave looks like a saw and that the basic beep is a curvey sine "
"wave. You can also see the difference between loud and quiet sounds by the siz"
"e of the lines. There are 3 scopes to play with - the default is a combined sc"
"ope for the left and right channels, there is a stereo scope which draws a sep"
"arate scope for each channel. Finally there is a Lissajous curve scope which w"
"ill show the phase relationship between the left and right channels and allows"
" you to draw pretty pictures with sound (https://en.wikipedia.org/wiki/Lissajo"
"us_curve)."
msgstr ""
"В области видимости можно наблюдать за воспроизводимым звуком. Вы с лёгкостью "
"заметите, что пилообразная волна действительно напоминает пилу, а простейшие с"
"игналы выглядят как синусоидальные волны. Вы также можете увидеть разницу межд"
"у громкими и тихими звуками, глядя на размер выводимых линий. Существует три о"
"бласти видимости, с которыми можно повозиться - стандартная (комбинация левого"
" и правого каналов), стерео (каждый канал обособлен) и, наконец, область видим"
"ости фигур Лиссажу, которая показывает отношения фаз левого и правого каналов,"
" а также позволяет создавать красивые изображения при помощи звука. (https://r"
"u.wikipedia.org/wiki/%D0%A4%D0%B8%D0%B3%D1%83%D1%80%D1%8B_%D0%9B%D0%B8%D1%81%D"
"1%81%D0%B0%D0%B6%D1%83)."

#: 01.3-Learning-through-Play.md:1
msgid "1.3 Learning through Play"
msgstr "1.3 Обучение через игру"

#: 01.3-Learning-through-Play.md:3
msgid "Learning through Play"
msgstr "Обучение через игру"

#: 01.3-Learning-through-Play.md:5
msgid ""
"Sonic Pi encourages you to learn about both computing and music through play a"
"nd experimentation. The most important thing is that you're having fun, and be"
"fore you know it you'll have accidentally learned how to code, compose and per"
"form."
msgstr ""
"Sonic Pi стремится воодушевить вас изучать компьютеры и музыку через игру и эк"
"спериментирование. Самое главное, чтобы вам было весело, и тогда, прежде, чем "
"вы это поймёте, вы случайно научитесь кодировать, сочинять и исполнять."

#: 01.3-Learning-through-Play.md:10
msgid "There are no mistakes"
msgstr "Ошибок не существует"

#: 01.3-Learning-through-Play.md:12
msgid ""
"Whilst we're on this subject, let me just give you one piece of advice I've le"
"arned over my years of live coding with music - *there are no mistakes, only o"
"pportunities*. This is something I've often heard in relation to jazz but it w"
"orks equally well with live coding. No matter how experienced you are - from a"
" complete beginner to a seasoned Algoraver, you'll run some code that has a co"
"mpletely unexpected outcome. It might sound insanely cool - in which case run "
"with it. However, it might sound totally jarring and out of place. It doesn't "
"matter that it happened - what matters is what you do next with it. Take the s"
"ound, manipulate it and morph it into something awesome. The crowd will go *wi"
"ld*."
msgstr ""
"Коль скоро мы об этом заговорили, позвольте дать вам один совет, который я "
"усвоил за годы занятий лайв-кодингом - *ошибок нет, есть только возможности*"
". Часто мне приходилось слышать это про джаз, но для лайв-кодинга это так же "
"справедливо. Неважно, насколько велик ваш опыт - от полного новичка до "
"бывалого Алго-Рейвера - вы будете запускать код с совершенно неожиданным "
"результатом. Он может звучать безумно круто, тогда вы можете гордиться им. "
"Однако, он также может получиться совершенно невыносимым для слуха и быть не "
"к месту. Не важно, что так произошло. Важно, что вы сделаете с этим потом. "
"Возьмите звук, умело обработайте его, и превратите в нечто ошеломляющее. "
"Публика будет *неистовствовать*."

#: 01.3-Learning-through-Play.md:24
msgid "Start Simple"
msgstr "Начните с простого"

#: 01.3-Learning-through-Play.md:26
msgid ""
"When you're learning, it's tempting to want to do amazing things *now*. Howeve"
"r, just hold that thought and see it as a distant goal to reach *later*. For n"
"ow, instead think of the *simplest* thing you could write which would be fun a"
"nd rewarding that's a small step towards the amazing thing you have in your he"
"ad. Once you have an idea about that simple step, then try and build it, play "
"with it and then see what new ideas it gives you. Before long you'll be too bu"
"sy having fun and making real progress."
msgstr ""
"Когда вы только учитесь, очень хочется делать удивительные вещи уже *сейчас*. "
"Но попридержите эту мысль и смотрите на нее, как на далекую цель, которую вы д"
"остигнете *позже*. Пока что, вместо этого думайте о самом *простом*, что вы мо"
"жете написать, что было бы забавно и приносило бы некое удовлетворение. Каждый"
" раз это будет небольшим шагом к тому поразительному, что есть в вашем воображ"
"ении. Как только у вас появилась идея о простом шаге, попробуйте сделать его, "
"играйте с тем, что получилось и разбирайтесь, какие новые идеи он дает вам. Вс"
"коре у вас появится огромное количество способов повеселиться, а обучение пойд"
"ет в гору."

#: 01.3-Learning-through-Play.md:35
msgid "Just make sure to share your work with others!"
msgstr "Но не забывайте делиться своими достижениями с другими!"

#: 02-Synths.md:1
msgid "2 Synths"
msgstr "2 Синтез"

#: 02-Synths.md:3 02.3-Switching-Synths.md:11
msgid "Synths"
msgstr "Синтез"

#: 02-Synths.md:5
msgid "OK, enough of the intros - let's get into some sound."
msgstr "Довольно вступлений. Пора экспериментировать со звуком."

#: 02-Synths.md:7
msgid ""
"In this section we'll cover the basics of triggering and manipulating synths. "
"Synth is short for synthesiser which is a fancy word for something which creat"
"es sounds. Typically synths are quite complicated to use - especially analog s"
"ynths such as Eurorack modules connected together by a mess of wires. However,"
" Sonic Pi gives you much of that power in a very simple and approachable manne"
"r."
msgstr ""
"В этой главе мы будем рассматривать основы запуска и управления синтами. Синт "
"- это сокращение от синтезатор, что само по себе означает модное словечко для "
"чего-то, что издает звук. Обычно, синты довольно сложны в использовании (особе"
"нно аналоговые, в которых много соединений проводами и модулей). Sonic Pi пред"
"оставляет такие же возможности, но очень простым и доступным способом."

#: 02-Synths.md:14
msgid ""
"Don't be fooled by the immediate simplicity of Sonic Pi's interface. You can g"
"et very deep into very sophisticated sound manipulation if that's your thing. "
"Hold on to your hats..."
msgstr ""
"Не обманывайтесь кажущейся простотой интерфейса Sonic Pi. С ним, если захочетс"
"я, можно добраться до самых потаенных глубин очень сложной манипуляции звуком."
" Итак, придержите свои шляпы..."

#: 02.1-Your-First-Beeps.md:1
msgid "2.1 Your First Beeps"
msgstr "2.1 Ваш первый звук"

#: 02.1-Your-First-Beeps.md:3
msgid "Your First Beeps"
msgstr "Ваши Первые Звуки"

#: 02.1-Your-First-Beeps.md:5
msgid "Take a look at the following code:"
msgstr "Посмотрите на этот код:"

#: 02.1-Your-First-Beeps.md:7 02.4-Durations-with-Envelopes.md:49
#, no-wrap
msgid "play 70"
msgstr "play 70"

#: 02.1-Your-First-Beeps.md:11
msgid ""
"This is where it all starts. Go ahead, copy and paste it into the code window "
"at the top of the app (the big white space under the Run button). Now, press R"
"un..."
msgstr ""
"Отсюда всё берет свое начало. Давайте, скопируйте и вставьте его в окно кода в"
"верху приложения (большое белое пространство под кнопкой `Выполнить`). Затем, "
"нажмите `Выполнить`..."

#: 02.1-Your-First-Beeps.md:15
msgid "Beep!"
msgstr "Звук!"

#: 02.1-Your-First-Beeps.md:17
msgid "Intense. Press it again. And again. *And again...*"
msgstr "Впечатляет. Нажмите заново. Снова. *И снова...*"

#: 02.1-Your-First-Beeps.md:19
msgid ""
"Woah, crazy, I'm sure you could keep doing that all day. But wait, before you "
"lose yourself in an infinite stream of beeps, try changing the number:"
msgstr ""
"Ого, с ума сойти, уверен, вы бы могли просидеть так целый день. Но подождите, "
"до того, как вы растворитесь в бесконечном потоке звуков, попробуйте изменить "
"число:"

#: 02.1-Your-First-Beeps.md:23
#, no-wrap
msgid "play 75"
msgstr "play 75"

#: 02.1-Your-First-Beeps.md:27
msgid "Can you hear the difference? Try a lower number:"
msgstr "Слышите разницу? Попробуйте число поменьше:"

#: 02.1-Your-First-Beeps.md:29
#, no-wrap
msgid "play 60"
msgstr "play 60"

#: 02.1-Your-First-Beeps.md:33
msgid ""
"So, lower numbers make lower pitched beeps and higher numbers make higher pitc"
"hed beeps. Just like on a piano, the keys at the lower part of the piano (the "
"left hand side) play lower notes and the keys on the higher part of the piano "
"(the right hand side) play higher notes. In fact, the numbers actually relate "
"to notes on the piano. `play 47` actually means play the 47th note on the pian"
"o. Which means that `play 48` is one note up (the next note to the right). It "
"just so happens that the 4th octave C is number 60. Go ahead and play it: `pla"
"y 60`."
msgstr ""
"Вот, меньшее число дает более низкий звук, а большее число дает более высокий "
"звук. Прямо как на пианино. Клавиши в нижней части пианино (слева) звучат ниже"
", а клавиши в верхней части пианино (правая сторона) - выше. На самом деле, чи"
"сла имеют прямое отношение к клавишам пианино. `play 47` означает \"сыграй соро"
"к седьмую ноту на пианино\". То есть `play 48` - это на одну ноту выше (следующ"
"ая клавиша справа). Так сложилось, что нота \"До\" четвертой октавы имеет номер "
"60. Попробуйте сыграть её: `play 60`."

#: 02.1-Your-First-Beeps.md:42
msgid ""
"*Don't worry* if this means nothing to you - it didn't to me when I first star"
"ted. All that matters right now is that you know that *low numbers make lower "
"beeps* and *high numbers make higher beeps*."
msgstr ""
"*Не волнуйтесь*, если для вас это ничего не значит - у меня было то же самое, "
"когда я только начинал. Сейчас важно то, что *меньшие числа дают более низкие "
"звуки*, а *большие числа дают более высокие звуки*."

#: 02.1-Your-First-Beeps.md:46 08.2-Chords.md:3
msgid "Chords"
msgstr "Аккорды"

#: 02.1-Your-First-Beeps.md:48
msgid ""
"Playing a note is quite fun, but playing many at the same time can be even bet"
"ter. Try it:"
msgstr ""
"Играть одну ноту весьма забавно, но играть несколько нот сразу ещё лучше. Попр"
"обуйте:"

#: 02.1-Your-First-Beeps.md:51
#, no-wrap
msgid ""
"play 72\n"
"play 75\n"
"play 79"
msgstr ""
"play 72\n"
"play 75\n"
"play 79"

#: 02.1-Your-First-Beeps.md:57
msgid ""
"Jazzy! So, when you write multiple `play`s, they all play at the same time. Tr"
"y it for yourself - which numbers sound good together? Which sound terrible? E"
"xperiment, explore and find out for yourself."
msgstr ""
"Звучит джазово! Итак, когда вы пишете `play` много раз, все ноты играют в одно"
" и то же время. Попробуйте самостоятельно - какие числа звучат вместе хорошо? "
"Какие звучат ужасно? Экспериментируйте, исследуйте и вы выясните это сами."

#: 02.1-Your-First-Beeps.md:61
msgid "Melody"
msgstr "Мелодия"

#: 02.1-Your-First-Beeps.md:63
msgid ""
"So, playing notes and chords is fun - but how about a melody? What if you want"
"ed to play one note after another and not at the same time? Well, that's easy,"
" you just need to `sleep` between the notes:"
msgstr ""
"Играть ноты и аккорды весело, а как насчет мелодий? Что, если вы хотите играть"
" одну ноту за другой, а не все вместе? Что же, это легко. Просто нужно вставит"
"ь `sleep` между ними:"

#: 02.1-Your-First-Beeps.md:67
#, no-wrap
msgid ""
"play 72\n"
"sleep 1\n"
"play 75\n"
"sleep 1\n"
"play 79"
msgstr ""
"play 72\n"
"sleep 1\n"
"play 75\n"
"sleep 1\n"
"play 79"

#: 02.1-Your-First-Beeps.md:75
msgid ""
"How lovely, a little arpeggio. So what does the `1` mean in `sleep 1`? Well it"
" means the *duration of the sleep*. It actually means sleep for one beat, but "
"for now we can think about it as sleeping for 1 second. So, what if we wanted "
"to make our arpeggio a little faster? Well, we need to use shorter sleep value"
"s. What about a half i.e. `0.5`:"
msgstr ""
"Как мило, маленькое арпеджио. Что же значит `1` в `sleep 1`? Ну, это означает "
"*продолжительность паузы*. Вообще-то, это означает задержку на время одной дол"
"и такта, но, пока что будем считать, что это значит спать одну секунду. А вдру"
"г мы захотим, чтобы наше арпеджио стало немного быстрее? Тогда надо указать зн"
"ачение для паузы покороче. Как насчет половины, то есть `0.5`:"

#: 02.1-Your-First-Beeps.md:81
#, no-wrap
msgid ""
"play 72\n"
"sleep 0.5\n"
"play 75\n"
"sleep 0.5\n"
"play 79"
msgstr ""
"play 72\n"
"sleep 0.5\n"
"play 75\n"
"sleep 0.5\n"
"play 79"

#: 02.1-Your-First-Beeps.md:89
msgid ""
"Notice how it plays faster. Now, try for yourself, change the times - use diff"
"erent times and notes."
msgstr ""
"Можно заметить: мелодия стала играть быстрее. Попробуйте сами поменять время и"
" используйте разные продолжительности и ноты."

#: 02.1-Your-First-Beeps.md:92
msgid ""
"One thing to try is in-between notes such as `play 52.3` and `play 52.63`. The"
"re's absolutely no need to stick to standard whole notes. Play around and have"
" fun."
msgstr ""
"Интересно попробовать значения между нотами, например `play 52.3` или `play 52"
".63`. Совсем не нужно держаться стандартных целых чисел. Развлекайтесь и получ"
"айте удовольствие."

#: 02.1-Your-First-Beeps.md:97
msgid "Traditional Note Names"
msgstr "Обычные названия нот"

#: 02.1-Your-First-Beeps.md:99
msgid ""
"For those of you that already know some musical notation (don't worry if you d"
"on't - you don't need it to have fun) you might want to write a melody using n"
"ote names such as C and F# rather than numbers. Sonic Pi has you covered. You "
"can do the following:"
msgstr ""
"Для тех, кто уже немного знаком с нотной грамотой (не волнуйтесь, если вы не з"
"наете о чём речь - для веселья она вам не нужна), может быть интересно записат"
"ь мелодию, используя названия нот, такие как \"До\" (C) и \"Фа-диез\" (F#), а не ч"
"исла. Sonic Pi предусмотрел это. Можно делать так:"

#: 02.1-Your-First-Beeps.md:104
#, no-wrap
msgid ""
"play :C\n"
"sleep 0.5\n"
"play :D\n"
"sleep 0.5\n"
"play :E"
msgstr ""
"play :C\n"
"sleep 0.5\n"
"play :D\n"
"sleep 0.5\n"
"play :E"

#: 02.1-Your-First-Beeps.md:112
msgid ""
"Remember to put the colon `:` in front of your note name so that it goes pink."
" Also, you can specify the octave by adding a number after the note name:"
msgstr ""
"Просто помните, что перед нотой должно стоять двоеточие `:`. Тогда она станет "
"розовой. Ещё можно указывать октаву, добавляя её номер после названия ноты:"

#: 02.1-Your-First-Beeps.md:116
#, no-wrap
msgid ""
"play :C3\n"
"sleep 0.5\n"
"play :D3\n"
"sleep 0.5\n"
"play :E4"
msgstr ""
"play :C3\n"
"sleep 0.5\n"
"play :D3\n"
"sleep 0.5\n"
"play :E4"

#: 02.1-Your-First-Beeps.md:124
msgid ""
"If you want to make a note sharp, add an `s` after the note name such as `play"
" :Fs3` and if you want to make a note flat, add a `b` such as `play :Eb3`."
msgstr ""
"Если хотите сделать ноту на полтона выше, поставьте `s` после её имени, то ест"
"ь `play :Fs3`. А когда нужен бемоль, обозначьте это при помощи `b`, то есть `p"
"lay :Eb3`."

#: 02.1-Your-First-Beeps.md:127
msgid "Now go *crazy* and have fun making your own tunes."
msgstr ""
"А теперь, дайте себе волю, и как следует *повеселитесь*, придумывая собственны"
"е мелодии."

#: 02.2-Synth-Params.md:1
msgid "2.2 Synth Options"
msgstr "2.2 Свойства синтезаторов"

#: 02.2-Synth-Params.md:3
msgid "Synth Options: Amp and Pan"
msgstr "Параметры: Amp и Pan"

#: 02.2-Synth-Params.md:5
msgid ""
"As well as allowing you to control which note to play or which sample to trigg"
"er, Sonic Pi provides a whole range of options to craft and control the sounds"
". We'll be covering many of these in this tutorial and there's extensive docum"
"entation for each in the help system. However, for now we'll introduce two of "
"the most useful: *amplitude* and *pan*. First, let's look at what options actu"
"ally are."
msgstr ""
"В дополнение к возможности выбрать какую ноту играть или какой сэмпл включать,"
" Sonic Pi предоставляет целый арсенал настроек для создания и управления звуко"
"м. Многие из этих настроек описаны в этом учебнике, и есть обширная документац"
"ия по каждой из них в справочной системе. Пока что, мы познакомимся всего лишь"
" с двумя самыми полезными: амплитуда и панорамирование. Вначале посмотрим, что"
" же такое эти настройки на самом деле."

#: 02.2-Synth-Params.md:13
msgid "Options"
msgstr "Настройки"

#: 02.2-Synth-Params.md:15
msgid ""
"Sonic Pi supports the notion of options (or opts for short) for its synths. Op"
"ts are controls you pass to `play` which modify and control aspects of the sou"
"nd you hear. Each synth has its own set of opts for finely tuning its sound. H"
"owever, there are common sets of opts shared by many sounds such as `amp:` and"
" envelope opts (covered in another section)."
msgstr ""
"Sonic Pi поддерживает регулировки для своих синтезаторов. Они представляют соб"
"ой элементы управления, для управления которыми вы передаёте атрибуты функции "
"`play`. Эти атрибуты изменяют и контролируют выводимый звук. У каждого синтеза"
"тора свой собственный набор регулировок для тонкой настройки звука. Но, есть о"
"бщие наборы регулировок, одинаковые для разных синтезаторов, такие как `amp:`,"
" `pan:` и параметры огибающей (обсуждается в другой главе)."

#: 02.2-Synth-Params.md:22
msgid ""
"Opts have two major parts, their name (the name of the control) and their valu"
"e (the value you want to set the control at). For example, you might have a op"
"t called `cheese:` and want to set it with a value of `1`."
msgstr ""
"Каждая регулировка состоит из двух частей: название регулировки (элемента упра"
"вления) и её значение (деление, на которое вы хотите установить ручку регулиро"
"вки). Например, может быть настройка с названием `cheese:`, а ее желаемым знач"
"ением будет `1`."

#: 02.2-Synth-Params.md:27
msgid ""
"Opts are passed to calls to `play` by using a comma `,` and then the name of t"
"he opt such as `amp:` (don't forget the colon `:`) and then a space and the va"
"lue of the opt. For example:"
msgstr ""
"Настройки передаются вызовам `play` после запятой `,` далее следует название, "
"например `amp:` (не забудьте двоеточие `:`), а потом ее значение. Например:"

#: 02.2-Synth-Params.md:31
#, no-wrap
msgid "play 50, cheese: 1"
msgstr "play 50, cheese: 1"

#: 02.2-Synth-Params.md:35
msgid "(Note that `cheese:` isn't a valid opt, we're just using it as an example)."
msgstr ""
"(Замечание: `cheese:` - не настоящая настройка, мы просто используем ее для пр"
"имера)."

#: 02.2-Synth-Params.md:37
msgid "You can pass multiple opts by separating them with a comma:"
msgstr "Можно передавать много настроек, разделяя их запятыми:"

#: 02.2-Synth-Params.md:39
#, no-wrap
msgid "play 50, cheese: 1, beans: 0.5"
msgstr "play 50, cheese: 1, beans: 0.5"

#: 02.2-Synth-Params.md:43
msgid "The order of the opts doesn't matter, so the following is identical:"
msgstr "Порядок регулировок не важен, так что следующий пример ничем не отличается:"

#: 02.2-Synth-Params.md:45
#, no-wrap
msgid "play 50, beans: 0.5, cheese: 1"
msgstr "play 50, beans: 0.5, cheese: 1"

#: 02.2-Synth-Params.md:49
msgid ""
"Opts that aren't recognised by the synth are just ignored (like `cheese` and `"
"beans` which are clearly ridiculous opt names!)"
msgstr ""
"Регуляторы, о которых синтезатор не знает, попросту пропускаются (такие как `c"
"heese` и `beans` - очевидно нелепые названия для настроек!)"

#: 02.2-Synth-Params.md:52
msgid ""
"If you accidentally use the same opt twice with different values, the last one"
" wins. For example, `beans:` here will have the value 2 rather than 0.5:"
msgstr ""
"Если вы случайно укажите одну и ту же настройку с разными значениями, то побед"
"ит последнее. Например, значением `beans:` будет `2`, а не `0.5`:"

#: 02.2-Synth-Params.md:56
#, no-wrap
msgid "play 50, beans: 0.5, cheese: 3, eggs: 0.1, beans: 2"
msgstr "play 50, beans: 0.5, cheese: 3, eggs: 0.1, beans: 2"

#: 02.2-Synth-Params.md:60
msgid ""
"Many things in Sonic Pi accept opts, so just spend a little time learning how "
"to use them and you'll be set! Let's play with our first opt: `amp:`."
msgstr ""
"Множество вещей в Sonic Pi гибко регулируемо, потратьте немного времени на изу"
"чение того, как использовать их, и будете \"настроены\"! Давайте позабавимся с н"
"ашим первым регулятором - `amp:`."

#: 02.2-Synth-Params.md:64 02.4-Durations-with-Envelopes.md:25
msgid "Amplitude"
msgstr "Амплитуда"

#: 02.2-Synth-Params.md:66
msgid ""
"Amplitude is a computer representation of the loudness of a sound. A *high amp"
"litude produces a loud sound* and a *low amplitude produces a quiet sound*. Ju"
"st as Sonic Pi uses numbers to represent time and notes, it uses numbers to re"
"present amplitude. An amplitude of 0 is silent (you'll hear nothing) whereas a"
"n amplitude of 1 is normal volume. You can even crank up the amplitude higher "
"to 2, 10, 100. However, you should note that when the overall amplitude of all"
" the sounds gets too high, Sonic Pi uses what's called a compressor to squash "
"them all to make sure things aren't too loud for your ears. This can often mak"
"e the sound muddy and strange. So try to use low amplitudes, i.e. in the range"
" 0 to 0.5 to avoid compression."
msgstr ""
"Амплитуда - компьютерное представление громкости звука. *Высокая амплитуда даё"
"т громкий звук*, а *низкая амплитуда даёт тихий звук*. Так же, как Sonic Pi ис"
"пользует числа для обозначения нот, числами обозначается и амплитуда. При знач"
"ении амплитуды 0 получается тишина (ничего не будет слышно), а амплитуда 1 - э"
"то нормальная громкость. Можно, также, увеличить амплитуду до 2, 10 или 100. Н"
"о стоит отметить, что когда общая амплитуда становится слишком высокой, то Son"
"ic Pi включает так называемый компрессор, чтобы сжать ее и не дать звуку сдела"
"ться слишком громким для ваших ушей. Часто это может делать звук непонятным и "
"странным. Так что постарайтесь использовать значения амплитуды в промежутке от"
" 0 до 0.5, чтобы избегать компрессии."

#: 02.2-Synth-Params.md:79
msgid "Amp it up"
msgstr "Усиление"

#: 02.2-Synth-Params.md:81
msgid ""
"To change the amplitude of a sound, you can use the `amp:` opt. For example, t"
"o play at half amplitude pass 0.5:"
msgstr ""
"Чтобы изменить амплитуду звука, можно воспользоваться настройкой `amp:`. Напри"
"мер, передай 0.5, чтобы играть на половинной громкости:"

#: 02.2-Synth-Params.md:84
#, no-wrap
msgid "play 60, amp: 0.5"
msgstr "play 60, amp: 0.5"

#: 02.2-Synth-Params.md:88
msgid "To play at double amplitude pass 2:"
msgstr "Чтобы играть на удвоенной громкости, передай 2:"

#: 02.2-Synth-Params.md:90
#, no-wrap
msgid "play 60, amp: 2"
msgstr "play 60, amp: 2"

#: 02.2-Synth-Params.md:94
msgid ""
"The `amp:` opt only modifies the call to `play` it's associated with. So, in t"
"his example, the first call to play is at half volume and the second is back t"
"o the default (1):"
msgstr ""
"Регулировка `amp:` изменяет тот вызов `play`, с которым она идёт вместе. Поэто"
"му в следующем примере первый вызов произойдет на половинной громкости, а втор"
"ой вернется к значению по умолчанию (1):"

#: 02.2-Synth-Params.md:98
#, no-wrap
msgid ""
"play 60, amp: 0.5\n"
"sleep 0.5\n"
"play 65"
msgstr ""
"play 60, amp: 0.5\n"
"sleep 0.5\n"
"play 65"

#: 02.2-Synth-Params.md:104
msgid "Of course, you can use different `amp:` values for each call to play:"
msgstr "Конечно, можно задавать разные значения `amp:` для каждого вызова `play`:"

#: 02.2-Synth-Params.md:106
#, no-wrap
msgid ""
"play 50, amp: 0.1\n"
"sleep 0.25\n"
"play 55, amp: 0.2\n"
"sleep 0.25\n"
"play 57, amp: 0.4\n"
"sleep 0.25\n"
"play 62, amp: 1"
msgstr ""
"play 50, amp: 0.1\n"
"sleep 0.25\n"
"play 55, amp: 0.2\n"
"sleep 0.25\n"
"play 57, amp: 0.4\n"
"sleep 0.25\n"
"play 62, amp: 1"

#: 02.2-Synth-Params.md:116
msgid "Panning"
msgstr "Панорамирование"

#: 02.2-Synth-Params.md:118
msgid ""
"Another fun opt to use is `pan:` which controls the panning of a sound in ster"
"eo. Panning a sound to the left means that you hear it out of the left speaker"
", and panning it to the right means you hear it out of your right speaker. For"
" our values, we use a -1 to represent fully left, 0 to represent center and 1 "
"to represent fully right in the stereo field. Of course, we're free to use any"
" value between -1 and 1 to control the exact positioning of our sound."
msgstr ""
"Еще одной забавной настройкой, которую стоит использовать, является `pan:`. Он"
"а контролирует смещение звука в стереобазе. Смещение звука влево означает, что"
" вы услышите его из левого динамика, а смещение вправо - что он будет выходить"
" из правого динамика. Мы используем -1 для полного смещения влево, 0 для центр"
"а, а 1 - для полного смещения вправо в стереобазе. Безусловно, мы можем указыв"
"ать любое значение в промежутке между -1 и 1 для точного позиционирования наше"
"го звука."

#: 02.2-Synth-Params.md:126
msgid "Let's play a beep out of the left speaker:"
msgstr "Давай получим звук из левого динамика:"

#: 02.2-Synth-Params.md:128
#, no-wrap
msgid "play 60, pan: -1"
msgstr "play 60, pan: -1"

#: 02.2-Synth-Params.md:132
msgid "Now, let's play it out of the right speaker:"
msgstr "Теперь, повторим его из правого:"

#: 02.2-Synth-Params.md:134
#, no-wrap
msgid "play 60, pan: 1"
msgstr "play 60, pan: 1"

#: 02.2-Synth-Params.md:138
msgid "Finally let's play it back out of the center of both (the default position):"
msgstr "Наконец, выведем его снова по центру (позиция по умолчанию):"

#: 02.2-Synth-Params.md:141
#, no-wrap
msgid "play 60, pan: 0"
msgstr "play 60, pan: 0"

#: 02.2-Synth-Params.md:145
msgid "Now, go and have fun changing the amplitude and panning of your sounds!"
msgstr ""
"Попробуйте сами сделать что-нибудь весёлое, меняя амплитуду и панорамирование "
"ваших звуков!"

#: 02.3-Switching-Synths.md:1
msgid "2.3 Switching Synths"
msgstr "2.3 Переключение между синтезаторами"

#: 02.3-Switching-Synths.md:3
msgid "Switching Synths"
msgstr "Переключаем Синтезаторы"

#: 02.3-Switching-Synths.md:5
msgid ""
"So far we've had quite a lot of fun making beeps. However, you're probably sta"
"rting to get bored of the basic beep noise. Is that all Sonic Pi has to offer?"
" Surely there's more to live coding than just playing beeps? Yes there is, and"
" in this section we'll explore the exciting range of sounds that Sonic Pi has "
"to offer."
msgstr ""
"До сего момента мы, по большей части, развлекались с простыми звуками. Однако,"
" простые тона уже начали вас утомлять. Разве это все, что Sonic Pi может предл"
"ожить? Определенно, у лайвкодинга есть больше возможностей, чем просто гудение"
". Да, есть. И в этой главе мы познакомимся с захватывающим набором звуков, дос"
"тупных в Sonic Pi."

#: 02.3-Switching-Synths.md:13
msgid ""
"Sonic Pi has a range of instruments it calls synths which is *short for synthe"
"sisers*. Whereas samples represent pre-recorded sounds, synths are capable of "
"generating new sounds depending on how you control them (which we'll explore l"
"ater in this tutorial). Sonic Pi's synths are very powerful and expressive and"
" you'll have a lot of fun exploring and playing with them. First, let's learn "
"how to select the current synth to use."
msgstr ""
"В Sonic Pi есть ряд инструментов, называемых синтами, что есть *сокращение от "
"термина \"синтезатор\"*. В то время, как сэмплы представляют собой предварительн"
"о записанные звуки, синты могут генерировать новые звуки в зависимости от того"
", как вы ими управляете (это мы изучим далее в этом учебнике). Синты Sonic Pi "
"- очень могущественные и яркие инструменты. Играть с ними очень весело. Вначал"
"е, давайте научимся выбирать какой синтезатор мы будем использовать."

#: 02.3-Switching-Synths.md:21
msgid "Buzzy saws and prophets"
msgstr "Жужжащие Пилы И Профеты"

#: 02.3-Switching-Synths.md:23
msgid "A fun sound is the *saw wave* - let's give it a try:"
msgstr "*Пилообразная волна* - забавный звук. Давайте попробуем его:"

#: 02.3-Switching-Synths.md:25
#, no-wrap
msgid ""
"use_synth :saw\n"
"play 38\n"
"sleep 0.25\n"
"play 50\n"
"sleep 0.25\n"
"play 62\n"
"sleep 0.25"
msgstr ""
"use_synth :saw\n"
"play 38\n"
"sleep 0.25\n"
"play 50\n"
"sleep 0.25\n"
"play 62\n"
"sleep 0.25"

#: 02.3-Switching-Synths.md:35
msgid "Let's try another sound - the *prophet*:"
msgstr "Попробуйте другой - *prophet*:"

#: 02.3-Switching-Synths.md:37
#, no-wrap
msgid ""
"use_synth :prophet\n"
"play 38\n"
"sleep 0.25\n"
"play 50\n"
"sleep 0.25\n"
"play 62\n"
"sleep 0.25"
msgstr ""
"use_synth :prophet\n"
"play 38\n"
"sleep 0.25\n"
"play 50\n"
"sleep 0.25\n"
"play 62\n"
"sleep 0.25"

#: 02.3-Switching-Synths.md:47
msgid "How about combining two sounds. First one after another:"
msgstr "Как насчет смешивания обоих. Сначала один, а потом другой:"

#: 02.3-Switching-Synths.md:49
#, no-wrap
msgid ""
"use_synth :saw\n"
"play 38\n"
"sleep 0.25\n"
"play 50\n"
"sleep 0.25\n"
"use_synth :prophet\n"
"play 57\n"
"sleep 0.25"
msgstr ""
"use_synth :saw\n"
"play 38\n"
"sleep 0.25\n"
"play 50\n"
"sleep 0.25\n"
"use_synth :prophet\n"
"play 57\n"
"sleep 0.25"

#: 02.3-Switching-Synths.md:60
msgid "Now at the same time:"
msgstr "А теперь вместе:"

#: 02.3-Switching-Synths.md:62
#, no-wrap
msgid ""
"use_synth :tb303\n"
"play 38\n"
"sleep 0.25\n"
"use_synth :dsaw\n"
"play 50\n"
"sleep 0.25\n"
"use_synth :prophet\n"
"play 57\n"
"sleep 0.25"
msgstr ""
"use_synth :tb303\n"
"play 38\n"
"sleep 0.25\n"
"use_synth :dsaw\n"
"play 50\n"
"sleep 0.25\n"
"use_synth :prophet\n"
"play 57\n"
"sleep 0.25"

#: 02.3-Switching-Synths.md:74
msgid ""
"Notice that the `use_synth` command only affects the following calls to `play`"
". Think of it like a *big switch* - new calls to `play` will play whatever syn"
"th it's currently pointing to. You can move the switch to a new synth with `us"
"e_synth`."
msgstr ""
"Как вы могли заметить, команда `use_synth` влияет только на следующие вызовы `"
"play`. Представьте, что это *большой выключатель* - новые вызовы `play` будут "
"играть только на используемом синте. На новый синт можно переключиться с помощ"
"ью `use_synth`."

#: 02.3-Switching-Synths.md:80
msgid "Discovering Synths"
msgstr "Изучаем синтезаторы"

#: 02.3-Switching-Synths.md:82
msgid ""
"To see which synths Sonic Pi has for you to play with take a look at the Synth"
"s option in the far left vertical menu (above Fx). There are over 20 to choose"
" from. Here are a few of my favourites:"
msgstr ""
"Чтобы увидеть, какие синты есть в Sonic Pi, загляните во вкладку Synths в меню"
" слева внизу (рядом с Fx). Там их больше 20 на выбор. Вот несколько моих любим"
"ых:"

#: 02.3-Switching-Synths.md:86
msgid "`:prophet`"
msgstr "`:prophet`"

#: 02.3-Switching-Synths.md:87
msgid "`:dsaw`"
msgstr "`:dsaw`"

#: 02.3-Switching-Synths.md:88
msgid "`:fm`"
msgstr "`:fm`"

#: 02.3-Switching-Synths.md:89
msgid "`:tb303`"
msgstr "`:tb303`"

#: 02.3-Switching-Synths.md:90
msgid "`:pulse`"
msgstr "`:pulse`"

#: 02.3-Switching-Synths.md:92
msgid ""
"Now play around with *switching synths during your music*. Have fun combining "
"synths to make new sounds as well as using different synths for different sect"
"ions of your music."
msgstr ""
"Попробуйте *попереключаться между синтами, пока ваша музыка играет*. Позабавьт"
"есь со смешиванием синтов, чтобы получать новые звуки. Еще можно использовать "
"разные синтезаторы для разных частей музыки."

#: 02.4-Durations-with-Envelopes.md:1
msgid "2.4 Duration with Envelopes"
msgstr "2.4 Длительность и огибающие"

#: 02.4-Durations-with-Envelopes.md:3
msgid "Duration with Envelopes"
msgstr "Управление длительностью при помощи огибающих"

#: 02.4-Durations-with-Envelopes.md:5
msgid ""
"In an earlier section, we looked at how we can use the `sleep` command to cont"
"rol when to trigger our sounds. However, we haven't yet been able to control t"
"he duration of our sounds."
msgstr ""
"В одной из предыдущих глав мы изучали, как можно использовать команду `sleep` "
"для того, чтобы контролировать, когда начинается звук. Однако, до этого момент"
"а мы не могли настраивать продолжительность наших звуков."

#: 02.4-Durations-with-Envelopes.md:9
msgid ""
"In order to give us a simple, yet powerful means of *controlling the duration*"
" of our sounds, Sonic Pi provides the notion of an *ADSR amplitude envelope* ("
"we'll cover what ADSR means later in this section). An amplitude envelope offe"
"rs two useful aspects of control:"
msgstr ""
"В качестве простого и мощного способа *управления длительностью* наших звуков "
"Sonic Pi предоставляет нам понятие *ADSR амплитудной огибающей* (Дальше в этой"
" главе - ADSR). Амплитудная огибающая предлагает контроль по двум параметрам:"

#: 02.4-Durations-with-Envelopes.md:14
msgid "control over the duration of a sound"
msgstr "управление длительностью звука"

#: 02.4-Durations-with-Envelopes.md:15
msgid "control over the amplitude of a sound"
msgstr "управление амплитудой звука"

#: 02.4-Durations-with-Envelopes.md:17
msgid "Duration"
msgstr "Длительность"

#: 02.4-Durations-with-Envelopes.md:19
msgid ""
"The duration is the length the sound lasts for. A longer duration means that y"
"ou hear the sound for longer. Sonic Pi's sounds all have a controllable amplit"
"ude envelope, and the total duration of that envelope is the duration of the s"
"ound. Therefore, by controlling the envelope you control the duration."
msgstr ""
"Длительность - это отрезок времени, в течении которого продолжается звук. Боль"
"шая продолжительность означает, что вы слышите звук дольше. Все звуки в Sonic "
"Pi имеют контролируемую продолжительность. Поэтому, управляя огибающей, вы упр"
"авляете продолжительностью."

#: 02.4-Durations-with-Envelopes.md:27
msgid ""
"The ADSR envelope not only controls duration, it also gives you *fine control "
"over the amplitude of the sound*. All audible sounds start and end silent and "
"contain some non-silent part in-between. Envelopes allow you to slide and hold"
" the amplitude of non-silent parts of the sound. It's like giving someone inst"
"ructions on how to turn up and down the volume of a guitar amplifier. For exam"
"ple you might ask someone to \"start at silence, slowly move up to full volume,"
" hold it for a bit, then quickly fall back to silence.\" Sonic Pi allows you to"
" program exactly this behaviour with envelopes."
msgstr ""
"ADSR-огибающая задает не только длительность, но еще и позволяет *тонкую настр"
"ойку амплитуды сигнала*. Все слышимые звуки начинаются и заканчиваются тишиной"
", а в промежутке находится изменяющаяся часть звука. Огибающие дают вам возмож"
"ность плавно изменять и удерживать амплитуду разных частей звука. Это похоже н"
"а написание инструкции о том, в каком порядке понижать и повышать громкость ги"
"тарного усилителя. Например, вы можете попросить \"начать с тишины, потом медле"
"нно повышать до полной громкости, держать её на этой отметке короткое время, а"
" потом быстро вернуть на тихий уровень\". Sonic Pi дает возможность запрограмми"
"ровать такое поведение очень точно с помощью огибающих."

#: 02.4-Durations-with-Envelopes.md:37
msgid ""
"Just to recap, as we have seen before, an amplitude of 0 is silence and an amp"
"litude of 1 is normal volume."
msgstr ""
"Итак, как мы видели раньше, амплитуда 0 - это тишина, а амплитуда 1 - нормальн"
"ая громкость."

#: 02.4-Durations-with-Envelopes.md:40
msgid "Now, let us look at each of the parts of the envelopes in turn."
msgstr "Теперь, пришла пора взглянуть на каждую часть огибающей по порядку."

#: 02.4-Durations-with-Envelopes.md:42
msgid "Release Phase"
msgstr "Фаза затухания (Release Phase)"

#: 02.4-Durations-with-Envelopes.md:44
msgid ""
"The only part of the envelope that's used by default is the release time. This"
" is the time it takes for the synth's sound to fade out. All synths have a rel"
"ease time of 1 which means that by default they have a duration of 1 beat (whi"
"ch at the default BPM of 60 is 1 second):"
msgstr ""
"Единственная часть огибающей, установленная по умолчанию, - это время затухани"
"я. Оно обозначает продолжительность времени, за которое звук полностью исчезне"
"т. У всех синтов затухание настроено на 1, что значит по умолчанию звук длится"
" в течение одной доли такта (что при темпе по умолчанию в 60 составляет 1 секу"
"нду):"

#: 02.4-Durations-with-Envelopes.md:53
msgid ""
"The note will be audible for 1 second. Go ahead and time it :-) This is short "
"hand for the longer more explicit version:"
msgstr ""
"Ноту будет слышно одну секунду. Можете измерить сами :-) В полной, и более явн"
"ой записи, то же самое будет выглядеть так:"

#: 02.4-Durations-with-Envelopes.md:56
#, no-wrap
msgid "play 70, release: 1"
msgstr "play 70, release: 1"

#: 02.4-Durations-with-Envelopes.md:60
msgid ""
"Notice how this sounds exactly the same (the sound lasts for one second). Howe"
"ver, it's now very easy to change the duration by modifying the value of the `"
"release:` opt:"
msgstr ""
"Заметьте, что звук получился точно таким же (длился ровно 1 секунду). Очень ле"
"гко изменять длительность, изменяя значение регулировки `release:`:"

#: 02.4-Durations-with-Envelopes.md:64
#, no-wrap
msgid "play 60, release: 2"
msgstr "play 60, release: 2"

#: 02.4-Durations-with-Envelopes.md:68
msgid ""
"We can make the synth sound for a very short amount of time by using a very sm"
"all release time:"
msgstr ""
"Можно cделать звучание синта крайне непродолжительным, указав очень маленькое "
"значение затухания:"

#: 02.4-Durations-with-Envelopes.md:71
#, no-wrap
msgid "play 60, release: 0.2"
msgstr "play 60, release: 0.2"

#: 02.4-Durations-with-Envelopes.md:75
msgid ""
"The duration of the release of the sound is called the *release phase* and by "
"default is a linear transition (i.e. a straight line). The following diagram i"
"llustrates this transition:"
msgstr ""
"Длительность затухания звука называется *фазой затухания* (release phase) и, п"
"о умолчанию, представляет из себя линейный переход (т.e. прямую линию). Следую"
"щая диаграмма иллюстрирует такой переход:"

#: 02.4-Durations-with-Envelopes.md:79
msgid "![release envelope](../images/tutorial/env-release.png)"
msgstr "![release envelope](../images/tutorial/env-release.png)"

#: 02.4-Durations-with-Envelopes.md:81
msgid ""
"The vertical line at the far left of the diagram shows that the sound starts a"
"t 0 amplitude, but goes up to full amplitude immediately (this is the attack p"
"hase which we'll cover next). Once at full amplitude it then moves in a straig"
"ht line down to zero taking the amount of time specified by `release:`. *Longe"
"r release times produce longer synth fade outs.*"
msgstr ""
"Вертикальная линия на левом краю диаграммы показывает, что звук начинается при"
" амплитуде 0, но сразу после этого начинает выводиться на полной громкости (эт"
"о фаза атаки, которую мы рассмотрим далее). Как только достигнута максимальная"
" амплитуда, она спадает прямой линией до нуля, занимая время, указанное для `r"
"elease:`. *Чем продолжительнее время затухания, тем дольше будет стихать синт*"

#: 02.4-Durations-with-Envelopes.md:88
msgid ""
"You can therefore change the duration of your sound by changing the release ti"
"me. Have a play adding release times to your music."
msgstr ""
"Таким образом, вы можете менять длительность звучания своих звуков, изменяя вр"
"емя затухания. Потратьте немного времени, пробуя добавлять время затухания к с"
"обственной музыке."

#: 02.4-Durations-with-Envelopes.md:91
msgid "Attack Phase"
msgstr "Фаза атаки (Attack Phase)"

#: 02.4-Durations-with-Envelopes.md:93
msgid ""
"By default, the *attack phase* is 0 for all synths which means they move from "
"0 amplitude to 1 immediately. This gives the synth an initial percussive sound"
". However, you may wish to fade your sound in. This can be achieved with the `"
"attack:` opt. Try fading in some sounds:"
msgstr ""
"По умолчанию *фаза атаки* равна 0 для всех синтов, что значит их амплитуда мен"
"яется от 0 до 1 мгновенно. Поэтому начальный звук синта похож на удар. Но вам "
"может понадобиться плавно вывести звук. Этого можно добиться при помощи регули"
"ровки `attack:`. Попробуйте плавно извлекать какие-нибудь звуки:"

#: 02.4-Durations-with-Envelopes.md:98
#, no-wrap
msgid ""
"play 60, attack: 2\n"
"sleep 3\n"
"play 65, attack: 0.5"
msgstr ""
"play 60, attack: 2\n"
"sleep 3\n"
"play 65, attack: 0.5"

#: 02.4-Durations-with-Envelopes.md:104
msgid ""
"You may use multiple opts at the same time. For example for a short attack and"
" a long release try:"
msgstr ""
"Можно пользоваться несколькими регуляторами в одно и то же время. Например, дл"
"я короткой атаки и долгого затухания попробуйте:"

#: 02.4-Durations-with-Envelopes.md:107
#, no-wrap
msgid "play 60, attack: 0.7, release: 4"
msgstr "play 60, attack: 0.7, release: 4"

#: 02.4-Durations-with-Envelopes.md:111
msgid ""
"This short attack and long release envelope is illustrated in the following di"
"agram:"
msgstr "Эта краткая атака и длинное затухание иллюстрируются следующей диаграммой:"

#: 02.4-Durations-with-Envelopes.md:114
msgid "![attack release envelope](../images/tutorial/env-attack-release.png)"
msgstr "![огибающая атаки и затухания](../images/tutorial/env-attack-release.png)"

#: 02.4-Durations-with-Envelopes.md:116
msgid ""
"Of course, you may switch things around. Try a long attack and a short release"
":"
msgstr "Конечно, можно и наоборот. Попробуйте долгую атаку и короткое затухание:"

#: 02.4-Durations-with-Envelopes.md:119
#, no-wrap
msgid "play 60, attack: 4, release: 0.7"
msgstr "play 60, attack: 4, release: 0.7"

#: 02.4-Durations-with-Envelopes.md:123
msgid ""
"![long attack short release envelope](../images/tutorial/env-long-attack-short"
"-release.png)"
msgstr ""
"![огибающая с долгой атакой и быстрым стиханием](../images/tutorial/env-long-a"
"ttack-short-release.png)"

#: 02.4-Durations-with-Envelopes.md:125
msgid ""
"Finally, you can also have both short attack and release times for shorter sou"
"nds."
msgstr ""
"В конце-концов, для кратких звуков можно сделать короткими и атаку, и затухани"
"е."

#: 02.4-Durations-with-Envelopes.md:128
#, no-wrap
msgid "play 60, attack: 0.5, release: 0.5"
msgstr "play 60, attack: 0.5, release: 0.5"

#: 02.4-Durations-with-Envelopes.md:132
msgid ""
"![short attack short release envelope](../images/tutorial/env-short-attack-sho"
"rt-release.png)"
msgstr ""
"![огибающая с короткой атакой и коротким стиханием](../images/tutorial/env-sho"
"rt-attack-short-release.png)"

#: 02.4-Durations-with-Envelopes.md:134
msgid "Sustain Phase"
msgstr "Фаза задержки (Sustain Phase)"

#: 02.4-Durations-with-Envelopes.md:136
msgid ""
"In addition to specifying attack and release times, you may also specify a sus"
"tain time to control the *sustain phase*. This is the time for which the sound"
" is maintained at full amplitude between the attack and release phases."
msgstr ""
"Вдобавок, к заданию времени атаки и затухания, можно указать время задержки, ч"
"тобы управлять *фазой задержки*. Это отрезок времени, в течение которого звук "
"остается на полной громкости в промежутке между фазами атаки и затухания."

#: 02.4-Durations-with-Envelopes.md:141
#, no-wrap
msgid "play 60, attack: 0.3, sustain: 1, release: 1"
msgstr "play 60, attack: 0.3, sustain: 1, release: 1"

#: 02.4-Durations-with-Envelopes.md:145
msgid "![ASR envelope](../images/tutorial/env-attack-sustain-release.png)"
msgstr "![ASR огибающая](../images/tutorial/env-attack-sustain-release.png)"

#: 02.4-Durations-with-Envelopes.md:147
msgid ""
"The sustain time is useful for important sounds you wish to give full presence"
" in the mix before entering an optional release phase. Of course, it's totally"
" valid to set both the `attack:` and `release:` opts to 0 and just use the sus"
"tain to have absolutely no fade in or fade out to the sound. However, be warne"
"d, a release of 0 can produce clicks in the audio and it's often better to use"
" a very small value such as 0.2."
msgstr ""
"Задержка полезна для важных звуков, которые вы хотели бы полностью выделить пр"
"и сведении, прежде чем они перейдут в необязательную фазу затухания. Конечно ж"
"е, совершенно допустимо устанавливать и `attack:` и `release:` в 0 и попросту "
"использовать задержку, чтобы не иметь абсолютно никакого нарастания и затухани"
"я у звука. Но стоит заметить, что затухание 0 может давать щелчки в аудио, и ч"
"асто лучше все-таки указывать очень маленькое значение, такое как 0.2."

#: 02.4-Durations-with-Envelopes.md:154
msgid "Decay Phase"
msgstr "Фаза спада (Decay Phase)"

#: 02.4-Durations-with-Envelopes.md:156
msgid ""
"For an extra level of control, you can also specify a decay time. This is a ph"
"ase of the envelope that fits between the attack and sustain phases and specif"
"ies a time where the amplitude will drop from the `attack_level:` to the `deca"
"y_level:` (which unless you explicitly set it will be set to the `sustain_leve"
"l:`). By default, the `decay:` opt is 0 and both the attack and sustain levels"
" are 1 so you'll need to specify them for the decay time to have any effect:"
msgstr ""
"Для дополнительного уровня контроля можно указать время спада. Это фаза огибаю"
"щей, которая помещается между фазами атаки и задержки. Она задает участок врем"
"ени, когда амплитуда будет падать от уровня `attack_level:` до `decay_level:` "
"(если явно не установить его, то он будет совпадать с `sustain_level:`). По ум"
"олчанию, уровни `decay:` и `attack:` установлена в 0, а уровень затухания в 1,"
" поэтому надо указывать время спада, чтобы оно имело какой-либо эффект:"

#: 02.4-Durations-with-Envelopes.md:164
#, no-wrap
msgid ""
"play 60, attack: 0.1, attack_level: 1, decay: 0.2, sustain_level: 0.4, sustain"
": 1, release: 0.5"
msgstr ""
"play 60, attack: 0.1, attack_level: 1, decay: 0.2, sustain_level: 0.4, sustain"
": 1, release: 0.5"

#: 02.4-Durations-with-Envelopes.md:168
msgid "![ADSR envelope](../images/tutorial/env-attack-decay-sustain-release.png)"
msgstr "![ADSR огибающая](../images/tutorial/env-attack-decay-sustain-release.png)"

#: 02.4-Durations-with-Envelopes.md:170
msgid "Decay Level"
msgstr "Уровень спада (Decay Level)"

#: 02.4-Durations-with-Envelopes.md:172
msgid ""
"One last trick is that although the `decay_level:` opt defaults to be the same"
" value as `sustain_level:` you can explicitly set them to different values for"
" full control over the envelope. This allows you to to create envelopes such a"
"s the following:"
msgstr ""
"Еще один, последний трюк, состоит в том, что хотя настройки `decay_level:` изн"
"ачально совпадают со значением `sustain_level:`, вы можете явно присвоить им р"
"азные значения для полного контроля над огибающей. Это позволяет создавать оги"
"бающие наподобие следующей:"

#: 02.4-Durations-with-Envelopes.md:177
#, no-wrap
msgid ""
"play 60, attack: 0.1, attack_level: 1, decay: 0.2, decay_level: 0.3, sustain: "
"1, sustain_level: 0.4, release: 0.5"
msgstr ""
"play 60, attack: 0.1, attack_level: 1, decay: 0.2, decay_level: 0.3, sustain: "
"1, sustain_level: 0.4, release: 0.5"

#: 02.4-Durations-with-Envelopes.md:181
msgid "![ASR envelope](../images/tutorial/env-decay-level.png)"
msgstr "![ASR огибающая](../images/tutorial/env-decay-level.png)"

#: 02.4-Durations-with-Envelopes.md:183
msgid ""
"It's also possible to set the `decay_level:` to be higher than `sustain_level:"
"`:"
msgstr "Можно, к тому же, устанавливать `decay_level:` выше, чем `sustain_level:`:"

#: 02.4-Durations-with-Envelopes.md:185
#, no-wrap
msgid ""
"play 60, attack: 0.1, attack_level: 0.1, decay: 0.2, decay_level: 1, sustain: "
"0.5, sustain_level: 0.8, release: 1.5"
msgstr ""
"play 60, attack: 0.1, attack_level: 0.1, decay: 0.2, decay_level: 1, sustain: "
"0.5, sustain_level: 0.8, release: 1.5"

#: 02.4-Durations-with-Envelopes.md:189
msgid "![ASR envelope](../images/tutorial/env-decay-level-2.png)"
msgstr "![ASR огибающая](../images/tutorial/env-decay-level-2.png)"

#: 02.4-Durations-with-Envelopes.md:191
msgid "ADSR Envelopes"
msgstr "ADSR-огибающие"

#: 02.4-Durations-with-Envelopes.md:193
msgid "So to summarise, Sonic Pi's ADSR envelopes have the following phases:"
msgstr "Итак, подведем итог. ADSR-огибающие в Sonic Pi состоят из следующих фаз:"

#: 02.4-Durations-with-Envelopes.md:195
msgid "*attack* - time from 0 amplitude to the `attack_level`,"
msgstr "*Attack - атака* - время, за которое амплитуда растет от 0 до `attack_level`,"

#: 02.4-Durations-with-Envelopes.md:196
msgid "*decay* - time to move amplitude from `attack_level` to `decay_level`,"
msgstr ""
"*Decay - спад* - время, когда амплитуда переходит от `attack_level` до `decay_"
"level`,"

#: 02.4-Durations-with-Envelopes.md:197
msgid "*sustain* - time to move the amplitude from `decay_level` to `sustain_level`,"
msgstr ""
"*Sustain - задержка* - время изменения амплитуды с `decay_level` на `sustain_l"
"evel`,"

#: 02.4-Durations-with-Envelopes.md:198
msgid "*release* - time to move amplitude from `sustain_level` to 0"
msgstr "*Release - затухание* - время падения амплитуда с `sustain_level` до 0"

#: 02.4-Durations-with-Envelopes.md:200
msgid ""
"It's important to note that the duration of a sound is the summation of the ti"
"mes of each of these phases. Therefore the following sound will have a duratio"
"n of 0.5 + 1 + 2 + 0.5 = 4 beats:"
msgstr ""
"Важно помнить, что длительность звука - это сумма продолжительностей всех фаз."
" Соответственно, такой звук будет длиться 0.5 + 1 + 2 + 0.5 = 4 доли такта:"

#: 02.4-Durations-with-Envelopes.md:204
#, no-wrap
msgid ""
"play 60, attack: 0.5, attack_level: 1, decay: 1, sustain_level: 0.4, sustain: "
"2, release: 0.5"
msgstr ""
"play 60, attack: 0.5, attack_level: 1, decay: 1, sustain_level: 0.4, sustain: "
"2, release: 0.5"

#: 02.4-Durations-with-Envelopes.md:208
msgid "Now go and have a play adding envelopes to your sounds..."
msgstr "Теперь пришло время поиграть с огибающими, добавляя их в свои звуки..."

#: 03-Samples.md:1
msgid "3 Samples"
msgstr "3 Сэплы"

#: 03-Samples.md:3
msgid "Samples"
msgstr "Сэмплы"

#: 03-Samples.md:5
msgid ""
"Another great way to develop your music is to use pre-recorded sounds. In grea"
"t hip-hop tradition, we call these pre-recorded sounds *samples*. So, if you t"
"ake a microphone outside, go and record the gentle sound of rain hitting canva"
"s, you've just created a sample."
msgstr ""
"Другой отличный способ сочинять музыку - использовать заранее записанные звуки"
". В лучших традициях хип-хопа, мы называем такие записанные звуки *сэмплами*. "
"То есть, если вы возьмёте микрофон, выйдете наружу и запишете мягкие звуки уда"
"ров дождя о навес, вы создадите сэмпл."

#: 03-Samples.md:10
msgid ""
"Sonic Pi lets you do lots of fun things with samples. Not only does it ship wi"
"th 130 public domain samples ready for you to jam with, it lets you play and m"
"anipulate your own. Let's get to it..."
msgstr ""
"В Sonic Pi можно делать много забавных вещей с сэмплами. Помимо 90 встроенных "
"сэмплов со свободной лицензией, программа даёт вам работать и играть с собстве"
"нными. Перейдем же к делу.."

#: 03.1-Triggering-Samples.md:1
msgid "3.1 Triggering Samples"
msgstr "3.1 Воспроизведение сэмплов"

#: 03.1-Triggering-Samples.md:3
msgid "Triggering Samples"
msgstr "Воспроизведение cэмплов"

#: 03.1-Triggering-Samples.md:5
msgid ""
"Playing beeps is only the beginning. Something that's a lot of fun is triggeri"
"ng pre-recorded samples. Try it:"
msgstr ""
"Простые звуки - это только начало. Кое-что весьма весёлое - это проигрывание с"
"эмплов. Попробуйте:"

#: 03.1-Triggering-Samples.md:8
#, no-wrap
msgid "sample :ambi_lunar_land"
msgstr "sample :ambi_lunar_land"

#: 03.1-Triggering-Samples.md:12
msgid ""
"Sonic Pi includes many samples for you to play with. You can use them just lik"
"e you use the `play` command. To play multiple samples and notes just write th"
"em one after another:"
msgstr ""
"Sonic Pi включает множество сэмплов. Их можно использовать так же, как вы испо"
"льзуете команду `play`. Чтобы проиграть несколько сэмплов и нот, просто запиши"
"те их друг под другом:"

#: 03.1-Triggering-Samples.md:16
#, no-wrap
msgid ""
"play 36\n"
"play 48\n"
"sample :ambi_lunar_land\n"
"sample :ambi_drone"
msgstr ""
"play 36\n"
"play 48\n"
"sample :ambi_lunar_land\n"
"sample :ambi_drone"

#: 03.1-Triggering-Samples.md:23
msgid "If you want to space them out in time, use the `sleep` command:"
msgstr "Если их нужно разделить во времени, используйте команду `sleep`:"

#: 03.1-Triggering-Samples.md:25
#, no-wrap
msgid ""
"sample :ambi_lunar_land\n"
"sleep 1\n"
"play 48\n"
"sleep 0.5\n"
"play 36\n"
"sample :ambi_drone\n"
"sleep 1\n"
"play 36"
msgstr ""
"sample :ambi_lunar_land\n"
"sleep 1\n"
"play 48\n"
"sleep 0.5\n"
"play 36\n"
"sample :ambi_drone\n"
"sleep 1\n"
"play 36"

#: 03.1-Triggering-Samples.md:36
msgid ""
"Notice how Sonic Pi doesn't wait for a sound to finish before starting the nex"
"t sound. The `sleep` command only describes the separation of the *triggering*"
" of the sounds. This allows you to easily layer sounds together creating inter"
"esting overlap effects. Later in this tutorial we'll take a look at controllin"
"g the *duration* of sounds with envelopes."
msgstr ""
"Обратите внимание, что Sonic Pi не ждёт, пока закончится один звук, прежде чем"
" начать играть следующий. Команда `sleep` всего лишь описывает разделение моме"
"нтов, когда звуки *начинаются*. За счет этого их можно легко совмещать, создав"
"ая интересные эффекты наложения. Далее в этом учебнике мы рассмотрим управлени"
"е *длительностью* звуков при помощи огибающих."

#: 03.1-Triggering-Samples.md:44
msgid "Discovering Samples"
msgstr "Знакомимся с сэмплами"

#: 03.1-Triggering-Samples.md:46
msgid ""
"There are two ways to discover the range of samples provided in Sonic Pi. Firs"
"t, you can use this help system. Click on Samples in the far left vertical men"
"u, choose your category and then you'll see a list of available sounds."
msgstr ""
"Есть два способа познакомиться с набором сэмплов, включённых в Sonic Pi. Во-пе"
"рвых, вы можете воспользоваться системой помощи. Щелкните Samples в левом нижн"
"ем меню, выберите желаемую категорию, и после этого вы увидите список доступны"
"х звуков."

#: 03.1-Triggering-Samples.md:51
msgid ""
"Alternatively you can use the *auto-completion system*. Simply type the start "
"of a sample group such as: `sample :ambi_` and you'll see a drop-down of sampl"
"e names appear for you to select. Try the following category prefixes:"
msgstr ""
"С другой стороны, можно задействовать *систему автодополнения*. Просто начните"
" набирать название группы сэмплов, например `sample :ambi_`, и появится выпада"
"ющее меню с названиями сэмплов на выбор. Попробуйте такие варианты приставки:"

#: 03.1-Triggering-Samples.md:56
msgid "`:ambi_`"
msgstr "`:ambi_`"

#: 03.1-Triggering-Samples.md:57
msgid "`:bass_`"
msgstr "`:bass_`"

#: 03.1-Triggering-Samples.md:58
msgid "`:elec_`"
msgstr "`:elec_`"

#: 03.1-Triggering-Samples.md:59
msgid "`:perc_`"
msgstr "`:perc_`"

#: 03.1-Triggering-Samples.md:60
msgid "`:guit_`"
msgstr "`:guit_`"

#: 03.1-Triggering-Samples.md:61
msgid "`:drum_`"
msgstr "`:drum_`"

#: 03.1-Triggering-Samples.md:62
msgid "`:misc_`"
msgstr "`:misc_`"

#: 03.1-Triggering-Samples.md:63
msgid "`:bd_`"
msgstr "`:bd_`"

#: 03.1-Triggering-Samples.md:65
msgid "Now start mixing samples into your compositions!"
msgstr "Попробуйте создать собственные композиции из сэмплов!"

#: 03.2-Sample-Params.md:1
msgid "3.2 Sample Parameters"
msgstr "3.2 Параметры сэмплов"

#: 03.2-Sample-Params.md:3
msgid "Sample Parameters: Amp and Pan"
msgstr "Параметры сэмплов: Амплитуда и Панорамирование"

#: 03.2-Sample-Params.md:5
msgid ""
"As we saw with synths, we can easily control our sounds with parameters. Sampl"
"es support exactly the same parameterisation mechanism. Let's revisit our frie"
"nds `amp:` and `pan:`."
msgstr ""
"Также, как и с синтами, мы можем легко контролировать наши сэмплы при помощи п"
"араметров. Механизм передачи параметров сэмплам точно такой же. Вспомним наших"
" друзей `amp:` и `pan:`."

#: 03.2-Sample-Params.md:9
msgid "Amping samples"
msgstr "Усиливаем сэмплы"

#: 03.2-Sample-Params.md:11
msgid ""
"You can change the amplitude of samples with exactly the same approach you use"
"d for synths:"
msgstr "Можно менять амплитуду сэмплов точно так же, как и синтов:"

#: 03.2-Sample-Params.md:14
#, no-wrap
msgid "sample :ambi_lunar_land, amp: 0.5"
msgstr "sample :ambi_lunar_land, amp: 0.5"

#: 03.2-Sample-Params.md:18
msgid "Panning samples"
msgstr "Панорамируем сэмплы"

#: 03.2-Sample-Params.md:20
msgid ""
"We're also able to use the `pan:` parameter on samples. For example, here's ho"
"w we'd play the amen break in the left ear and then half way through play it a"
"gain through the right ear:"
msgstr ""
"Ещё один параметр сэмплов, доступный для использования - `pan:`. Например, вот"
" так мы бы сыграли амен-брейк в левом канале, а потом на середине проиграли бы"
" его снова, но в правом канале:"

#: 03.2-Sample-Params.md:24
#, no-wrap
msgid ""
"sample :loop_amen, pan: -1\n"
"sleep 0.877\n"
"sample :loop_amen, pan: 1"
msgstr ""
"sample :loop_amen, pan: -1\n"
"sleep 0.877\n"
"sample :loop_amen, pan: 1"

#: 03.2-Sample-Params.md:30
msgid "Note that 0.877 is half the duration of the `:loop_amen` sample in seconds."
msgstr ""
"Обратите внимание, что 0.877 - это половина продолжительности сэмпла в секунда"
"х."

#: 03.2-Sample-Params.md:33
msgid ""
"Finally, note that if you set some synth defaults with `use_synth_defaults` (w"
"hich we will discuss later), these will be ignored by `sample`."
msgstr ""
"Наконец, если вы сбросите регулировки какого-нибудь синта на настройки по умол"
"чанию, (как это сделать при помощи `use_synth_defaults`, рассмотрим далее), то"
" сэмпл не обратит на это внимания."

#: 03.3-Stretching-Samples.md:1
msgid "3.3 Stretching Samples"
msgstr "3.3 Растягивание сэмплов"

#: 03.3-Stretching-Samples.md:3
msgid "Stretching Samples"
msgstr "Растягиваем сэмплы"

#: 03.3-Stretching-Samples.md:5
msgid ""
"Now that we can play a variety of synths and samples to create some music, it'"
"s time to learn how to modify both the synths and samples to make the music ev"
"en more unique and interesting. First, let's explore the ability to *stretch* "
"and *squash* samples."
msgstr ""
"Раз уж теперь мы умеем играть на разнообразных синтах и воспроизводить всевозм"
"ожные сэмплы, пришло время научиться управлять ими обоими, чтобы музыка получа"
"лась ещё более уникальной и интересной. Вначале, давайте рассмотрим возможност"
"ь *растягивать* и *сжимать* сэмплы."

#: 03.3-Stretching-Samples.md:10
msgid "Sample Representation"
msgstr "Представление сэмпла"

#: 03.3-Stretching-Samples.md:12
msgid ""
"Samples are pre-recorded sounds stored as numbers which represent how to move "
"the speaker cone to reproduce the sound. The speaker cone can move in and out,"
" and so the numbers just need to represent how far in and out the cone needs t"
"o be for each moment in time. To be able to faithfully reproduce a recorded so"
"und the sample typically needs to store many thousands of numbers per second! "
"Sonic Pi takes this list of numbers and feeds them at the right speed to move "
"your computer's speaker in and out in just the right way to reproduce the soun"
"d. However, it's also fun to change the speed with which the numbers are fed t"
"o the speaker to change the sound."
msgstr ""
"Сэмплы - это предварительно записанные звуки в виде чисел, описывающих, как ко"
"леблется мембрана динамика, чтобы воспроизвести звук. Мембрана движется внутрь"
" и наружу, так что числами всего лишь нужно задать насколько втянутой или выпу"
"клой она должна быть в каждый момент времени. Для правдоподобного воспроизведе"
"ния звука, обычно сэмпл хранит много тысяч чисел для каждой секунды! Sonic Pi "
"берет список этих чисел и передаёт их с нужной скоростью, чтобы двигать мембра"
"ной динамика наружу и внутрь так, чтобы получился нужный звук. Но можно неплох"
"о поразвлечься, меняя звук за счет изменения скорости, с которой числа идут в "
"динамик."

#: 03.3-Stretching-Samples.md:23
msgid "Changing Rate"
msgstr "Меняем скорость"

#: 03.3-Stretching-Samples.md:25
msgid ""
"Let's play with one of the ambient sounds: `:ambi_choir`. To play it with the "
"default rate, you can pass a `rate:` opt to `sample`:"
msgstr ""
"Попробуем проверить это на одном из природных звуков: `:ambi_choir`. Чтобы вос"
"произвести его с обычной скоростью, можно передавать команде `sample` настройк"
"у `rate:`:"

#: 03.3-Stretching-Samples.md:28
#, no-wrap
msgid "sample :ambi_choir, rate: 1"
msgstr "sample :ambi_choir, rate: 1"

#: 03.3-Stretching-Samples.md:32
msgid ""
"This plays it at normal rate (1), so nothing special yet. However, we're free "
"to change that number to something else. How about `0.5`:"
msgstr ""
"Этот пример воспроизводит сэмпл с нормальной скоростью (1). Пока что ничего ос"
"обенного. Однако, мы можем свободно изменить это число на что-то другое. Как н"
"асчет `0.5`:"

#: 03.3-Stretching-Samples.md:35
#, no-wrap
msgid "sample :ambi_choir, rate: 0.5"
msgstr "sample :ambi_choir, rate: 0.5"

#: 03.3-Stretching-Samples.md:39
msgid ""
"Woah! What's going on here? Well, two things. Firstly, the sample takes twice "
"as long to play, secondly the sound is an octave lower. Let's explore these th"
"ings in a little more detail."
msgstr ""
"Ого! Это что такое происходит? Ну, две вещи. Во-первых - сэмпл воспроизводится"
" в два раза дольше. Во-вторых - звук стал ниже на октаву. Давайте разберём это"
" более детально."

#: 03.3-Stretching-Samples.md:43
msgid "Let's stretch"
msgstr "Давайте растянем"

#: 03.3-Stretching-Samples.md:45
msgid ""
"A sample that's fun to stretch and compress is the Amen Break. At normal rate,"
" we might imagine throwing it into a *drum 'n' bass* track:"
msgstr ""
"Сэмпл, который забавно растягивать и сжимать, - это амен-брейк. С нормальной с"
"коростью мы можем легко себе представить его в составе трека драм-н-бейс:"

#: 03.3-Stretching-Samples.md:48 03.4-Enveloped-Samples.md:17
#: 03.5-Partial-Samples.md:9 A.03-coded-beats.md:33 A.12-sample-slicing.md:22
#, no-wrap
msgid "sample :loop_amen"
msgstr "sample :loop_amen"

#: 03.3-Stretching-Samples.md:52
msgid ""
"However by changing the rate we can switch up genres. Try half speed for *old "
"school hip-hop*:"
msgstr ""
"Но, задавая скорость, можно переключать и жанры. Попробуй половинное значение,"
" чтобы получить *старый-добрый хип-хоп*:"

#: 03.3-Stretching-Samples.md:55 03.5-Partial-Samples.md:16
#, no-wrap
msgid "sample :loop_amen, rate: 0.5"
msgstr "sample :loop_amen, rate: 0.5"

#: 03.3-Stretching-Samples.md:59
msgid "If we speed it up, we enter *jungle* territory:"
msgstr "А если ускориться, то мы попадаем на территорию *джангл*:"

#: 03.3-Stretching-Samples.md:61 A.17-sample-stretching.md:46
#, no-wrap
msgid "sample :loop_amen, rate: 1.5"
msgstr "sample :loop_amen, rate: 1.5"

#: 03.3-Stretching-Samples.md:65
msgid ""
"Now for our final party trick - let's see what happens if we use a negative ra"
"te:"
msgstr ""
"А теперь гвоздь программы - проверим, что произойдет, если мы зададим отрицате"
"льную скорость:"

#: 03.3-Stretching-Samples.md:68
#, no-wrap
msgid "sample :loop_amen, rate: -1"
msgstr "sample :loop_amen, rate: -1"

#: 03.3-Stretching-Samples.md:72
msgid ""
"Woah! It plays it *backwards*! Now try playing with lots of different samples "
"at different rates. Try very fast rates. Try crazy slow rates. See what intere"
"sting sounds you can produce."
msgstr ""
"Ничего себе! Он стал играть *задом-наперёд*! Попробуйте воспроизвести разные с"
"эмплы на разных скоростях. Попробуйте очень быстрые скорости. Попробуйте несур"
"азно медленные. Узнайте, какие интересные звуки можно создать."

#: 03.3-Stretching-Samples.md:76
msgid "A Simple Explanation of Sample Rate"
msgstr "Простое объяснение скорости сэмпла"

#: 03.3-Stretching-Samples.md:78
msgid ""
"A useful way to think of samples is as springs. Playback rate is like squashin"
"g and stretching the spring. If you play the sample at rate 2, you're *squashi"
"ng the spring* to half its normal length. The sample therefore takes half the "
"amount of time to play as it's shorter. If you play the sample at half rate, y"
"ou're *stretching the spring* to double its length. The sample therefore takes"
" twice the amount of time to play as it's longer. The more you squash (higher "
"rate), the shorter it gets, the more you stretch (lower rate), the longer it g"
"ets."
msgstr ""
"Полезная мысленная аналогия сэмплам - пружина. Темп воспроизведения - это как "
"сжатие и растягивание пружины. Если воспроизводить сэмпл со скоростью 2, то вы"
" будете *сжимать пружину* до половины ее нормальной длины. Следовательно, восп"
"роизведение сэмпла займёт половину времени, ведь он стал короче. Если играть с"
"эмпл на половине обычной скорости, то вы *растягиваете пружину* в два раза. По"
"этому сэмпл длится в два раза дольше, ведь он стал длиннее. Чем больше вы сдав"
"ливаете, тем короче он получается (скорость выше), а чем больше вы растягивает"
"е, тем длиннее он становится (скорость ниже)."

#: 03.3-Stretching-Samples.md:87
msgid ""
"Compressing a spring increases its density (the number of coils per cm) - this"
" is similar to the sample sounding *higher pitched*. Stretching the spring dec"
"reases its density and is similar to the sound having a *lower pitch*."
msgstr ""
"Сжатие пружины увеличивает ее плотность (число витков на сантиметр) - это совп"
"адает с тем, почему сэмпл начинает звучать с *высокой частотой*. Растягивание "
"пружины снижает ее плотность, и это похоже на то, как *частота звука понижаетс"
"я*."

#: 03.3-Stretching-Samples.md:93
msgid "The Maths Behind Sample Rate"
msgstr "Математика, объясняющая скорость сэмпла"

#: 03.3-Stretching-Samples.md:95
msgid ""
"(This section is provided for those that are interested in the details. Please"
" feel free to skip it...)"
msgstr ""
"(Эта часть приведена для тех, кому интересны детали. Всем остальным её можно п"
"ропустить...)"

#: 03.3-Stretching-Samples.md:98
msgid ""
"As we saw above, a sample is represented by a big long list of numbers represe"
"nting where the speaker should be through time. We can take this list of numbe"
"rs and use it to draw a graph which would look similar to this:"
msgstr ""
"Как мы видели раньше, представление сэмпла - это очень длинный список чисел, к"
"оторые описывают движение мембраны динамика во времени. Можно взять эту послед"
"овательность чисел и нарисовать по ней график, который будет выглядеть примерн"
"о так:"

#: 03.3-Stretching-Samples.md:103
msgid "![sample graph](../images/tutorial/sample.png)"
msgstr "![граф сэмплирования](../images/tutorial/sample.png)"

#: 03.3-Stretching-Samples.md:105
msgid ""
"You might have seen pictures like this before. It's called the *waveform* of a"
" sample. It's just a graph of numbers. Typically a waveform like this will hav"
"e 44100 points of data per second (this is due to the Nyquist-Shannon sampling"
" theorem). So, if the sample lasts for 2 seconds, the waveform will be represe"
"nted by 88200 numbers which we would feed to the speaker at a rate of 44100 po"
"ints per second. Of course, we could feed it at double rate which would be 882"
"00 points per second. This would therefore take only 1 second to play back. We"
" could also play it back at half rate which would be 22050 points per second t"
"aking 4 seconds to play back."
msgstr ""
"Вы могли видеть похожие картинки до этого. Они называются *волновой формой* сэ"
"мпла. Это просто числовой график. Обычно подобные формы включают 44100 точек с"
" данными на каждую секунду времени (из-за теоремы сэмплирования Найквиста-Шэнн"
"она). Итак, если сэмпл длится две секунды, то форма волны будет состоять из 88"
"200 чисел, которые мы бы передавали динамической головке со скоростью 44100 зн"
"ачения в секунду. Конечно, мы могли бы удвоить темп передачи, тогда воспроизве"
"дение бы заняло всего одну секунду. А еще мы могли бы проигрывать его в два ра"
"за медленнее, что означало бы 22500 точек в секунду, и весь процесс бы занял ч"
"етыре секунды."

#: 03.3-Stretching-Samples.md:116
msgid "The duration of the sample is affected by the playback rate:"
msgstr "На длительность сэмпла влияет скорость воспроизведения:"

#: 03.3-Stretching-Samples.md:118
msgid "Doubling the playback rate halves the playback time,"
msgstr "Удвоение темпа уполовинивает время воспроизведения,"

#: 03.3-Stretching-Samples.md:119
msgid "Halving the playback rate doubles the playback time,"
msgstr "Сокращение темпа вдвое удваивает время воспроизведения,"

#: 03.3-Stretching-Samples.md:120
msgid "Using a playback rate of one fourth quadruples the playback time,"
msgstr "Если задать темп, равный четверти от нормального, то время учетверится,"

#: 03.3-Stretching-Samples.md:121
msgid "Using a playback rate of 1/10 makes playback last 10 times longer."
msgstr ""
"Если скорость воспроизведения равна 1/10 от нормальной, то время воспроизведен"
"ия увеличится в 10 раз."

#: 03.3-Stretching-Samples.md:123
msgid "We can represent this with the formula:"
msgstr "Мы можем представить это отношение формулой:"

#: 03.3-Stretching-Samples.md:125
#, no-wrap
msgid "new_sample_duration = (1 / rate) * sample_duration "
msgstr "новая_длительность_сэмпла = (1 / скорость) * длительность_сэмпла "

#: 03.3-Stretching-Samples.md:129
msgid ""
"Changing the playback rate also affects the pitch of the sample. The frequency"
" or pitch of a waveform is determined by how fast it moves up and down. Our br"
"ains somehow turn fast movement of speakers into high notes and slow movement "
"of speakers into low notes. This is why you can sometimes even see a big bass "
"speaker move as it pumps out super low bass - it's actually moving a lot slowe"
"r in and out than a speaker producing higher notes."
msgstr ""
"Изменение темпа воспроизведения, к тому же, влияет на высоту сэмпла. Частота ф"
"ормы сигнала и высота звука определяются тем, как часто сигнал движется вверх "
"и вниз. Наш мозг каким-то образом превращает быстрые перемещения мембраны в вы"
"сокие ноты, а медленные - в низкие. Именно поэтому иногда вы можете видеть виб"
"рации большого басового динамика, когда он издает чрезвыйчайно низкие звуки. Н"
"а самом деле он перемещается намного медленнее внутрь и наружу, чем динамик, в"
"оспроизводящий высокие ноты."

#: 03.3-Stretching-Samples.md:137
msgid ""
"If you take a waveform and squash it it will move up and down more times per s"
"econd. This will make it sound higher pitched. It turns out that doubling the "
"amount of up and down movements (oscillations) doubles the frequency. So, *pla"
"ying your sample at double rate will double the frequency you hear it*. Also, "
"*halving the rate will halve the frequency*. Other rates will affect the frequ"
"ency accordingly."
msgstr ""
"Если взять форму сигнала и сжать ее, то она будет колебаться вверх и вниз "
"большее количество раз за секунду. За счет этого звук получится более "
"высоким. Выходит, что удвоение движений вверх-вниз (колебаний) удваивает "
"частоту. Поэтому *проигрывание сэмпла на удвоенной скорости удваивает его "
"слышимую частоту*. Точно так же *половинная скорость уменьшает частоту вдвое*"
". Другие значения скорости влияют на частоту соответствующим образом."

#: 03.4-Enveloped-Samples.md:1
msgid "3.4 Enveloped Samples"
msgstr "3.4 Огибающие сэмплов"

#: 03.4-Enveloped-Samples.md:3
msgid "Enveloped Samples"
msgstr "Огибающие сэмплов"

#: 03.4-Enveloped-Samples.md:5
msgid ""
"It is also possible to modify the *duration* and *amplitude* of a sample using"
" an ADSR envelope. However, this works slightly differently to the ADSR envelo"
"pe available on synths. Sample envelopes only allow you to reduce the amplitud"
"e and duration of a sample - and never to increase it. The sample will stop wh"
"en either the sample has finished playing or the envelope has completed - whic"
"hever is first. So, if you use a very long `release:`, it won't extend the dur"
"ation of the sample."
msgstr ""
"Также возможно изменять *длительность* и *амплитуду* сэмпла, используя ADSR-ог"
"ибающие. Но это работает немного по-другому, чем ADSR-огибающие синтов. Огибаю"
"щие сэмплов позволяют уменьшать громкость и длительность, но не увеличивать их"
". Сэмпл остановится, либо когда его воспроизведение завершено, либо когда огиб"
"ающая закончилась - в зависимости от того, что произошло раньше. Так что если "
"задать очень долгое *затухание*, то звучание сэмпла не удлинится."

#: 03.4-Enveloped-Samples.md:13
msgid "Amen Envelopes"
msgstr "Огибающие амен"

#: 03.4-Enveloped-Samples.md:15
msgid "Let's return to our trusty friend the Amen Break:"
msgstr "Вернемся к нашему верному другу амен-брейку:"

#: 03.4-Enveloped-Samples.md:21
msgid ""
"With no opts, we hear the full sample at full amplitude. If we want to fade th"
"is in over 1 second we can use the `attack:` param:"
msgstr ""
"Без дополнительных регулировок мы слышим полный сэмпл на полной громкости. Есл"
"и мы хотим его постепенно усиливать в течение одной секунды, то можно задейсто"
"вать параметр `attack:`:"

#: 03.4-Enveloped-Samples.md:24
#, no-wrap
msgid "sample :loop_amen, attack: 1"
msgstr "sample :loop_amen, attack: 1"

#: 03.4-Enveloped-Samples.md:28
msgid "For a shorter fade in, choose a shorter attack value:"
msgstr "Для более краткого нарастания, выберите значение атаки поменьше:"

#: 03.4-Enveloped-Samples.md:30
#, no-wrap
msgid "sample :loop_amen, attack: 0.3"
msgstr "sample :loop_amen, attack: 0.3"

#: 03.4-Enveloped-Samples.md:34
msgid "Auto Sustain"
msgstr "Автоудержание"

#: 03.4-Enveloped-Samples.md:36
msgid ""
"Where the ADSR envelope's behaviour differs from the standard synth envelope i"
"s in the *sustain* value. In the standard synth envelope, the sustain defaulte"
"d to 0 unless you set it manually. With samples, the sustain value defaults to"
" an *automagical* value - the time left to play the rest of the sample. This i"
"s why we hear the full sample when we pass no defaults. If the attack, decay, "
"sustain and release values were all 0 we'd never hear a peep. Sonic Pi therefo"
"re calculates how long the sample is, deducts any attack, decay and release ti"
"mes and uses the result as your sustain time. If the attack, decay and release"
" values add up to more than the duration of the sample, the sustain is simply "
"set to 0."
msgstr ""
"Отличие поведения ADSR-огибающей сэмпла от стандартной огибающей синта лежит в"
" значении сустейна. В обычной огибающей синта сустейн сам по себе устанавливал"
"ся в 0, если мы не указывали его вручную. Для сэмплов оно также настраивается "
"\"автомагически\", и равняется времени, необходимому для завершения сэмпла. Поэт"
"ому мы слышим полный сэмпл, когда никаких настроек не задаётся. Если бы значен"
"ия атаки, спада, удержания и затухания равнялись 0, то мы бы и намёка на сэмпл"
" не услышали. Так что Sonic Pi вычисляет сколько времени длится сэмпл, вычитае"
"т длительности атаки, спада и затухания, и присваивает результат фазе удержани"
"я. Если атака, спад и затухание вместе дают значение больше продолжительности "
"сэмпла, то удержание устанавливается в 0."

#: 03.4-Enveloped-Samples.md:48
msgid "Fade Outs"
msgstr "Постепенное затухание"

#: 03.4-Enveloped-Samples.md:50
msgid ""
"To explore this, let's consider our Amen break in more detail. If we ask Sonic"
" Pi how long the sample is:"
msgstr ""
"Для изучения этого явления рассмотрим наш амен-брейк более детально. Если спро"
"сить Sonic Pi сколько длится сэмпл:"

#: 03.4-Enveloped-Samples.md:53
#, no-wrap
msgid "print sample_duration :loop_amen"
msgstr "print sample_duration :loop_amen"

#: 03.4-Enveloped-Samples.md:57
msgid ""
"It will print out `1.753310657596372` which is the length of the sample in sec"
"onds. Let's just round that to `1.75` for convenience here. Now, if we set the"
" release to `0.75`, something surprising will happen:"
msgstr ""
"Он напечатает `1.753310657596372`, что означает собственное время звучания сэм"
"пла в секундах. Просто для удобства округлим его до `1.75`. Затем, если устано"
"вить затухание в `0.75`, произойдет кое-что неожиданное:"

#: 03.4-Enveloped-Samples.md:61
#, no-wrap
msgid "sample :loop_amen, release: 0.75"
msgstr "sample :loop_amen, release: 0.75"

#: 03.4-Enveloped-Samples.md:65
msgid ""
"It will play the first second of the sample at full amplitude before then fadi"
"ng out over a period of 0.75 seconds. This is the *auto sustain* in action. By"
" default, the release always works from the end of the sample. If our sample w"
"as 10.75 seconds long, it would play the first 10 seconds at full amplitude be"
"fore fading out over 0.75s."
msgstr ""
"Первая секунда сэмпла будет воспроизводиться на полной громкости, а потом посл"
"едует постепенное затухание в течение 0.75 секунды. Это и есть пример *автоуде"
"ржания* в действии. Само по себе затухание всегда работает с конца сэмпла. Есл"
"и бы наш сэмпл длился 10.75 секунды, то первые 10 секунд он бы играл с полной "
"амплитудой, а потом затухал оставшиеся 0.75 секунды."

#: 03.4-Enveloped-Samples.md:71
msgid "Remember: by default, `release:` fades out at the end of a sample."
msgstr "Запомните: по умолчанию `release:` отсчитывает затухание от конца сэмпла."

#: 03.4-Enveloped-Samples.md:73
msgid "Fade In and Out"
msgstr "Постепенное усиление и затухание"

#: 03.4-Enveloped-Samples.md:75
msgid ""
"We can use both `attack:` and `release:` together with the auto sustain behavi"
"our to fade both in and out over the duration of the sample:"
msgstr ""
"Можно использовать вместе `attack:`, `release:` и поведение автоудержания для "
"постепенного усиления и затухания при воспроизведении сэмпла:"

#: 03.4-Enveloped-Samples.md:78
#, no-wrap
msgid "sample :loop_amen, attack: 0.75, release: 0.75"
msgstr "sample :loop_amen, attack: 0.75, release: 0.75"

#: 03.4-Enveloped-Samples.md:82
msgid ""
"As the full duration of the sample is 1.75s and our attack and release phases "
"add up to 1.5s, the sustain is automatically set to 0.25s. This allows us to e"
"asily fade the sample in and out."
msgstr ""
"Так как полная продолжительность равняется 1.75 секунды, а наши фазы атаки и з"
"атухания суммарно дают 1.5 секунды, то удержание автоматически устанавливается"
" в 0.25 секунды. Так мы легко можем плавно усиливать и гасить сэмпл."

#: 03.4-Enveloped-Samples.md:86
msgid "Explicit sustain"
msgstr "Точное удержание"

#: 03.4-Enveloped-Samples.md:88
msgid ""
"We can easily get back to our normal synth ADSR behaviour by manually setting "
"`sustain:` to a value such as 0:"
msgstr ""
"Вернуться к нормальному режиму ADSR-огибающей довольно просто: достаточно вруч"
"ную задать 0 для `sustain:`:"

#: 03.4-Enveloped-Samples.md:91
#, no-wrap
msgid "sample :loop_amen, sustain: 0, release: 0.75"
msgstr "sample :loop_amen, sustain: 0, release: 0.75"

#: 03.4-Enveloped-Samples.md:95
msgid ""
"Now, our sample only plays for 0.75 seconds in total. With the default for `at"
"tack:` and `decay:` at 0, the sample jumps straight to full amplitude, sustain"
"s there for 0s then releases back down to 0 amplitude over the release period "
"- 0.75s."
msgstr ""
"После этого сэмпл звучит в общей сложности всего лишь 0.75 секунды. При обычны"
"х нулевых значениях `attack:` и `decay:` громкость сэмпла сразу же достигает п"
"олного значения, удерживается там в течение 0 секунд, а потом за 0.75 секунды "
"полностью затихает во время фазы затухания."

#: 03.4-Enveloped-Samples.md:100
msgid "Percussive cymbals"
msgstr "Тарелки"

#: 03.4-Enveloped-Samples.md:102
msgid ""
"We can use this behaviour to good effect to turn longer sounding samples into "
"shorter, more percussive versions. Consider the sample `:drum_cymbal_open`:"
msgstr ""
"Хороший эффект от данного поведения получается, если мы хотим превратить продо"
"лжительные сэмплы в более короткие. Это даст им более отрывистое ударное звуча"
"ние. Рассмотрим сэмпл `:drum_cymbal_open`:"

#: 03.4-Enveloped-Samples.md:106
#, no-wrap
msgid "sample :drum_cymbal_open"
msgstr "sample :drum_cymbal_open"

#: 03.4-Enveloped-Samples.md:110
msgid ""
"You can hear the cymbal sound ringing out over a period of time. However, we c"
"an use our envelope to make it more percussive:"
msgstr ""
"Можно слышать, что тарелка продолжает звенеть некоторое время. С помощью огиба"
"ющей можно сделать её более резкой:"

#: 03.4-Enveloped-Samples.md:113
#, no-wrap
msgid "sample :drum_cymbal_open, attack: 0.01, sustain: 0, release: 0.1"
msgstr "sample :drum_cymbal_open, attack: 0.01, sustain: 0, release: 0.1"

#: 03.4-Enveloped-Samples.md:117
msgid ""
"You can then emulate hitting the cymbal and then dampening it by increasing th"
"e sustain period:"
msgstr ""
"А еще можно изображать удар по тарелке и его глушение за счет увеличения перио"
"да удержания:"

#: 03.4-Enveloped-Samples.md:120
#, no-wrap
msgid "sample :drum_cymbal_open, attack: 0.01, sustain: 0.3, release: 0.1"
msgstr "sample :drum_cymbal_open, attack: 0.01, sustain: 0.3, release: 0.1"

#: 03.4-Enveloped-Samples.md:124
msgid ""
"Now go and have fun putting envelopes over the samples. Try changing the rate "
"too for really interesting results."
msgstr ""
"А теперь, ступайте, и как следует позабавьтесь, добавляя огибающие к сэмплам. "
"Попробуйте изменять и скорость, чтобы получить действительно интересные резуль"
"таты."

#: 03.5-Partial-Samples.md:1
msgid "3.5 Partial Samples"
msgstr "3.5 Фрагментированные сэмплы"

#: 03.5-Partial-Samples.md:3
#, fuzzy
msgid "Partial Samples"
msgstr "Фрагментированные сэмплы"

#: 03.5-Partial-Samples.md:5
msgid ""
"This section will conclude our exploration of Sonic Pi's sample player. Let's "
"do a quick recap. So far we've looked at how we can trigger samples:"
msgstr ""
"Этот раздел станет заключительным в нашем исследовании воспроизведения "
"сэмплов в Sonic Pi. Давайте кратко повторим уже изученное. Пока мы только "
"разбирались в том, как включать сэмплы:"

#: 03.5-Partial-Samples.md:13
msgid ""
"We then looked at how we can change the rate of samples such as playing them a"
"t half speed:"
msgstr ""
"Потом мы рассмотрели то, как мы можем менять темп сэмплов, например для "
"воспроизведения их на половине скорости:"

#: 03.5-Partial-Samples.md:20
msgid "Next, we looked at how we could fade a sample in (let's do it at half speed):"
msgstr ""
"Затем, мы увидели, как можно постепенно усиливать сэмпл (совместим это с умень"
"шённой вдвое скоростью):"

#: 03.5-Partial-Samples.md:23
#, no-wrap
msgid "sample :loop_amen, rate: 0.5, attack: 1"
msgstr "sample :loop_amen, rate: 0.5, attack: 1"

#: 03.5-Partial-Samples.md:27
msgid ""
"We also looked at how we could use the start of a sample percussively by givin"
"g `sustain:` an explicit value and setting both the attack and release to be s"
"hort values:"
msgstr ""
"Еще мы узнали как сделать начало сэмпла более резким за счет задания `sustain:"
"` явного значения и установки коротких атаки и затухания:"

#: 03.5-Partial-Samples.md:31
#, no-wrap
msgid "sample :loop_amen, rate: 2, attack: 0.01, sustain: 0, release: 0.35"
msgstr "sample :loop_amen, rate: 2, attack: 0.01, sustain: 0, release: 0.35"

#: 03.5-Partial-Samples.md:35
msgid ""
"However, wouldn't it be nice if we didn't have to always start at the beginnin"
"g of the sample? Wouldn't it also be nice if we didn't have to always finish a"
"t the end of the sample?"
msgstr ""
"Однако, вам бы понравилось, если бы не надо было всякий раз начинать сэмпл с н"
"ачала? Разве не здорово было бы, если бы можно было играть сэмпл не до конца?"

#: 03.5-Partial-Samples.md:39
msgid "Choosing a starting point"
msgstr "Выбираем точку старта"

#: 03.5-Partial-Samples.md:41
#, fuzzy
msgid ""
"It is possible to choose an arbitrary starting point in the sample as a value "
"between 0 and 1 where 0 is the start of the sample, 1 is the end and 0.5 is ha"
"lf way through the sample. Let's try playing only the last half of the amen br"
"eak:"
msgstr ""
"Возможно выбрать произвольную начальную точку для сэмпла, задавая ее в качеств"
"е значения в диапазоне от 0 до 1. 0 - начало сэмпла, 1 - его конец, а 0.5 - эт"
"о середина. Попробуем сыграть только вторую половину амен-брейка:"

#: 03.5-Partial-Samples.md:46
#, no-wrap
msgid "sample :loop_amen, start: 0.5"
msgstr "sample :loop_amen, start: 0.5"

#: 03.5-Partial-Samples.md:50
msgid "How about the last quarter of the sample:"
msgstr "А как насчет последней четверти:"

#: 03.5-Partial-Samples.md:52
#, no-wrap
msgid "sample :loop_amen, start: 0.75"
msgstr "sample :loop_amen, start: 0.75"

#: 03.5-Partial-Samples.md:56
msgid "Choosing a finish point"
msgstr "Выбираем точку окончания"

#: 03.5-Partial-Samples.md:58
msgid ""
"Similarly, it is possible to choose an arbitrary finish point in the sample as"
" a value between 0 and 1. Let's finish the amen break half way through:"
msgstr ""
"Похожим образом разрешается выбирать конечную точку сэмпла как значение между "
"0 и 1. Прервем амен-брейк на середине:"

#: 03.5-Partial-Samples.md:62 A.12-sample-slicing.md:62
#, no-wrap
msgid "sample :loop_amen, finish: 0.5"
msgstr "sample :loop_amen, finish: 0.5"

#: 03.5-Partial-Samples.md:66
msgid "Specifying start and finish"
msgstr "Указываем начало и конец"

#: 03.5-Partial-Samples.md:68
msgid ""
"Of course, we can combine these two to play arbitrary segments of the audio fi"
"le. How about only a small section in the middle:"
msgstr ""
"Естественно, мы можем комбинировать оба произвольных фрагмента звукового "
"файла. Как насчет выбрать небольшой участок в центре:"

#: 03.5-Partial-Samples.md:71
#, no-wrap
msgid "sample :loop_amen, start: 0.4, finish: 0.6"
msgstr "sample :loop_amen, start: 0.4, finish: 0.6"

#: 03.5-Partial-Samples.md:75
msgid "What happens if we choose a start position after the finish position?"
msgstr "Что случится, если установить старт после финиша?"

#: 03.5-Partial-Samples.md:78
#, no-wrap
msgid "sample :loop_amen, start: 0.6, finish: 0.4"
msgstr "sample :loop_amen, start: 0.6, finish: 0.4"

#: 03.5-Partial-Samples.md:82
msgid "Cool! It plays it backwards!"
msgstr "Круто! Он играет задом-наперед!"

#: 03.5-Partial-Samples.md:84
msgid "Combining with rate"
msgstr "Соединяем со скоростью"

#: 03.5-Partial-Samples.md:86
msgid ""
"We can combine this new ability to play arbitrary segments of audio with our f"
"riend `rate:`. For example, we can play a very small section of the middle of "
"the amen break very slowly:"
msgstr ""
"Можно объединить эту новую способность играть выбранные сегменты аудио с нашим"
" знакомым `rate:`. Например, таким образом воспроизведется очень маленькая сек"
"ция из середины амен-брейка очень медленно:"

#: 03.5-Partial-Samples.md:90
#, no-wrap
msgid "sample :loop_amen, start: 0.5, finish: 0.7, rate: 0.2"
msgstr "sample :loop_amen, start: 0.5, finish: 0.7, rate: 0.2"

#: 03.5-Partial-Samples.md:94
msgid "Combining with envelopes"
msgstr "Соединяем с огибающими"

#: 03.5-Partial-Samples.md:96
msgid ""
"Finally, we can combine all of this with our ADSR envelopes to produce interes"
"ting results:"
msgstr ""
"Наконец, все это возможно соединить с известными нами ADSR-огибающими, чтобы п"
"олучить интересный результат:"

#: 03.5-Partial-Samples.md:99
#, no-wrap
msgid ""
"sample :loop_amen, start: 0.5, finish: 0.8, rate: -0.2, attack: 0.3, release: "
"1"
msgstr ""
"sample :loop_amen, start: 0.5, finish: 0.8, rate: -0.2, attack: 0.3, release: "
"1"

#: 03.5-Partial-Samples.md:103
msgid "Now go and have a play mashing up samples with all of this fun stuff..."
msgstr ""
"Попробуйте также комбинировать сэмплы, не ограничивайте свою фантазию..."

#: 03.6-External-Samples.md:1
msgid "3.6 External Samples"
msgstr "3.6 Внешние Сэмплы"

#: 03.6-External-Samples.md:3
msgid "External Samples"
msgstr "Внешние Сэмплы"

#: 03.6-External-Samples.md:5
#, fuzzy
msgid ""
"Whilst the built-in samples can get you up and started quickly, you might wish"
" to experiment with other recorded sounds in your music. Sonic Pi totally supp"
"orts this. First though, let's have a quick discussion on the portability of y"
"our piece."
msgstr ""
"Коль скоро встроенные сэмплы дали тебе быструю возможность разобраться с ними,"
" тебе может захотеться поэкспериментировать с другими записанными звуками в тв"
"оей музыке. Sonic Pi полностью поддерживает эту функцию. Но сперва кратко обсу"
"дим переносимость твоего произведения."

#: 03.6-External-Samples.md:10
msgid "Portability"
msgstr "Портативность"

#: 03.6-External-Samples.md:12
#, fuzzy
msgid ""
"When you compose your piece purely with built-in synths and samples, the code "
"is all you need to faithfully reproduce your music. Think about that for a mom"
"ent - that's amazing! A simple piece of text you can email around or stick in "
"a [Gist](https://gist.github.com) represents everything you need to reproduce "
"your sounds. That makes it *really easy to share* with your friends as they ju"
"st need to get hold of the code."
msgstr ""
"Когда ты сочиняешь свои композиции только с использованием встроенных синтов и"
" сэмплов, то программный код - это все что нужно для надежного исполнения твое"
"й музыки. Просто задумайся над этим на минуту - это же просто удивительно! Про"
"стой кусок текста, который можно отправить по электронной почте или засунуть в"
" [Gist](https://gist.github.com) являет собой все, что нужно для воспроизведен"
"ия твоих звуков. Поэтому их *очень легко распространять* среди твоих друзей, п"
"отому что им всего лишь нужно заполучить код."

#: 03.6-External-Samples.md:19
msgid ""
"However, if you start using your own pre-recorded samples, you lose this porta"
"bility. This is because to reproduce your music other people not only need you"
"r code, they need your samples too. This limits the ability for others to mani"
"pulate, mash-up and experiment with your work. Of course this shouldn't stop y"
"ou from using your own samples, it's just something to consider."
msgstr ""
"С другой стороны, если начинать использовать собственные записанные сэмплы, "
"то такая переносимость теряется. Это происходит из-за того, что для "
"воспроизведения твоей музыки другим людям не только нужен твой код, но также "
"и сэмплы. Этот факт ограничивает других в их возможностях изменять и "
"экспериментировать с твоими работами. Конечно, знание этого не должно тебя "
"останавливать от использования собственных сэмплов. Просто помни об этом."

#: 03.6-External-Samples.md:26
msgid "Local Samples"
msgstr "Локальные сэмплы"

#: 03.6-External-Samples.md:28
msgid ""
"So how do you play any arbitrary WAV, AIFF or FLAC file on your computer? All "
"you need to do is pass the path of that file to `sample`:"
msgstr ""
"Так как все-таки проиграть любой WAV, AIFF или FLAC с твоего компьютера? Все ч"
"то нужно, это передать путь к его файлу команде `sample`:"

#: 03.6-External-Samples.md:31
#, no-wrap
msgid ""
"# Raspberry Pi, Mac, Linux\n"
"sample \"/Users/sam/Desktop/my-sound.wav\"\n"
"# Windows\n"
"sample \"C:/Users/sam/Desktop/my-sound.wav\""
msgstr ""
"# Raspberry Pi, Mac, Linux\n"
"sample \"/Users/sam/Desktop/my-sound.wav\"\n"
"# Windows\n"
"sample \"C:/Users/sam/Desktop/my-sound.wav\""

#: 03.6-External-Samples.md:38
#, fuzzy
msgid ""
"Sonic Pi will automatically load and play the sample. You can also pass all th"
"e standard params you're used to passing `sample`:"
msgstr ""
"Sonic Pi автоматически загрузит и воспроизведет сэмпл. Вместе с этим можно пер"
"едавать все стандартные параметры, которые ты привык использовать с `sample`:"

#: 03.6-External-Samples.md:41
#, no-wrap
msgid ""
"# Raspberry Pi, Mac, Linux\n"
"sample \"/Users/sam/Desktop/my-sound.wav\", rate: 0.5, amp: 0.3\n"
"# Windows\n"
"sample \"C:/Users/sam/Desktop/my-sound.wav\", rate: 0.5, amp: 0.3"
msgstr ""
"# Raspberry Pi, Mac, Linux\n"
"sample \"/Users/sam/Desktop/my-sound.wav\", rate: 0.5, amp: 0.3\n"
"# Windows\n"
"sample \"C:/Users/sam/Desktop/my-sound.wav\", rate: 0.5, amp: 0.3"

#: 03.7-Sample-Packs.md:1
msgid "3.7 Sample Packs"
msgstr "3.7 Наборы сэмплов"

#: 03.7-Sample-Packs.md:3
msgid "Sample Packs"
msgstr "Наборы сэмплов"

#: 03.7-Sample-Packs.md:5
msgid ""
"**Note: this section of the tutorial covers the advanced topic of working with"
" large directories of your own samples. This will be the case if you've downlo"
"aded or bought your own sample packs and wish to use them within Sonic Pi.**"
msgstr ""
"**Замечание: этот раздел руководства рассказывает о расширенных возможностях р"
"аботы с большими директориями ваших собственных сэмплов. Рекомендуем ознакомит"
"ся с ним в тех случаях, если вы загрузили или купили набор сэмплов и хотите ис"
"пользовать их в Sonic Pi**"

#: 03.7-Sample-Packs.md:10
msgid "**Feel free to skip this if you're happy working with the built-in samples.**"
msgstr ""
"**Вы можете смело пропустить этот раздел, если вам хватает встроенных сэмплов*"
"*"

#: 03.7-Sample-Packs.md:13
msgid ""
"When working with large folders of external samples it can be cumbersome to ha"
"ve to type the whole path every time to trigger an individual sample."
msgstr ""
"Работая с большими папками внешних сэмплов, вы можете ощутить неудобства при н"
"абирании полного пути к каждому отдельному сэмплу."

#: 03.7-Sample-Packs.md:17
msgid "For example, say you have the following folder on your machine:"
msgstr "Например, предположим, что на вашем компьютере у вас есть папка:"

#: 03.7-Sample-Packs.md:19
#, no-wrap
msgid "/path/to/my/samples/"
msgstr "/path/to/my/samples/"

#: 03.7-Sample-Packs.md:23
msgid "When we look inside that folder we find the following samples:"
msgstr "Когда мы посмотрим в директорию, то увидим следующие сэмплы:"

#: 03.7-Sample-Packs.md:25 03.7-Sample-Packs.md:86
msgid "`100_A#_melody1.wav`"
msgstr "`100_A#_melody1.wav`"

#: 03.7-Sample-Packs.md:26 03.7-Sample-Packs.md:87
msgid "`100_A#_melody2.wav`"
msgstr "`100_A#_melody2.wav`"

#: 03.7-Sample-Packs.md:27 03.7-Sample-Packs.md:88
msgid "`100_A#_melody3.wav`"
msgstr "`100_A#_melody3.wav`"

#: 03.7-Sample-Packs.md:28 03.7-Sample-Packs.md:89
msgid "`120_A#_melody4.wav`"
msgstr "`120_A#_melody4.wav`"

#: 03.7-Sample-Packs.md:29 03.7-Sample-Packs.md:90
msgid "`120_Bb_guit1.wav`"
msgstr "`120_Bb_guit1.wav`"

#: 03.7-Sample-Packs.md:30 03.7-Sample-Packs.md:91
msgid "`120_Bb_piano1.wav`"
msgstr "`120_Bb_piano1.wav`"

#: 03.7-Sample-Packs.md:32
msgid "Typically in order to play the piano sample we can use the full path:"
msgstr ""
"Как правило, для того, чтобы проиграть сэмпл пианино, мы можем использовать по"
"лный путь:"

#: 03.7-Sample-Packs.md:34
#, no-wrap
msgid "sample \"/path/to/my/samples/120_Bb_piano1.wav\""
msgstr "sample \"/path/to/my/samples/120_Bb_piano1.wav\""

#: 03.7-Sample-Packs.md:38
msgid "If we want to then play the guitar sample we can use its full path too:"
msgstr ""
"Если мы хотим проиграть гитарный сэмпл, мы также можем использовать его полный"
" путь:"

#: 03.7-Sample-Packs.md:40
#, no-wrap
msgid "sample \"/path/to/my/samples/120_Bb_guit.wav\""
msgstr "sample \"/path/to/my/samples/120_Bb_guit.wav\""

#: 03.7-Sample-Packs.md:44
msgid ""
"However, both of these calls to sample requires us to *know* the names of the "
"samples within our directory. What if we just want to listen to each sample in"
" turn quickly?"
msgstr ""
"Тем не менее, оба этих вызова требуют от нас *знания* имён сэмплов внутри наше"
"й директории. Что если мы просто хотим быстро прослушать каждый сэмпл по очере"
"ди?"

#: 03.7-Sample-Packs.md:48
msgid "Indexing Sample Packs"
msgstr "Индексирование наборов сэмплов"

#: 03.7-Sample-Packs.md:50
msgid ""
"If we want to play the first sample in a directory we just need to pass the di"
"rectory's name to `sample` and the index `0` as follows:"
msgstr ""
"Если мы хотим проиграть первый сэмпл в директории, мы просто должны указать им"
"я директории в `sample` и установить индекс в значение `0` следующим образом:"

#: 03.7-Sample-Packs.md:53
#, no-wrap
msgid "sample \"/path/to/my/samples/\", 0"
msgstr "sample \"/path/to/my/samples/\", 0"

#: 03.7-Sample-Packs.md:57
msgid "We can even make a shortcut to our directory path using a variable:"
msgstr ""
"Мы также можем создать ярлык (shortcut) нашей директории, используя переменную"
":"

#: 03.7-Sample-Packs.md:59
#, no-wrap
msgid ""
"samps = \"/path/to/my/samples/\"\n"
"sample samps, 0"
msgstr ""
"samps = \"/path/to/my/samples/\"\n"
"sample samps, 0"

#: 03.7-Sample-Packs.md:64
msgid ""
"Now, if we want to play the second sample in our directory, we just need to ad"
"d 1 to our index:"
msgstr ""
"Теперь, если мы хотим проиграть второй сэмпл в директории, нам нужно прибавить"
" 1 к нашему индексу:"

#: 03.7-Sample-Packs.md:67
#, no-wrap
msgid ""
"samps = \"/path/to/my/samples/\"\n"
"sample samps, 1"
msgstr ""
"samps = \"/path/to/my/samples/\"\n"
"sample samps, 1"

#: 03.7-Sample-Packs.md:72
msgid ""
"Notice that we no longer need to know the names of the samples in the director"
"y - we just need to know the directory itself (or have a shortcut to it). If w"
"e ask for an index which is larger than the number of samples, it simply wraps"
" round just like Rings. Therefore, whatever number we use we're guaranteed to "
"get one of the samples in that directory."
msgstr ""
"Заметьте, что нам больше не нужно знать имени сэмпла в директории - мы просто "
"должны знать название директории (или иметь её ярлык). Если мы запросим индекс"
", больший, чем количество сэмплов в директории, порядок сэмплов в директории б"
"удет замкнут и пойдёт по следующему кругу. Таким образом, вне зависимости от н"
"омера, мы получим один из сэмплов в директории."

#: 03.7-Sample-Packs.md:79
msgid "Filtering Sample Packs"
msgstr "Фильтрация наборов сэмплов"

#: 03.7-Sample-Packs.md:81
msgid ""
"Usually indexing is enough, but sometimes we need more power to sort and organ"
"ise our samples. Luckily many sample packs add useful information in the filen"
"ames. Let's take another look at the sample file names in our directory:"
msgstr ""
"Обычно, индексирования достаточно, но иногда нам необходимо сортировать и орга"
"низовывать сэмплы. К счастью, большинство наборов сэмплов структурированы. Дав"
"айте ещё раз взглянем на имена сэмплов в нашей директории:"

#: 03.7-Sample-Packs.md:93
msgid ""
"Notice that in these filenames we have quite a bit of information. Firstly, we"
" have the BPM of the sample (beats per minute) at the start. So, the piano sam"
"ple is at 120 BPM and our first three melodies are at 100 BPM. Also, our sampl"
"e names contain the key. So the guitar sample is in Bb and the melodies are in"
" A#. This information is very useful for mixing in these samples with our othe"
"r code. For example, we know we can only play the piano sample with code that'"
"s in 120 BPM and in the key of Bb."
msgstr ""
"Заметьте, что в их именах содержится некоторая информация. Во-первых, у нас ес"
"ть BMP сэмпла (удары в секунду) в начале имени. Таким образом, сэмпл пианино и"
"меет BPM равный 120, а первые три мелодии - 100 BPM. Имена сэмплов также содер"
"жат тональность. Таким образом, гитарный сэмпл имеет тон Bb а мелодии A#. Эта "
"информация очень полезна для сведения этих сэмплов в нашем коде. Например, мы "
"знаем, что сэмпл пианино содержит 120 BPM и тональность Bb."

#: 03.7-Sample-Packs.md:102
msgid ""
"It turns out that we can use this particular naming convention of our sample s"
"ets in the code to help us filter out the ones we want. For example, if we're "
"working at 120 BPM, we can filter down to all the samples that contain the str"
"ing `\"120\"` with the following:"
msgstr ""
"Оказывается, мы можем использовать это конкретное соглашение об именах наших н"
"аборов сэмплов в коде, чтобы помочь нам отфильтровать те, которые нам нужны. Н"
"апример, если мы работаем с 120 BPM, мы можем отфильтровать все образцы, содер"
"жащие строку `` 120``, со следующим:"

#: 03.7-Sample-Packs.md:107
#, no-wrap
msgid ""
"samps = \"/path/to/my/samples/\"\n"
"sample samps, \"120\""
msgstr ""
"samps = \"/path/to/my/samples/\"\n"
"sample samps, \"120\""

#: 03.7-Sample-Packs.md:112
msgid ""
"This will play us the first match. If we want the second match we just need to"
" use the index:"
msgstr ""
"Первое совпадение будет проиграно. Если мы хотим, чтобы заиграло второе совпад"
"ение, нам нужно просто изменить индекс:"

#: 03.7-Sample-Packs.md:115
#, no-wrap
msgid ""
"samps = \"/path/to/my/samples/\"\n"
"sample samps, \"120\", 1"
msgstr ""
"samps = \"/path/to/my/samples/\"\n"
"sample samps, \"120\", 1"

#: 03.7-Sample-Packs.md:120
msgid ""
"We can even use multiple filters at the same time. For example, if we want a s"
"ample whose filename contains both the substrings \"120\" and \"A#\" we can find i"
"t easily with the following code:"
msgstr ""
"Более того, мы можем использовать несколько фильтров сразу. Например, если мы "
"хотим сэмпл, имя которого содержит подстроки \"120\" и \"A#\", мы можем легко доби"
"ться этого следующим кодом:"

#: 03.7-Sample-Packs.md:124
#, no-wrap
msgid ""
"samps = \"/path/to/my/samples/\"\n"
"sample samps, \"120\", \"A#\""
msgstr ""
"samps = \"/path/to/my/samples/\"\n"
"sample samps, \"120\", \"A#\""

#: 03.7-Sample-Packs.md:129
msgid "Finally, we're still free to add our usual opts to the call to `sample`:"
msgstr "Наконец, мы по-прежнему можем добавлять свойства к вызову нашего `сэмпла`:"

#: 03.7-Sample-Packs.md:131
#, no-wrap
msgid ""
"samps = \"/path/to/my/samples/\"\n"
"sample samps, \"120\", \"Bb\", 1, lpf: 70, amp: 2"
msgstr ""
"samps = \"/path/to/my/samples/\"\n"
"sample samps, \"120\", \"Bb\", 1, lpf: 70, amp: 2"

#: 03.7-Sample-Packs.md:136
msgid "Sources"
msgstr "Источники"

#: 03.7-Sample-Packs.md:138
msgid ""
"The sample filter pre-arg system understands two types of information: sources"
" and filters. Sources are information used to create the list of potential can"
"didates. A source can take two forms:"
msgstr ""
"Система аргументов фильтров сэмплов понимает два типа информации: источники и "
"фильтры. Источники представляют собой информацию, используемую для создания сп"
"иска потенциальных совпадений. Источники бывают двух видов:"

#: 03.7-Sample-Packs.md:142
msgid "\"/path/to/samples\" - a string representing a valid path to a directory"
msgstr ""
"\"/path/to/samples\" - строка, представляющая относительный путь к директории"

#: 03.7-Sample-Packs.md:143
msgid "\"/path/to/samples/foo.wav\" - a string representing a valid path to a sample"
msgstr ""
"\"/path/to/samples/foo.wav\" - строка, представляющая действительный путь к "
"примеру"

#: 03.7-Sample-Packs.md:145
msgid ""
"The `sample` fn will first gather all sources and use them to create a large l"
"ist of candidates. This list is constructed by first adding all valid paths an"
"d then by adding all the valid `.flac`, `.aif`, `.aiff`, `.wav`, `.wave` files"
" contained within the directories."
msgstr ""
"Функция `sample` сначала собирает все источники и использует их для создания "
"большого списка совпадений. Этот список создается, сначала добавляя все "
"допустимые пути, а затем добавляя все допустимые файлы `.flac`,` .aif`, "
"`.aiff`,` .wav`, `.wave`, содержащиеся в каталогах."

#: 03.7-Sample-Packs.md:150
msgid "For example, take a look at the following code:"
msgstr "Например, посмотрите на следующий код:"

#: 03.7-Sample-Packs.md:152
#, no-wrap
msgid ""
"samps = \"/path/to/my/samples/\"\n"
"samps2 = \"/path/to/my/samples2/\"\n"
"path = \"/path/to/my/samples3/foo.wav\"\n"
"sample samps, samps2, path, 0"
msgstr ""
"samps = \"/path/to/my/samples/\"\n"
"samps2 = \"/path/to/my/samples2/\"\n"
"path = \"/path/to/my/samples3/foo.wav\"\n"
"sample samps, samps2, path, 0"

#: 03.7-Sample-Packs.md:160
msgid ""
"Here, we're combining the contents of the samples within two directories and a"
"dding a specific sample. If `\"/path/to/my/samples/\"` contained 3 samples and `"
"\"/path/to/my/samples2/\"` contained 12, we'd have 16 potential samples to index"
" and filter (3 + 12 + 1)."
msgstr ""
"Например, здесь мы комбинируем сэмплы из двух каталогов и добавляем конкретный"
" сэмпл. Если `\"/path/to/my/samples/\"`содержит 3 сэмпла и `\"/path/to/my/samples"
"2/\"`содержит 12, в сумме мы получим 16 потенциальных сэмплов на индексирование"
" и фильтрацию (3 + 12 + 1)."

#: 03.7-Sample-Packs.md:165
msgid ""
"By default, only the sample files within a directory are gathered into the can"
"didate list. Sometimes you might have a number of nested folders of samples yo"
"u wish to search and filter within. You can therefore do a recursive search fo"
"r all samples within all subfolders of a particular folder by adding `**` to t"
"he end of the path:"
msgstr ""
"По умолчанию в список совпадений попадают только файлы примеров в каталоге. "
"Иногда у вас может быть несколько вложенных папок с сэмплами, которые вы "
"хотите искать и фильтровать внутри. Поэтому вы можете выполнить рекурсивный "
"поиск всех образцов во всех подпапках конкретной папки, добавив `**` в конец "
"пути:"

#: 03.7-Sample-Packs.md:171
#, no-wrap
msgid ""
"samps = \"/path/to/nested/samples/**\"\n"
"sample samps, 0"
msgstr ""
"samps = \"/path/to/nested/samples/**\"\n"
"sample samps, 0"

#: 03.7-Sample-Packs.md:176
msgid ""
"Take care though as searching through a very large set of folders may take a l"
"ong time. However, the contents of all folder sources are cached, so the delay"
" will only happen the first time."
msgstr ""
"Обратите внимание, что поиск в очень большом наборе папок может занять много в"
"ремени. Однако, содержимое всех источников папок кэшируется, поэтому задержка "
"будет выполняться только в первый раз."

#: 03.7-Sample-Packs.md:180
msgid ""
"Finally, note that the sources *must go first*. If no source is given, then th"
"e set of built-in samples will be selected as the default list of candidates t"
"o work with."
msgstr ""
"Наконец, заметьте, что источники *должны идти первыми*. Если не передан источн"
"ик, тогда набор встроенных сэмплов будет выбран как список совпадений по умолч"
"анию."

#: 03.7-Sample-Packs.md:184 A.19-subtractive-synthesis.md:47
msgid "Filters"
msgstr "Фильтры"

#: 03.7-Sample-Packs.md:186
msgid ""
"Once you have a list of candidates you may use the following filtering types t"
"o further reduce the selection:"
msgstr ""
"Как только вы получили список совпадений, вы можете использовать следующие фил"
"ьтры, чтобы уменьшить выборку:"

#: 03.7-Sample-Packs.md:189
msgid ""
"`\"foo\"` Strings will filter on substring occurrence within file name (minus di"
"rectory path and extension)."
msgstr ""
"`\"foo\"` Строки будут фильтроваться при появлении подстроки в имени файла (мину"
"с путь к каталогу и расширение)."

#: 03.7-Sample-Packs.md:190
msgid ""
"`/fo[oO]/` Regular Expressions will filter on pattern matching of file name (m"
"inus directory path and extension)."
msgstr ""
"`/fo[oO]/`Регулярное выражение будет фильтровать соответствие имени файла шабл"
"ону (минус путь к каталогу и расширение)."

#: 03.7-Sample-Packs.md:191
msgid ""
"`:foo` - Keywords will filter candidates on whether the keyword is a direct ma"
"tch of the filename (minus directory path and extension)."
msgstr ""
"`:foo`- Ключевое слово будет фильтровать совпадения по тому, является ли ключе"
"вое слово прямым соответствием имени файла (минус путь к каталогу и расширение"
")."

#: 03.7-Sample-Packs.md:192
msgid ""
"`lambda{|a| ... }` - Procs with one argument will be treated as a candidate fi"
"lter or generator function. It will be passed the list of current candidates a"
"nd must return a new list of candidates (a list of valid paths to sample files"
")."
msgstr ""
"`lambda{|a| ... }` - Процесс с одним аргументом будет обрабатываться как фильт"
"р списка совпадений или функция-генератор. Он принимает текущий и должен верну"
"ть новый список совпадений (список действительных путей к сэмплам)."

#: 03.7-Sample-Packs.md:193
msgid ""
"`1` - Numbers will select the candidate with that index (wrapping round like a"
" ring if necessary)."
msgstr ""
"`1` - Числа будут выбирать совпадение с этим индексом (зацикливаться, если нео"
"бходимо)."

#: 03.7-Sample-Packs.md:195
msgid ""
"For example, we can filter over all the samples in a directory containing the "
"string `\"foo\"` and play the first matching sample at half speed:"
msgstr ""
"Например, мы можем отфильтровать все образцы в каталоге, содержащем строку `\"f"
"oo\"`, и воспроизвести первый совпадающий образец на половинной скорости:"

#: 03.7-Sample-Packs.md:199
#, no-wrap
msgid "sample \"/path/to/samples\", \"foo\", rate: 0.5"
msgstr "sample \"/path/to/samples\", \"foo\", rate: 0.5"

#: 03.7-Sample-Packs.md:203
msgid ""
"See the help for `sample` for many detailed usage examples. Note that the orde"
"ring of the filters is honoured."
msgstr ""
"См. Справку по `sample` для множества подробных примеров использования. Обрати"
"те внимание, что порядок фильтров соблюдается."

#: 03.7-Sample-Packs.md:206
msgid "Composites"
msgstr "Композиции"

#: 03.7-Sample-Packs.md:208
msgid ""
"Finally, you may use lists wherever you may place a source or filter. The list"
" will be automatically flattened and the contents will be treated as regular s"
"ources and filters. Therefore the following calls to `sample` are semantically"
" equivalent:"
msgstr ""
"Наконец, вы можете использовать списки везде, где вы можете разместить источни"
"к или фильтр. Список будет автоматически сплющиваться, и содержимое будет расс"
"матриваться как обычные источники и фильтры. Поэтому следующие вызовы `sample`"
" семантически эквивалентны:"

#: 03.7-Sample-Packs.md:213
#, no-wrap
msgid ""
"sample \"/path/to/dir\", \"100\", \"C#\"\n"
"sample [\"/path/to/dir\", \"100\", \"C#\"]\n"
"sample \"/path/to/dir\", [\"100\", \"C#\"]\n"
"sample [\"/path/to/dir\", [\"100\", [\"C#\"]]]"
msgstr ""
"sample \"/path/to/dir\", \"100\", \"C#\"\n"
"sample [\"/path/to/dir\", \"100\", \"C#\"]\n"
"sample \"/path/to/dir\", [\"100\", \"C#\"]\n"
"sample [\"/path/to/dir\", [\"100\", [\"C#\"]]]"

#: 03.7-Sample-Packs.md:220
msgid "Wrapping Up"
msgstr "Подведение итогов"

#: 03.7-Sample-Packs.md:222
msgid ""
"This was an advanced section for people that need real power to manipulate and"
" use sample packs. If most of this section didn't make too much sense, don't w"
"orry. It's likely you don't need any of this functionality just yet. However, "
"you'll know when you do need it and you can come back and re-read this when yo"
"u start working with large directories of samples."
msgstr ""
"Это был расширенный раздел для людей, которым нужны дополнительные "
"возможности для манипулирования и использования наборов сэмплов. Если "
"большая часть этого раздела не имела особого смысла, не беспокойтесь. Скорее "
"всего, вам пока не нужна какая-либо из этих функций. Однако, вы будете "
"знать, когда это понадобится, и вы можете вернуться и перечитать это, когда "
"начнете работать с большими каталогами сэмплов."

#: 04-Randomisation.md:1
msgid "4 Randomisation"
msgstr "4 Рандомизация (Внесение случайностей)"

#: 04-Randomisation.md:3
msgid "Randomisation"
msgstr "Рандомизация"

#: 04-Randomisation.md:5
msgid ""
"A great way to add some interest into your music is using some random numbers."
" Sonic Pi has some great functionality for adding randomness to your music, bu"
"t before we start we need to learn a shocking truth: in Sonic Pi *random is no"
"t truly random*. What on earth does this mean? Well, let's see."
msgstr ""
"Отличный способ сделать вашу музыку несколько более интересной - это использов"
"ать случайные числа. В Sonic Pi есть замечательная функция добавления случайно"
"сти в музыку, но прежде, чем мы начнем, нужно усвоить неприятную истину: в Son"
"ic Pi *случайности не являются по-настоящему случайными*. Что же, спрашивается"
", это значит? Давайте разберёмся."

#: 04-Randomisation.md:11
msgid "Repeatability"
msgstr "Повторяемость"

#: 04-Randomisation.md:13
msgid ""
"A really useful random function is `rrand` which will give you a random value "
"between two numbers - a *min* and a *max*. (`rrand` is short for ranged random"
"). Let's try playing a random note:"
msgstr ""
"Очень полезная случайная функция называется `rrand`. Она вернет случайное знач"
"ение в диапазоне двух чисел - *минимума* и *максимума* (`rrand` это сокращение"
" от \"ранжированный генератор случайных чисел\"). Попробуем проиграть какую-нибу"
"дь случайную ноту:"

#: 04-Randomisation.md:17
#, no-wrap
msgid "play rrand(50, 95)"
msgstr "play rrand(50, 95)"

#: 04-Randomisation.md:21
msgid ""
"Ooh, it played a random note. It played note `83.7527`. A nice random note bet"
"ween 50 and 95. Woah, wait, did I just predict the exact random note you got t"
"oo? Something fishy is going on here. Try running the code again. What? It cho"
"se `83.7527` again? That can't be random!"
msgstr ""
"Ого, получился неожиданный звук. Он воспроизвел ноту `83.7527`. Прекрасная слу"
"чайная нота в промежутке между 50 и 95. Постойте-ка, я только что точно предск"
"азал случайную ноту, которая и у вас получилась? Что-то тут нечисто. Попробуем"
" снова. Что? Он снова выбрал `83.7527`? Это явно не случайно!"

#: 04-Randomisation.md:26
msgid ""
"The answer is that it is not truly random, it's pseudo-random. Sonic Pi will g"
"ive you random-like numbers in a repeatable manner. This is very useful for en"
"suring that the music you create on your machine sounds identical on everybody"
" else's machine - even if you use some randomness in your composition."
msgstr ""
"Правда в том, что выбор не случаен, он псевдо-случаен. Sonic Pi выдаёт повторя"
"ющиеся псевдо-случайные числа, чтобы быть уверенным, что музыка, которую вы со"
"здаёте на своей машине, будет звучать точно так же на всех других машинах. Это"
" очень полезное свойство, даже если вы добавляете совсем немного случайности в"
" свои композиции."

#: 04-Randomisation.md:32
msgid ""
"Of course, in a given piece of music, if it 'randomly' chose `83.7527` every t"
"ime, then it wouldn't be very interesting. However, it doesn't. Try the follow"
"ing:"
msgstr ""
"Конечно же, в конкретном музыкальном произведении, если бы `83.7527` \"случайно"
"\" выбиралась каждый раз, это было бы не очень интересно. Но все-таки этого не "
"происходит. Попробуйте следующее:"

#: 04-Randomisation.md:36
#, no-wrap
msgid ""
"loop do\n"
"  play rrand(50, 95)\n"
"  sleep 0.5\n"
"end "
msgstr ""
"loop do\n"
"  play rrand(50, 95)\n"
"  sleep 0.5\n"
"end "

#: 04-Randomisation.md:43
msgid ""
"Yes! It finally sounds random. Within a given *run* subsequent calls to random"
" functions will return random values. However, the next run will produce exact"
"ly the same sequence of random values and sound exactly the same. It's as if a"
"ll Sonic Pi code went back in time to exactly the same point every time the Ru"
"n button was pressed. It's the Groundhog Day of music synthesis!"
msgstr ""
"Ура! Наконец-то это звучит случайно. В течение одного запуска, последующие выз"
"овы функции генератора случайных чисел будут возвращать случайные значения. Од"
"нако, следующий прогон создаст точно такую же последовательность случайных чис"
"ел и будет звучать идентично. Это как если бы код Sonic Pi всякий раз возвраща"
"лся назад во времени в тот момент, когда нажимается кнопка Run. Это День Сурка"
" для музыкального синтеза!"

#: 04-Randomisation.md:50
#, fuzzy
msgid "Haunted Bells"
msgstr "Колокола с привидениями"

#: 04-Randomisation.md:52
#, fuzzy
msgid ""
"A lovely illustration of randomisation in action is the haunted bells example "
"which loops the `:perc_bell` sample with a random rate and sleep time between "
"bell sounds:"
msgstr ""
"Прекрасной иллюстрацией рандомизации в действии является пример колоколов, в к"
"оторые как будто вселились призраки. Он повторяет `:perc_bell` сэмпл, выбирая "
"случайную скорость и задержку между звуками:"

#: 04-Randomisation.md:56
#, no-wrap
msgid ""
"loop do\n"
"  sample :perc_bell, rate: (rrand 0.125, 1.5)\n"
"  sleep rrand(0.2, 2)\n"
"end"
msgstr ""
"loop do\n"
"  sample :perc_bell, rate: (rrand 0.125, 1.5)\n"
"  sleep rrand(0.2, 2)\n"
"end"

#: 04-Randomisation.md:63
#, fuzzy
msgid "Random cutoff"
msgstr "Случайный Срез"

#: 04-Randomisation.md:65
#, fuzzy
msgid ""
"Another fun example of randomisation is to modify the cutoff of a synth random"
"ly. A great synth to try this out on is the `:tb303` emulator:"
msgstr ""
"Еще один забавный пример случайности - управление частотой среза фильтра синта"
" случайным образом. Отличный синт, на котором можно это попробовать, - это эму"
"лятор `:tb303`:"

#: 04-Randomisation.md:69
#, no-wrap
msgid ""
"use_synth :tb303\n"
"loop do\n"
"  play 50, release: 0.1, cutoff: rrand(60, 120)\n"
"  sleep 0.125\n"
"end"
msgstr ""
"use_synth :tb303\n"
"loop do\n"
"  play 50, release: 0.1, cutoff: rrand(60, 120)\n"
"  sleep 0.125\n"
"end"

#: 04-Randomisation.md:78
#, fuzzy
msgid "Random seeds"
msgstr "Начальные Точки Случайных Чисел"

#: 04-Randomisation.md:80
#, fuzzy
msgid ""
"So, what if you don't like this particular sequence of random numbers Sonic Pi"
" provides? Well it's totally possible to choose a different starting point via"
" `use_random_seed`. The default seed happens to be 0, so choose a different se"
"ed for a different random experience!"
msgstr ""
"Что, если вам не нравится последовательность случайных чисел, сгенерированная "
"Sonic Pi? Ну, очень легко выбрать другую начальную точку, если использовать `u"
"se_random_seed`.Начальная точка по умолчанию равна 0, так что для другого случ"
"айного результата выбирайте другую точку!"

#: 04-Randomisation.md:85
#, fuzzy
msgid "Consider the following:"
msgstr "Сравните следующее:"

#: 04-Randomisation.md:87
#, no-wrap
msgid ""
"5.times do\n"
"  play rrand(50, 100)\n"
"  sleep 0.5\n"
"end"
msgstr ""
"5.times do\n"
"  play rrand(50, 100)\n"
"  sleep 0.5\n"
"end"

#: 04-Randomisation.md:94
#, fuzzy
msgid ""
"Every time you run this code, you'll hear the same sequence of 5 notes. To get"
" a different sequence simply change the seed:"
msgstr ""
"Каждый раз, когда этот код выполняется, вы будете слышать один и тот же набор "
"нот. Чтобы получить другой порядок просто поменяйте начальную точку:"

#: 04-Randomisation.md:97
#, no-wrap
msgid ""
"use_random_seed 40\n"
"5.times do\n"
"  play rrand(50, 100)\n"
"  sleep 0.5\n"
"end"
msgstr ""
"use_random_seed 40\n"
"5.times do\n"
"  play rrand(50, 100)\n"
"  sleep 0.5\n"
"end"

#: 04-Randomisation.md:105
#, fuzzy
msgid ""
"This will produce a different sequence of 5 notes. By changing the seed and li"
"stening to the results you can find something that you like - and when you sha"
"re it with others, they will hear exactly what you heard too."
msgstr ""
"В итоге получится другая последовательность из 5 нот. Изменяя начальную точку "
"и слушая результат, можено выбрать что-то, что вам понравится. Потом, когда вы"
" поделитесь результатом с другими, они услышат в точности то же самое, что и в"
"ы."

#: 04-Randomisation.md:110
#, fuzzy
msgid "Let's have a look at some other useful random functions."
msgstr "Давайте познакомимся с некоторыми другими случайными функциями."

#: 04-Randomisation.md:113
msgid "choose"
msgstr "choose"

#: 04-Randomisation.md:115
#, fuzzy
msgid ""
"A very common thing to do is to choose an item randomly from a list of known i"
"tems. For example, I may want to play one note from the following: 60, 65 or 7"
"2. I can achieve this with `choose` which lets me choose an item from a list. "
"First, I need to put my numbers in a list which is done by wrapping them in sq"
"uare brackets and separating them with commas: `[60, 65, 72]`. Next I just nee"
"d to pass them to `choose`:"
msgstr ""
"Очень часто приходится выбирать вещь случайным образом из списка. Например, мн"
"е бы могло захотеться проиграть одну ноту из набора: 60, 65 и 72. Я могу дости"
"чь этого с помощью функции `choose`, которая позволяет мне выбрать предмет из "
"списка. Вначале, надо добавить мои числа в список, что достигается заключением"
" их в квадратные скобки и разделением запятыми: `[60, 65, 72]`. Затем, надо пр"
"осто передать их `choose`:"

#: 04-Randomisation.md:122
#, no-wrap
msgid "choose([60, 65, 72])"
msgstr "choose([60, 65, 72])"

#: 04-Randomisation.md:126
#, fuzzy
msgid "Let's hear what that sounds like:"
msgstr "Послушаем, на что это похоже:"

#: 04-Randomisation.md:128
#, no-wrap
msgid ""
"loop do\n"
"  play choose([60, 65, 72])\n"
"  sleep 1\n"
"end"
msgstr ""
"loop do\n"
"  play choose([60, 65, 72])\n"
"  sleep 1\n"
"end"

#: 04-Randomisation.md:135
msgid "rrand"
msgstr "rrand"

#: 04-Randomisation.md:137
#, fuzzy
msgid ""
"We've already seen `rrand`, but let's run over it again. It returns a random n"
"umber between two values exclusively. That means it will never return either t"
"he top or bottom number - always something in between the two. The number will"
" always be a float - meaning it's not a whole number but a fraction of a numbe"
"r. Examples of floats returned by `rrand(20, 110)`:"
msgstr ""
"Мы уже видели `rrand`, но пробежимся по ней вновь. Она возвращает случайную ве"
"личину в промежутке двух чисел, не включая границы. Это значит, что никогда не"
" будет выбрано самое большое или самое маленькое значение - всегда нечто между"
" ними. Число всегда будет дробным, то есть не целым. Примеры дробных чисел, во"
"звращаемых `rrand(20, 110)`:"

#: 04-Randomisation.md:148
msgid "rrand_i"
msgstr "rrand_i"

#: 04-Randomisation.md:150
#, fuzzy
msgid ""
"Occasionally you'll want a whole random number, not a float. This is where `rr"
"and_i` comes to the rescue. It works similarly to `rrand` except it may return"
" the min and max values as potential random values (which means it's inclusive"
" rather than exclusive of the range). Examples of numbers returned by `rrand_i"
"(20, 110)` are:"
msgstr ""
"Время от времени вам может понадобится получить целое случайное число, а не др"
"обное. Тут-то и придёт на помощь `rrand_i`. Она работает так же, как `rrand`, "
"но включает граничные значения (то есть она может выбирать минимальные и макси"
"мальные числа). Примеры, полученные из `rrand_i(20, 110)`:"

#: 04-Randomisation.md:160
msgid "rand"
msgstr "случайный"

#: 04-Randomisation.md:162
#, fuzzy
msgid ""
"This will return a random float between 0 (inclusive) and the max value you sp"
"ecify (exclusive). By default it will return a value between 0 and one. It's t"
"herefore useful for choosing random `amp:` values:"
msgstr ""
"Вернет случайное дробное число от 0 (включительно), до максимального указанног"
"о вами. По умолчанию числа лежат в промежутке от 0 до 1. Такая функция полезна"
" для выбора случайного усиления:"

#: 04-Randomisation.md:167
#, no-wrap
msgid ""
"loop do\n"
"  play 60, amp: rand\n"
"  sleep 0.25\n"
"end"
msgstr ""
"loop do\n"
"  play 60, amp: rand\n"
"  sleep 0.25\n"
"end"

#: 04-Randomisation.md:174
msgid "rand_i"
msgstr "rand_i"

#: 04-Randomisation.md:176
#, fuzzy
msgid ""
"Similar to the relationship between `rrand_i` and `rrand`, `rand_i` will retur"
"n a random whole number between 0 and the max value you specify."
msgstr ""
"Относится к `rrand_i`, как `rrand_i` к `rrand`. То есть она выбирает случайное"
" целое число в диапазоне от 0 до максимального значение, которое вы укажете."

#: 04-Randomisation.md:179
msgid "dice"
msgstr "игральная кость"

#: 04-Randomisation.md:181
#, fuzzy
msgid ""
"Sometimes you want to emulate a dice throw - this is a special case of `rrand_"
"i` where the lower value is always 1. A call to `dice` requires you to specify"
" the number of sides on the dice. A standard dice has 6 sides, so `dice(6)` wi"
"ll act very similarly - returning values of either 1, 2, 3, 4, 5, or 6. Howeve"
"r, just like fantasy role-play games, you might find value in a 4 sided dice, "
"or a 12 sided dice, or a 20 sided dice - perhaps even a 120 sided dice!"
msgstr ""
"Иногда нужно изобразить бросание игральных костей - это частный случай `rrand_"
"i`, когда минимальное значение всегда 1. В вызов `dice` требуется передать кол"
"ичество сторон кости. Стандартная игральная кость имеет 6 сторон, так что `dic"
"e(6)` будет работать очень похожим образом - возвращать 1, 2, 3, 4, 5 или 6. О"
"днако, прямо как в ролевых играх в стиле фэнтези, пользу может принести и кост"
"ь с 4 сторонами, и с 12 сторонами или с 20 сторонами. Может даже потребуется к"
"ость со 120 гранями!"

#: 04-Randomisation.md:189
msgid "one_in"
msgstr "one_in"

#: 04-Randomisation.md:191
#, fuzzy
msgid ""
"Finally you may wish to emulate throwing the top score of a dice such as a 6 i"
"n a standard dice. `one_in` therefore returns true with a probability of one i"
"n the number of sides on the dice. Therefore `one_in(6)` will return true with"
" a probability of 1 in 6 or false otherwise. True and false values are very us"
"eful for `if` statements which we will cover in a subsequent section of this t"
"utorial."
msgstr ""
"Наконец, может потребоваться сымитировать вероятность выпадания наибольшей из "
"граней игральной кости, например, 6 для обычной кости. Функция `one_in` возвра"
"щает истину с вероятностью один к числу сторон кости. Следовательно, для `one_"
"in(6)` шанс получить истину составит 1 к 5. В остальных 5 из 6 случаев вернётс"
"я ложь. Истинные и ложные значения очень полезны для логических выражений `if`"
", которые мы рассмотрим в одной из следующих глав нашего учебника."

#: 04-Randomisation.md:198
msgid "Now, go and jumble up your code with some randomness!"
msgstr ""
"А теперь, пришла пора добавить немного неразберихи в вашу музыку за счет случа"
"йностей!"

#: 05-Programming-Structures.md:1
msgid "5 Programming Structures"
msgstr "5 Программирование структур"

#: 05-Programming-Structures.md:3
msgid "Programming Structures"
msgstr "Программирование структур"

#: 05-Programming-Structures.md:5
msgid ""
"Now that you've learned the basics of creating sounds with `play` and `sample`"
" and creating simple melodies and rhythms by `sleep`ing between sounds, you mi"
"ght be wondering what else the world of code can offer you..."
msgstr ""
"После того, как мы изучили основы создания звука при помощи `play` и `sample`,"
" и сочинения простых мелодий и ритмов, расставляя задержки между ними, вам мог"
"ло стать интересно, а что же ещё мир программирования может нам предложить..."

#: 05-Programming-Structures.md:10
msgid ""
"Well, you're in for an exciting treat! It turns out that basic programming str"
"uctures such as looping, conditionals, functions and threads give you amazingl"
"y powerful tools to express your musical ideas."
msgstr ""
"Скажем так, вас ожидает захватывающее путешествие! Оказывается, что основные с"
"труктуры программирования, такие как циклы, условные выражения, функции и пото"
"ки выполнения, предлагают нам очень мощные инструменты для выражения собственн"
"ых музыкальных идей."

#: 05-Programming-Structures.md:14
msgid "Let's get stuck in with the basics..."
msgstr "Ограничимся лишь основами..."

#: 05.1-Blocks.md:1
msgid "5.1 Blocks"
msgstr "5.1 Блоки"

#: 05.1-Blocks.md:3
msgid "Blocks"
msgstr "Блоки"

#: 05.1-Blocks.md:5
#, fuzzy
msgid ""
"A structure you'll see a lot in Sonic Pi is the block. Blocks allow us to do u"
"seful things with large chunks of code. For example, with synth and sample par"
"ameters we were able to change something that happened on a single line. Howev"
"er, sometimes we want to do something meaningful to a number of lines of code."
" For example, we may wish to loop it, to add reverb to it, to only run it 1 ti"
"me out of 5, etc. Consider the following code:"
msgstr ""
"Структура, которая будет попадаться вам в Sonic Pi особенно часто, - это блок."
" Блоки позволяют нам делать разные полезные вещи с большими участками кода. На"
"пример, при помощи параметров синтов и сэмплов мы могли изменять что-то, что п"
"роисходило в одной строке. Однако, иногда нам нужно сделать что-то значительно"
"е, что касается множества строк кода. Например, мы можем решить играть их по к"
"ругу, добавить эффект реверберации всего к одному из пяти повторов и так далее"
". Рассмотрим следующий код:"

#: 05.1-Blocks.md:13
#, no-wrap
msgid ""
"play 50\n"
"sleep 0.5\n"
"sample :elec_plip\n"
"sleep 0.5\n"
"play 62"
msgstr ""
"play 50\n"
"sleep 0.5\n"
"sample :elec_plip\n"
"sleep 0.5\n"
"play 62"

#: 05.1-Blocks.md:21
msgid ""
"To do something with a chunk of code, we need to tell Sonic Pi where the code "
"block *starts* and where it *ends*. We use `do` for start and `end` for end. F"
"or example:"
msgstr ""
"Чтобы сделать что-то с куском кода, нам надо сказать Sonic Pi, где этот блок к"
"ода *начинается*, и где он *заканчивается*. Для его начала мы используем `do`,"
" а для обозначения конца - `end`. Пример:"

#: 05.1-Blocks.md:25
#, no-wrap
msgid ""
"do\n"
"  play 50\n"
"  sleep 0.5\n"
"  sample :elec_plip\n"
"  sleep 0.5\n"
"  play 62\n"
"end"
msgstr ""
"do\n"
"  play 50\n"
"  sleep 0.5\n"
"  sample :elec_plip\n"
"  sleep 0.5\n"
"  play 62\n"
"end"

#: 05.1-Blocks.md:35
#, fuzzy
msgid ""
"However, this isn't yet complete and won't work (try it and you'll get an erro"
"r) as we haven't told Sonic Pi what we want to do with this *do/end block*. We"
" tell Sonic Pi this by writing some special code before the `do`. We'll see a "
"number of these special pieces of code later on in this tutorial. For now, it'"
"s important to know that wrapping your code within `do` and `end` tells Sonic "
"Pi you wish to do something special with that chunk of code."
msgstr ""
"Все же он ещё не является завершённым и не будет работать (попробуйте и получи"
"те сообщение об ошибке), так как мы не сообщили Sonic Pi, что мы хотим делать "
"с этим *блоком \\*do/end*. Этого можно добиться, если написать некий специальны"
"й код перед `do`. Далее мы увидим много примеров этих специальных кусочков код"
"а. Пока лишь важно понять, что оборачивание вашего кода в `do` и `end` сообщае"
"т Sonic Pi, что вы хочтите сделать что-то особенное с этим блоком."

#: 05.2-Iteration-and-Loops.md:1
msgid "5.2 Iteration and Loops"
msgstr "5.2 Итерации и циклы"

#: 05.2-Iteration-and-Loops.md:3
msgid "Iteration and Loops"
msgstr "Итерации и циклы"

#: 05.2-Iteration-and-Loops.md:5
msgid ""
"So far we've spent a lot of time looking at the different sounds you can make "
"with `play` and `sample` blocks. We've also learned how to trigger these sound"
"s through time using `sleep`."
msgstr ""
"До этого момента мы потратили немало времени, пробуя разные звуки, которые мож"
"но производить внутри блоков `play` и `sample`. Мы также изучили как разносить"
" эти звуки во времени, используя `sleep`."

#: 05.2-Iteration-and-Loops.md:9
msgid ""
"As you've probably found out, there's a *lot* of fun you can have with these b"
"asic building blocks. However, a whole new dimension of fun opens up when you "
"start using the power of code to structure your music and compositions. In the"
" next few sections we'll explore some of these powerful new tools. First up is"
" iteration and loops."
msgstr ""
"Как мы уже смогли выяснить, даже с этими простейшими блоками кода можно долго "
"забавляться. Однако, совершенно новое измерение веселья откроется для вас, ког"
"да вы начнёте использовать мощь блоков кода для структурирования вашей музыки."
" В нескольких последующих главах мы рассмотрим некоторые из этих новых инструм"
"ентов. Вначале идут итерации и циклы."

#: 05.2-Iteration-and-Loops.md:15
msgid "Repetition"
msgstr "Повторение"

#: 05.2-Iteration-and-Loops.md:17
msgid ""
"Have you written some code you'd like to repeat a few times? For example, you "
"might have something like this:"
msgstr ""
"Доводилось ли вам писать код, который вы бы хотели повторить несколько раз? На"
"пример, у вас могло получиться нечто подобное:"

#: 05.2-Iteration-and-Loops.md:20
#, no-wrap
msgid ""
"play 50\n"
"sleep 0.5\n"
"sample :elec_blup\n"
"sleep 0.5\n"
"play 62\n"
"sleep 0.25"
msgstr ""
"play 50\n"
"sleep 0.5\n"
"sample :elec_blup\n"
"sleep 0.5\n"
"play 62\n"
"sleep 0.25"

#: 05.2-Iteration-and-Loops.md:29
msgid ""
"What if we wished to repeat this 3 times? Well, we could do something simple a"
"nd just copy and paste it three times:"
msgstr ""
"Что, если мы захотим повторить это три раза? Что ж, можно было бы выбрать прос"
"тейший путь и попросту продублировать код трижды:"

#: 05.2-Iteration-and-Loops.md:32
#, no-wrap
msgid ""
"play 50\n"
"sleep 0.5\n"
"sample :elec_blup\n"
"sleep 0.5\n"
"play 62\n"
"sleep 0.25\n"
"play 50\n"
"sleep 0.5\n"
"sample :elec_blup\n"
"sleep 0.5\n"
"play 62\n"
"sleep 0.25\n"
"play 50\n"
"sleep 0.5\n"
"sample :elec_blup\n"
"sleep 0.5\n"
"play 62\n"
"sleep 0.25"
msgstr ""
"play 50\n"
"sleep 0.5\n"
"sample :elec_blup\n"
"sleep 0.5\n"
"play 62\n"
"sleep 0.25\n"
"play 50\n"
"sleep 0.5\n"
"sample :elec_blup\n"
"sleep 0.5\n"
"play 62\n"
"sleep 0.25\n"
"play 50\n"
"sleep 0.5\n"
"sample :elec_blup\n"
"sleep 0.5\n"
"play 62\n"
"sleep 0.25"

#: 05.2-Iteration-and-Loops.md:55
msgid ""
"Now that's a lot of code! What happens if you want to change the sample to `:e"
"lec_plip`? You're going to have to find all the places with the original `:ele"
"c_blup` and switch them over. More importantly, what if you wanted to repeat t"
"he original piece of code 50 times or 1000? Now that would be a lot of code, a"
"nd a lot of lines of code to alter if you wanted to make a change."
msgstr ""
"Этот код просто огромен! Как быть, если нам захочется поменять сэмпл на `:elec"
"_plip`? Придется найти все места с изначальным `:elec_blup` и переписать их. Ч"
"то ещё важнее, каким образом повторить кусок кода 50 раз или 1000? Это было бы"
" и впрямь целая куча кода. Гигантское число строк пришлось бы изменять для каж"
"дой правки."

#: 05.2-Iteration-and-Loops.md:62
msgid "Iteration"
msgstr "Итерации"

#: 05.2-Iteration-and-Loops.md:64
#, fuzzy
msgid ""
"In fact, repeating the code should be as easy as saying *do this three times*."
" Well, it pretty much is. Remember our old friend the code block? We can use i"
"t to mark the start and end of the code we'd like to repeat three times. We th"
"en use the special code `3.times`. So, instead of writing *do this three times"
"*, we write `3.times do` - that's not too hard. Just remember to write `end` a"
"t the end of the code you'd like to repeat:"
msgstr ""
"На самом деле сделать повторение кода должно быть не сложнее, чем сказать *сде"
"лай это три раза*. В общем-то, так оно и есть. Помните ли вы о нашем старом зн"
"акомом, блоке кода? Его можно использовать для отметки начала и конца кода, ко"
"торый необходимо повторить три раза. Мы добавим специальную конструкцию `3.tim"
"es`. Так что, вместо записи *делай это три раза*, мы напишем `3.times do`. Это"
" не очень сложно. Просто не забывайте указать `end` в конце кода, который надо"
" повторить:"

#: 05.2-Iteration-and-Loops.md:72
#, no-wrap
msgid ""
"3.times do\n"
"  play 50\n"
"  sleep 0.5\n"
"  sample :elec_blup\n"
"  sleep 0.5\n"
"  play 62\n"
"  sleep 0.25\n"
"end"
msgstr ""
"3.times do\n"
"  play 50\n"
"  sleep 0.5\n"
"  sample :elec_blup\n"
"  sleep 0.5\n"
"  play 62\n"
"  sleep 0.25\n"
"end"

#: 05.2-Iteration-and-Loops.md:83
msgid ""
"Now isn't that much neater than cutting and pasting! We can use this to create"
" lots of nice repeating structures:"
msgstr ""
"Ну, разве это не лучше дублирования? Много красивых структур может быть создан"
"о с использованием этой инструкции:"

#: 05.2-Iteration-and-Loops.md:86
#, no-wrap
msgid ""
"4.times do\n"
"  play 50\n"
"  sleep 0.5\n"
"end\n"
"8.times do\n"
"  play 55, release: 0.2\n"
"  sleep 0.25\n"
"end\n"
"4.times do\n"
"  play 50\n"
"  sleep 0.5\n"
"end"
msgstr ""
"4.times do\n"
"  play 50\n"
"  sleep 0.5\n"
"end\n"
"8.times do\n"
"  play 55, release: 0.2\n"
"  sleep 0.25\n"
"end\n"
"4.times do\n"
"  play 50\n"
"  sleep 0.5\n"
"end"

#: 05.2-Iteration-and-Loops.md:103
msgid "Nesting Iterations"
msgstr "Вложенные Итерации"

#: 05.2-Iteration-and-Loops.md:105
msgid ""
"We can put iterations inside other iterations to create interesting patterns. "
"For example:"
msgstr ""
"Еще можно поместить итерации внутрь других итераций и получить интересный рису"
"нок. Например:"

#: 05.2-Iteration-and-Loops.md:108
#, no-wrap
msgid ""
"4.times do\n"
"  sample :drum_heavy_kick\n"
"  2.times do\n"
"    sample :elec_blip2, rate: 2\n"
"    sleep 0.25\n"
"  end\n"
"  sample :elec_snare\n"
"  4.times do\n"
"    sample :drum_tom_mid_soft\n"
"    sleep 0.125\n"
"  end\n"
"end"
msgstr ""
"4.times do\n"
"  sample :drum_heavy_kick\n"
"  2.times do\n"
"    sample :elec_blip2, rate: 2\n"
"    sleep 0.25\n"
"  end\n"
"  sample :elec_snare\n"
"  4.times do\n"
"    sample :drum_tom_mid_soft\n"
"    sleep 0.125\n"
"  end\n"
"end"

#: 05.2-Iteration-and-Loops.md:123
#, fuzzy
msgid "Looping"
msgstr "Цикличность"

#: 05.2-Iteration-and-Loops.md:125
#, fuzzy
msgid ""
"If you want something to repeat a lot of times, you might find yourself using "
"really large numbers such as `1000.times do`. In this case, you're probably be"
"tter off asking Sonic Pi to repeat forever (at least until you press the stop "
"button!). Let's loop the amen break forever:"
msgstr ""
"Если потребуется повторить что-то много раз, придётся указывать очень большие "
"значения, такие как `1000.times do`. В этом случае, наверное, лучше попросить "
"Sonic Pi повторять код до бесконечности (или, как минимум, до того момента, по"
"ка вы не нажмёте кнопку \"Остановить\"!). Давайте зациклим амен-брейк:"

#: 05.2-Iteration-and-Loops.md:130
#, no-wrap
msgid ""
"loop do\n"
"  sample :loop_amen\n"
"  sleep sample_duration :loop_amen\n"
"end"
msgstr ""
"loop do\n"
"  sample :loop_amen\n"
"  sleep sample_duration :loop_amen\n"
"end"

#: 05.2-Iteration-and-Loops.md:137
#, fuzzy
msgid ""
"The important thing to know about loops is that they act like black holes for "
"code. Once the code enters a loop it can never leave until you press stop - it"
" will just go round and round the loop forever. This means if you have code af"
"ter the loop you will *never* hear it. For example, the cymbal after this loop"
" will never play:"
msgstr ""
"О циклах важно знать то, что они работают как чёрные дыры внутри кода. Как тол"
"ько исполнение кода попадает в цикл, оно не cможет покинуть его до тех пор, по"
"ка вы не остановите его. Код просто будет повторяться по кругу снова и снова в"
"ечно. Это значит, что вы *никогда* не услышите код, написанный после цикла. К "
"примеру, тарелка после этого цикла никогда не прозвучит:"

#: 05.2-Iteration-and-Loops.md:143
#, no-wrap
msgid ""
"loop do\n"
"  play 50\n"
"  sleep 1\n"
"end\n"
"sample :drum_cymbal_open"
msgstr ""
"loop do\n"
"  play 50\n"
"  sleep 1\n"
"end\n"
"sample :drum_cymbal_open"

#: 05.2-Iteration-and-Loops.md:152
msgid "Now, get structuring your code with iteration and loops!"
msgstr ""
"Теперь, пришла пора создать интересные структуры из вашего кода при помощи ите"
"раций и циклов!"

#: 05.3-Conditionals.md:1
msgid "5.3 Conditionals"
msgstr "5.3 Условные выражения"

#: 05.3-Conditionals.md:3
msgid "Conditionals"
msgstr "Условные выражения"

#: 05.3-Conditionals.md:5
msgid ""
"A common thing you'll likely find yourself wanting to do is to not only play a"
" random note (see the previous section on randomness) but also make a random d"
"ecision and based on the outcome run some code or some other code. For example"
", you might want to randomly play a drum or a cymbal. We can achieve this with"
" an `if` statement."
msgstr ""
"Часто, помимо игры произвольных нот (см. предыдущую главу), вы также будете хо"
"теть принимать произвольные решения и выполнять либо одну, либо другую ветку к"
"ода, в зависимости от результата. Например, вы можете решить случайным образом"
" сыграть звук барабана или звук тарелки. Мы можем достичь этого при помощи выр"
"ажения `if`."

#: 05.3-Conditionals.md:11
msgid "Flipping a Coin"
msgstr "Подбрасывание монетки"

#: 05.3-Conditionals.md:13
#, fuzzy
msgid ""
"So, let's flip a coin: if it's heads, play a drum, if it's tails, play a cymba"
"l. Easy. We can emulate a coin flip with our `one_in` function (introduced in "
"the section on randomness) specifying a probability of 1 in 2: `one_in(2)`. We"
" can then use the result of this to decide between two pieces of code, the cod"
"e to play the drum and the code to play the cymbal:"
msgstr ""
"Итак, давайте подбросим монетку: орел - играем на барабане, решка - бьём по та"
"релке. Это просто. Можно сымитировать это действие, используя функцию `one_in`"
" (представлена в разделе, посвящённом случайности) с вероятностью один к двум:"
" `one_in(2)`. Затем, мы можем использовать результат, чтобы выбрать один из дв"
"ух участков кода: один - для звука барабана, другой - для тарелки:"

#: 05.3-Conditionals.md:20
#, no-wrap
msgid ""
"loop do\n"
"  if one_in(2)\n"
"    sample :drum_heavy_kick\n"
"  else\n"
"    sample :drum_cymbal_closed\n"
"  end\n"
"  \n"
"  sleep 0.5\n"
"  \n"
"end"
msgstr ""
"loop do\n"
"  if one_in(2)\n"
"    sample :drum_heavy_kick\n"
"  else\n"
"    sample :drum_cymbal_closed\n"
"  end\n"
"  \n"
"  sleep 0.5\n"
"  \n"
"end"

#: 05.3-Conditionals.md:34
#, fuzzy
msgid "Notice that `if` statements have three parts:"
msgstr "Отметим, что выражение `if` состоит из трёх частей:"

#: 05.3-Conditionals.md:36
#, fuzzy
msgid "The question to ask"
msgstr "Вопрос, на который нужно получить ответ"

#: 05.3-Conditionals.md:37
#, fuzzy
msgid "The first choice of code to run (if the answer to the question is yes)"
msgstr "Первый вариант исполняемого кода (выбирается, если ответ на вопрос \"Да\")"

#: 05.3-Conditionals.md:38
#, fuzzy
msgid "The second choice of code to run (if the answer to the question is no)"
msgstr "Второй вариант исполняемого кода (если ответ \"Нет\")"

#: 05.3-Conditionals.md:40
#, fuzzy
msgid ""
"Typically in programming languages, the notion of yes is represented by the te"
"rm `true` and the notion of no is represented by the term `false`. So we need "
"to find a question that will give us a `true` or `false` answer which is exact"
"ly what `one_in` does."
msgstr ""
"Обычно, в программных языках ответ \"Да\" представлен термином `true` (истина), "
"а `false` (ложь) означает \"Нет\". То есть нам нужно задать вопрос, который даёт"
" `true` или `false` ответ. Это именно то, что делает `one_in`."

#: 05.3-Conditionals.md:45
#, fuzzy
msgid ""
"Notice how the first choice is wrapped between the `if` and the `else` and the"
" second choice is wrapped between the `else` and the `end`. Just like do/end b"
"locks you can put multiple lines of code in either place. For example:"
msgstr ""
"Обратите внимание, что первый вариант действия размещается между `if` и `else`"
", а второй вариант находится между `else` и `end`. Как и в блоках do/end, допу"
"скается многострочный код. Например:"

#: 05.3-Conditionals.md:50
#, no-wrap
#, fuzzy
msgid ""
"loop do\n"
"  if one_in(2)\n"
"    sample :drum_heavy_kick\n"
"    sleep 0.5\n"
"  else\n"
"    sample :drum_cymbal_closed\n"
"    sleep 0.25\n"
"  end\n"
"  \n"
"end"
msgstr ""
"loop do\n"
"  if one_in(2)\n"
"    sample :drum_heavy_kick\n"
"    sleep 0.5\n"
"  else\n"
"    sample :drum_cymbal_closed\n"
"    sleep 0.25\n"
"  end\n"
"end"

#: 05.3-Conditionals.md:64
#, fuzzy
msgid ""
"This time we're sleeping for a different amount of time depending on which cho"
"ice we make."
msgstr ""
"В этом случае мы добавляем задержку в течение разного количества времени в зав"
"исимости от сделанного выбора."

#: 05.3-Conditionals.md:68
#, fuzzy
msgid "Simple if"
msgstr "Простое Условие"

#: 05.3-Conditionals.md:70
#, fuzzy
msgid ""
"Sometimes you want to optionally execute just one line of code. This is possib"
"le by placing `if` and then the question at the end. For example:"
msgstr ""
"Иногда вам требуется условно выполнить всего лишь одну строчку кода. Это возмо"
"жно, если написать `if` и сразу же ваш вопрос. Например:"

#: 05.3-Conditionals.md:73
#, no-wrap
msgid ""
"use_synth :dsaw\n"
"loop do\n"
"  play 50, amp: 0.3, release: 2\n"
"  play 53, amp: 0.3, release: 2 if one_in(2)\n"
"  play 57, amp: 0.3, release: 2 if one_in(3)\n"
"  play 60, amp: 0.3, release: 2 if one_in(4)\n"
"  sleep 1.5\n"
"end"
msgstr ""
"use_synth :dsaw\n"
"loop do\n"
"  play 50, amp: 0.3, release: 2\n"
"  play 53, amp: 0.3, release: 2 if one_in(2)\n"
"  play 57, amp: 0.3, release: 2 if one_in(3)\n"
"  play 60, amp: 0.3, release: 2 if one_in(4)\n"
"  sleep 1.5\n"
"end"

#: 05.3-Conditionals.md:85
#, fuzzy
msgid ""
"This will play chords of different numbers with the chance of each note playin"
"g having a different probability."
msgstr ""
"Если запустить этот код, то каждый раз будут звучать разные аккорды, в которых"
" вероятность появления каждой ноты будет различна."

#: 05.4-Threads.md:1
msgid "5.4 Threads"
msgstr "5.4 Потоки"

#: 05.4-Threads.md:3
msgid "Threads"
msgstr "Потоки"

#: 05.4-Threads.md:5
msgid ""
"So you've made your killer bassline and a phat beat. How do you play them at t"
"he same time? One solution is to weave them together manually - play some bass"
", then a bit of drums, then more bass... However, the timing soon gets hard to"
" think about, especially when you start weaving in more elements."
msgstr ""
"Итак, вы написали чумовую бас-партию и заводной ритм. Как сыграть обе эти "
"части одновременно? Одно из решений - переплести их вместе вручную - играть "
"небольшую часть баса, затем немного от ударных, потом еще бас... Однако, "
"вскоре становится очень сложно даже думать о том, как разместить это все во "
"времени, особенно если вы начнёте добавлять новые элементы."

#: 05.4-Threads.md:11
#, fuzzy
msgid ""
"What if Sonic Pi could weave things for you automatically? Well, it can, and y"
"ou do it with a special thing called a *thread*."
msgstr ""
"Что если бы Sonic Pi мог соединять партии инструментов за вас автоматически? В"
"ообще-то это возможно, для этого вам надо использовать специальную вещь, котор"
"ая называется *поток выполнения*."

#: 05.4-Threads.md:14
#, fuzzy
msgid "Infinite Loops"
msgstr "Бесконечные Циклы"

#: 05.4-Threads.md:16
#, fuzzy
msgid ""
"To keep this example simple, you'll have to imagine that this is a phat beat a"
"nd a killer bassline:"
msgstr ""
"Дабы не усложнять наш пример, представим, что это и есть крутой ритм и потряса"
"ющая бас-партия:"

#: 05.4-Threads.md:19
#, no-wrap
msgid ""
"loop do\n"
"  sample :drum_heavy_kick\n"
"  sleep 1\n"
"end\n"
"loop do\n"
"  use_synth :fm\n"
"  play 40, release: 0.2\n"
"  sleep 0.5\n"
"end"
msgstr ""
"loop do\n"
"  sample :drum_heavy_kick\n"
"  sleep 1\n"
"end\n"
"loop do\n"
"  use_synth :fm\n"
"  play 40, release: 0.2\n"
"  sleep 0.5\n"
"end"

#: 05.4-Threads.md:32
#, fuzzy
msgid ""
"As we've discussed previously, loops are like *black holes* for the program. O"
"nce you enter a loop you can never exit from it until you hit stop. How do we "
"play both loops at the same time? We have to tell Sonic Pi that we want to sta"
"rt something at the same time as the rest of the code. This is where threads c"
"ome to the rescue."
msgstr ""
"Как мы уже обсуждали, циклы - это *черные дыры* в программе. Как только начина"
"ет выполняться цикл, выйти из него уже нельзя, не нажав кнопку \"Остановить\". К"
"ак сыграть сразу оба цикла в одно и то же время? Надо сообщить Sonic Pi, что м"
"ы хотим выполнять что-то параллельно с остальной частью кода. Вот тут-то нам и"
" придут на помощь потоки выполнения."

#: 05.4-Threads.md:38
#, fuzzy
msgid "Threads to the Rescue"
msgstr "Спасительные Потоки"

#: 05.4-Threads.md:40
#, no-wrap
msgid ""
"in_thread do\n"
"  loop do\n"
"    sample :drum_heavy_kick\n"
"    sleep 1\n"
"  end\n"
"end\n"
"loop do\n"
"  use_synth :fm\n"
"  play 40, release: 0.2\n"
"  sleep 0.5\n"
"end"
msgstr ""
"in_thread do\n"
"  loop do\n"
"    sample :drum_heavy_kick\n"
"    sleep 1\n"
"  end\n"
"end\n"
"loop do\n"
"  use_synth :fm\n"
"  play 40, release: 0.2\n"
"  sleep 0.5\n"
"end"

#: 05.4-Threads.md:55
#, fuzzy
msgid ""
"By wrapping the first loop in an `in_thread` do/end block we tell Sonic Pi to "
"run the contents of the do/end block at *exactly* the same time as the next st"
"atement after the do/end block (which happens to be the second loop). Try it a"
"nd you'll hear both the drums and the bassline weaved together!"
msgstr ""
"Обернув первый цикл в do/end блок типа `in_thread`, мы заставляем Sonic Pi вып"
"олнять содержимое блока do/end *точно* в то же самое время, когда начинается с"
"ледующее выражение после блока do/end. В нашем примере таковым является второй"
" цикл. Попробуйте, и вы услышите, как ударные и бас переплетаются вместе!"

#: 05.4-Threads.md:61
#, fuzzy
msgid "Now, what if we wanted to add a synth on top. Something like:"
msgstr "Теперь, что если мы хотим добавить синт поверх. Что-то типа:"

#: 05.4-Threads.md:63
#, no-wrap
msgid ""
"in_thread do\n"
"  loop do\n"
"    sample :drum_heavy_kick\n"
"    sleep 1\n"
"  end\n"
"end\n"
"loop do\n"
"  use_synth :fm\n"
"  play 40, release: 0.2\n"
"  sleep 0.5\n"
"end\n"
"loop do\n"
"  use_synth :zawa\n"
"  play 52, release: 2.5, phase: 2, amp: 0.5\n"
"  sleep 2\n"
"end"
msgstr ""
"in_thread do\n"
"  loop do\n"
"    sample :drum_heavy_kick\n"
"    sleep 1\n"
"  end\n"
"end\n"
"loop do\n"
"  use_synth :fm\n"
"  play 40, release: 0.2\n"
"  sleep 0.5\n"
"end\n"
"loop do\n"
"  use_synth :zawa\n"
"  play 52, release: 2.5, phase: 2, amp: 0.5\n"
"  sleep 2\n"
"end"

#: 05.4-Threads.md:84
#, fuzzy
msgid ""
"Now we have the same problem as before. The first loop is played at the same t"
"ime as the second loop due to the `in_thread`. However, *the third loop is nev"
"er reached*. We therefore need another thread:"
msgstr ""
"Опять та же самая проблема. Первый цикл воспроизводится вместе со вторым из-за"
" `in_thread`. Но *третий цикл не достигается*. То есть нам нужен ещё один пото"
"к:"

#: 05.4-Threads.md:88
#, no-wrap
msgid ""
"in_thread do\n"
"  loop do\n"
"    sample :drum_heavy_kick\n"
"    sleep 1\n"
"  end\n"
"end\n"
"in_thread do\n"
"  loop do\n"
"    use_synth :fm\n"
"    play 40, release: 0.2\n"
"    sleep 0.5\n"
"  end\n"
"end\n"
"loop do\n"
"  use_synth :zawa\n"
"  play 52, release: 2.5, phase: 2, amp: 0.5\n"
"  sleep 2\n"
"end"
msgstr ""
"in_thread do\n"
"  loop do\n"
"    sample :drum_heavy_kick\n"
"    sleep 1\n"
"  end\n"
"end\n"
"in_thread do\n"
"  loop do\n"
"    use_synth :fm\n"
"    play 40, release: 0.2\n"
"    sleep 0.5\n"
"  end\n"
"end\n"
"loop do\n"
"  use_synth :zawa\n"
"  play 52, release: 2.5, phase: 2, amp: 0.5\n"
"  sleep 2\n"
"end"

#: 05.4-Threads.md:111
#, fuzzy
msgid "Runs as threads"
msgstr "Течёт, Как Поток"

#: 05.4-Threads.md:113
#, fuzzy
msgid ""
"What may surprise you is that when you press the Run button, you're actually c"
"reating a new thread for the code to run. This is why pressing it multiple tim"
"es will layer sounds over each other. As the runs themselves are threads, they"
" will automatically weave the sounds together for you."
msgstr ""
"Вас может это удивить, но при нажатии кнопки \"Выполнить\" также создаётся поток"
" выполнения кода. Вот почему её многократное нажатие наслаивает звуки друг на "
"друга. Запуски автоматически наслаивают звуки, потому что они сами являются по"
"токами."

#: 05.4-Threads.md:119
#, fuzzy
msgid "Scope"
msgstr "Область Видимости"

#: 05.4-Threads.md:121
#, fuzzy
msgid ""
"As you learn how to master Sonic Pi, you'll learn that threads are the most im"
"portant building blocks for your music. One of the important jobs they have is"
" to isolate the notion of *current settings* from other threads. What does thi"
"s mean? Well, when you switch synths using `use_synth` you're actually just sw"
"itching the synth in the *current thread* - no other thread will have their sy"
"nth switched. Let's see this in action:"
msgstr ""
"По мере овладевания секретами мастерства Sonic Pi вы узнаете, что потоки - это"
" самые важные строительные блоки вашей музыки. Не последним их качеством являе"
"тся способность изолировать от других потоков то, что называется *текущей уста"
"новкой*. Что это значит? Ну, когда вы переключаете синт при помощи `use_synth`"
", на самом деле вы изменяете синт в *текущем потоке* - ни в одном другом поток"
"е он не изменится. Давайте посмотрим на это в действии:"

#: 05.4-Threads.md:129
#, no-wrap
msgid ""
"play 50\n"
"sleep 1\n"
"in_thread do\n"
"  use_synth :tb303\n"
"  play 50\n"
"end\n"
"sleep 1\n"
"play 50"
msgstr ""
"play 50\n"
"sleep 1\n"
"in_thread do\n"
"  use_synth :tb303\n"
"  play 50\n"
"end\n"
"sleep 1\n"
"play 50"

#: 05.4-Threads.md:142
#, fuzzy
msgid ""
"Notice how the middle sound was different to the others? The `use_synth` state"
"ment only affected the thread it was in and not the outer main run thread."
msgstr ""
"Обратите внимание, как звук в середине отличается от остальных. Команда `use_s"
"ynth` применилась только к тому потоку, где она была выполнена, а не к окружаю"
"щему главному потоку выполнения программы."

#: 05.4-Threads.md:146
#, fuzzy
msgid "Inheritance"
msgstr "Наследование"

#: 05.4-Threads.md:148
#, fuzzy
msgid ""
"When you create a new thread with `in_thread`, the new thread will automatical"
"ly inherit all of the current settings from the current thread. Let's see that"
":"
msgstr ""
"Когда вы создаёте новый поток, вызывая `in_thread`, то он автоматически наслед"
"ует все текущие настройки из родительского потока. Проверим это:"

#: 05.4-Threads.md:152
#, no-wrap
msgid ""
"use_synth :tb303\n"
"play 50\n"
"sleep 1\n"
"in_thread do\n"
"  play 55\n"
"end"
msgstr ""
"use_synth :tb303\n"
"play 50\n"
"sleep 1\n"
"in_thread do\n"
"  play 55\n"
"end"

#: 05.4-Threads.md:162
#, fuzzy
msgid ""
"Notice how the second note is played with the `:tb303` synth even though it wa"
"s played from a separate thread? Any of the settings modified with the various"
" `use_*` functions will behave in the same way."
msgstr ""
"Заметили, что вторая нота воспроизводится на `:tb303`, несмотря на то, что это"
" происходит в отдельном потоке? Любые регулировки, устанавливаемые различными "
"`use_*` функциями, будут вести себя аналогично."

#: 05.4-Threads.md:166
#, fuzzy
msgid ""
"When threads are created, they inherit all the settings from their parent but "
"they don't share any changes back."
msgstr ""
"При создании, потоки наследуют все установки от своего родителя, но любые посл"
"едующие изменения не имеют обратного эффекта."

#: 05.4-Threads.md:169
#, fuzzy
msgid "Naming Threads"
msgstr "Именование Потоков"

#: 05.4-Threads.md:171
#, fuzzy
msgid "Finally, we can give our threads names:"
msgstr "Наконец, мы можем называть наши потоки:"

#: 05.4-Threads.md:173
#, no-wrap
msgid ""
"in_thread(name: :bass) do\n"
"  loop do\n"
"    use_synth :prophet\n"
"    play chord(:e2, :m7).choose, release: 0.6\n"
"    sleep 0.5\n"
"  end\n"
"end\n"
"in_thread(name: :drums) do\n"
"  loop do\n"
"    sample :elec_snare\n"
"    sleep 1\n"
"  end\n"
"end"
msgstr ""
"in_thread(name: :bass) do\n"
"  loop do\n"
"    use_synth :prophet\n"
"    play chord(:e2, :m7).choose, release: 0.6\n"
"    sleep 0.5\n"
"  end\n"
"end\n"
"in_thread(name: :drums) do\n"
"  loop do\n"
"    sample :elec_snare\n"
"    sleep 1\n"
"  end\n"
"end"

#: 05.4-Threads.md:190
#, fuzzy
msgid ""
"Look at the log pane when you run this code. See how the log reports the name "
"of the thread with the message?"
msgstr ""
"Посмотрите на панель сообщений, когда этот код выполняется. Видите, как появля"
"ются сообщения, в которые включены имена потоков?"

#: 05.4-Threads.md:193
#, no-wrap
msgid ""
"[Run 36, Time 4.0, Thread :bass]\n"
" |- synth :prophet, {release: 0.6, note: 47}"
msgstr ""
"[Run 36, Time 4.0, Thread :bass]\n"
" |- synth :prophet, {release: 0.6, note: 47}"

#: 05.4-Threads.md:198
#, fuzzy
msgid "Only One Thread per Name Allowed"
msgstr "Каждый Поток Со Своим Именем"

#: 05.4-Threads.md:200
#, fuzzy
msgid ""
"One last thing to know about named threads is that only one thread of a given "
"name may be running at the same time. Let's explore this. Consider the followi"
"ng code:"
msgstr ""
"Последнее, что вам нужно узнать об именованных потоках, это то, что только оди"
"н поток с определённым именем может выполняться одновременно. Рассмотрим следу"
"ющий код:"

#: 05.4-Threads.md:204
#, no-wrap
msgid ""
"in_thread do\n"
"  loop do\n"
"    sample :loop_amen\n"
"    sleep sample_duration :loop_amen\n"
"  end\n"
"end"
msgstr ""
"in_thread do\n"
"  loop do\n"
"    sample :loop_amen\n"
"    sleep sample_duration :loop_amen\n"
"  end\n"
"end"

#: 05.4-Threads.md:213
#, fuzzy
msgid ""
"Go ahead and paste that into a buffer and press the Run button. Press it again"
" a couple of times. Listen to the cacophony of multiple amen breaks looping ou"
"t of time with each other. Ok, you can press Stop now."
msgstr ""
"Скопируйте этот фрагмент в пустой буфер редактора и нажмите кнопку \"Выполнить\""
". Нажмите её еще пару раз. Получилась какафония от того, что много повторений "
"амен-брейка смешались вместе. Ладно, нажимайте \"Остановить\"."

#: 05.4-Threads.md:217
#, fuzzy
msgid ""
"This is the behaviour we've seen again and again - if you press the Run button"
", sound layers on top of any existing sound. Therefore if you have a loop and "
"press the Run button three times, you'll have three layers of loops playing si"
"multaneously."
msgstr ""
"Это то самое поведение, которое нам не раз уже доводилось наблюдать. Если нажи"
"мать кнопку \"Выполнить\", то новый звук накладывается поверх уже играющего. Поэ"
"тому, если у вас есть цикл, и вы нажмёте кнопку \"Выполнить\" три раза, то получ"
"ится три слоя циклов, звучащих вместе."

#: 05.4-Threads.md:222
#, fuzzy
msgid "However, with named threads it is different:"
msgstr "Но ситуация меняется с именованными потоками:"

#: 05.4-Threads.md:224
#, no-wrap
msgid ""
"in_thread(name: :amen) do\n"
"  loop do\n"
"    sample :loop_amen\n"
"    sleep sample_duration :loop_amen\n"
"  end\n"
"end"
msgstr ""
"in_thread(name: :amen) do\n"
"  loop do\n"
"    sample :loop_amen\n"
"    sleep sample_duration :loop_amen\n"
"  end\n"
"end"

#: 05.4-Threads.md:233
#, fuzzy
msgid ""
"Try pressing the Run button multiple times with this code. You'll only ever he"
"ar one amen break loop. You'll also see this in the log:"
msgstr ""
"Теперь попробуте понажимать кнопку \"Выполнить\" с этим кодом. Вы услышите тольк"
"о один цикл амен-брейк. В сообщениях вы также увидите:"

#: 05.4-Threads.md:236
#, no-wrap
msgid "==> Skipping thread creation: thread with name :amen already exists."
msgstr ""
"==> Пропуск создания потока: thread, поток с именем :amen уже существует."

#: 05.4-Threads.md:240
#, fuzzy
msgid ""
"Sonic Pi is telling you that a thread with the name `:amen` is already playing"
", so it's not creating another."
msgstr ""
"Sonic Pi сообщает вам, что поток с именем `:amen` уже существует, так что он н"
"е создаст ещё одного такого же."

#: 05.4-Threads.md:243
#, fuzzy
msgid ""
"This behaviour may not seem immediately useful to you now - but it will be ver"
"y handy when we start to live code..."
msgstr ""
"Сейчас такое поведение может не показаться вам таким уж полезным. Но в дальней"
"шем вы ещё вспомните о нём, когда мы начнем лайвкодинг..."

#: 05.5-Functions.md:1
msgid "5.5 Functions"
msgstr "5.5 Функции"

#: 05.5-Functions.md:3
#, fuzzy
msgid "Functions"
msgstr "Функции"

#: 05.5-Functions.md:5
#, fuzzy
msgid ""
"Once you start writing lots of code, you may wish to find a way to organise an"
"d structure things to make them tidier and easier to understand. Functions are"
" a very powerful way to do this. They give us the ability to give a name to a "
"bunch of code. Let's take a look."
msgstr ""
"Когда вы станете писать большое количество кода, вам потребуется способ органи"
"зовать и структурировать элементы так, чтобы они выглядели более аккуратно, и "
"их было бы проще понять. Функции - это очень мощный инструмент достижения этой"
" цели. Они позволяют нам давать имена фрагментам кода. Посмотрим, как это рабо"
"тает."

#: 05.5-Functions.md:10
#, fuzzy
msgid "Defining functions"
msgstr "Определение Функций"

#: 05.5-Functions.md:12
#, no-wrap
msgid ""
"define :foo do\n"
"  play 50\n"
"  sleep 1\n"
"  play 55\n"
"  sleep 2\n"
"end"
msgstr ""
"define :foo do\n"
"  play 50\n"
"  sleep 1\n"
"  play 55\n"
"  sleep 2\n"
"end"

#: 05.5-Functions.md:21
#, fuzzy
msgid ""
"Here, we've defined a new function called `foo`. We do this with our old frien"
"d the do/end block and the magic word `define` followed by the name we wish to"
" give to our function. We didn't have to call it `foo`, we could have called i"
"t anything we want such as `bar`, `baz` or ideally something meaningful to you"
" like `main_section` or `lead_riff`."
msgstr ""
"Мы определили новую функцию, называющуюся `foo`. Мы сделали это при помощи наш"
"его старого знакомого - блока do/end и магического слова `define`, за которым "
"следует имя нашей функции. Необязательно было называть ее `foo`. Можно было пр"
"идумать какое угодно название, к примеру `bar` или `baz`. Но, вообще-то, лучше"
" всего, когда имя что-то означает, например `main_section` (главная секция) ил"
"и `lead_riff` (солирующий рифф)."

#: 05.5-Functions.md:27
#, fuzzy
msgid ""
"Remember to prepend a colon `:` to the name of your function when you define i"
"t."
msgstr ""
"Не забывайте ставить двоеточие `:` перед именем функции, когда вы определяете "
"её."

#: 05.5-Functions.md:30
#, fuzzy
msgid "Calling functions"
msgstr "Вызов Функций"

#: 05.5-Functions.md:32
#, fuzzy
msgid "Once we have defined our function we can call it by just writing its name:"
msgstr "Когда наша функция определена, мы можем вызвать её, просто написав её имя:"

#: 05.5-Functions.md:35
#, no-wrap
msgid ""
"define :foo do\n"
"  play 50\n"
"  sleep 1\n"
"  play 55\n"
"  sleep 0.5\n"
"end\n"
"foo\n"
"sleep 1\n"
"2.times do\n"
"  foo\n"
"end"
msgstr ""
"define :foo do\n"
"  play 50\n"
"  sleep 1\n"
"  play 55\n"
"  sleep 0.5\n"
"end\n"
"foo\n"
"sleep 1\n"
"2.times do\n"
"  foo\n"
"end"

#: 05.5-Functions.md:52
#, fuzzy
msgid ""
"We can even use `foo` inside iteration blocks or anywhere we may have written "
"`play` or `sample`. This gives us a great way to express ourselves and to crea"
"te new meaningful words for use in our compositions."
msgstr ""
"Можно использовать `foo` внутри повторяющихся блоков, а также везде, где мы мо"
"гли бы использовать `play` или `sample`. Это даёт нам отличный способ самовыра"
"жения и создания новых обозначений в наших композициях."

#: 05.5-Functions.md:56
#, fuzzy
msgid "Functions are remembered across runs"
msgstr "Функции Сохраняются Между Запусками"

#: 05.5-Functions.md:58
#, fuzzy
msgid ""
"So far, every time you've pressed the Run button, Sonic Pi has started from a "
"completely blank slate. It knows nothing except for what is in the buffer. You"
" can't reference code in another buffer or another thread. However, functions "
"change that. When you define a function, Sonic Pi *remembers* it. Let's try it"
". Delete all the code in your buffer and replace it with:"
msgstr ""
"Пока что, всякий раз при нажатии кнопки \"Выполнить\", Sonic Pi начинал с чистог"
"о листа. Ему не известно ничего, кроме того, что находится в буфере редактора."
" Нельзя ссылаться на код в другом буфере или другом потоке. Однако, функции ме"
"няют это. Когда вы определяете функцию, Sonic Pi *запоминает* ее. Попробуем. У"
"далите весь код в буфере и замените его вот на что:"

#: 05.5-Functions.md:65
#, no-wrap
msgid "foo"
msgstr "foo"

#: 05.5-Functions.md:69
#, fuzzy
msgid ""
"Press the Run button - and hear your function play. Where did the code go? How"
" did Sonic Pi know what to play? Sonic Pi just remembered your function - so e"
"ven after you deleted it from the buffer, it remembered what you had typed. Th"
"is behaviour only works with functions created using `define` (and `defonce`)."
msgstr ""
"Нажмите кнопку \"Выполнить\", и убедитесь, что ваша функция играет. Куда же проп"
"ал код? Откуда Sonic Pi знал, что играть? Он просто вспомнил вашу функцию даже"
" после её удаления из буфера. Он запомнил что вы напечатали. Это работает толь"
"ко с функциями, которые создаются при помощи `define` (и `defonce`)"

#: 05.5-Functions.md:75
#, fuzzy
msgid "Parameterised functions"
msgstr "Функции С Параметрами"

#: 05.5-Functions.md:77
#, fuzzy
msgid ""
"You might be interested in knowing that just like you can pass min and max val"
"ues to `rrand`, you can teach your functions to accept arguments. Let's take a"
" look:"
msgstr ""
"Вам, возможно, будет интересно узнать, что вашу функцию можно научить принимат"
"ь аргументы, прямо как `rrand` принимает значения минимума и максимума. Посмот"
"рим как это выглядит:"

#: 05.5-Functions.md:81
#, no-wrap
msgid ""
"define :my_player do |n|\n"
"  play n\n"
"end\n"
"my_player 80\n"
"sleep 0.5\n"
"my_player 90"
msgstr ""
"define :my_player do |n|\n"
"  play n\n"
"end\n"
"my_player 80\n"
"sleep 0.5\n"
"my_player 90"

#: 05.5-Functions.md:91
#, fuzzy
msgid ""
"This isn't very exciting, but it illustrates the point. We've created our own "
"version of `play` called `my_player` which is parameterised."
msgstr ""
"Пример не очень интересный, но он показывает, что имеется в виду. Мы создали н"
"ашу собственную версию `play` с параметрами и назвали её `my_player`."

#: 05.5-Functions.md:94
#, fuzzy
msgid ""
"The parameters need to go after the `do` of the `define` do/end block, surroun"
"ded by vertical goalposts `|` and separated by commas `,`. You may use any wor"
"ds you want for the parameter names."
msgstr ""
"Параметры должны описываться после ключевого слова `do` блока `define`. Они до"
"лжны быть окружены вертикальными стойками `|` и разделены запятыми `,`. Любые "
"слова могут служить именами параметров."

#: 05.5-Functions.md:98
#, fuzzy
msgid ""
"The magic happens inside the `define` do/end block. You may use the parameter "
"names as if they were real values. In this example I'm playing note `n`. You c"
"an consider the parameters as a kind of promise that when the code runs, they "
"will be replaced with actual values. You do this by passing a parameter to the"
" function when you call it. I do this with `my_player 80` to play note 80. Ins"
"ide the function definition, `n` is now replaced with 80, so `play n` turns in"
"to `play 80`. When I call it again with `my_player 90`, `n` is now replaced wi"
"th 90, so `play n` turns into `play 90`."
msgstr ""
"Магия происходит внутри блока `define`. Там можно использовать имена параметро"
"в, как если бы они были настоящими значениями. В этом примере я проигрываю нот"
"у `n`. Вы можете думать о параметрах, как о неких обещаниях о том, что при вып"
"олнении кода они будут заменены их значениями. Это достигается передачей парам"
"етра функции при её вызове. Чтобы сыграть ноту 80, я пишу `my_player 80`. Тогд"
"а внутри определения функции `n` меняется на 80, так что `play n` превращается"
" в `play 80`. В следующий раз, когда я вызываю `my_player 90`, вместо `n` появ"
"ляется 90, поэтому `play n` становится `play 90`."

#: 05.5-Functions.md:108
#, fuzzy
msgid "Let's see a more interesting example:"
msgstr "Рассмотрим что-нибудь поинтереснее:"

#: 05.5-Functions.md:110
#, no-wrap
#, fuzzy
msgid ""
"define :chord_player do |root, repeats| \n"
"  repeats.times do\n"
"    play chord(root, :minor), release: 0.3\n"
"    sleep 0.5\n"
"  end\n"
"end\n"
"chord_player :e3, 2\n"
"sleep 0.5\n"
"chord_player :a3, 3\n"
"chord_player :g3, 4\n"
"sleep 0.5\n"
"chord_player :e3, 3"
msgstr ""
"define :chord_player do |root, repeats|\n"
"  repeats.times do\n"
"    play chord(root, :minor), release: 0.3\n"
"    sleep 0.5\n"
"  end\n"
"end\n"
"chord_player :e3, 2\n"
"sleep 0.5\n"
"chord_player :a3, 3\n"
"chord_player :g3, 4\n"
"sleep 0.5\n"
"chord_player :e3, 3"

#: 05.5-Functions.md:126
#, fuzzy
msgid ""
"Here I used `repeats` as if it was a number in the line `repeats.times do`. I "
"also used `root` as if it was a note name in my call to `play`."
msgstr ""
"Я использовал переменную `repeats`, как если бы она была числом в строке `repe"
"ats.times do`. Ещё я использовал `root` в качестве названия ноты для `play`."

#: 05.5-Functions.md:129
#, fuzzy
msgid ""
"See how we're able to write something very expressive and easy to read by movi"
"ng a lot of our logic into a function!"
msgstr ""
"Видите, как можно писать нечто очень выразительное и в то же время простое для"
" чтения, если перенести большую часть логики в функцию!"

#: 05.6-Variables.md:1
msgid "5.6 Variables"
msgstr "5.6 Переменные"

#: 05.6-Variables.md:3
#, fuzzy
msgid "Variables"
msgstr "Переменные"

#: 05.6-Variables.md:5
#, fuzzy
msgid ""
"A useful thing to do in your code is to create names for things. Sonic Pi make"
"s this very easy: you write the name you wish to use, an equal sign (`=`), the"
"n the thing you want to remember:"
msgstr ""
"Присвоение имён полезно для вашего кода. С Sonic Pi это очень просто. Вы пишет"
"е желаемое имя, знак равенства, а затем то, что нужно запомнить:"

#: 05.6-Variables.md:9
#, no-wrap
msgid "sample_name = :loop_amen"
msgstr "sample_name = :loop_amen"

#: 05.6-Variables.md:13
#, fuzzy
msgid ""
"Here, we've 'remembered' the symbol `:loop_amen` in the variable `sample_name`"
". We can now use `sample_name` everywhere we might have used `:loop_amen`. For"
" example:"
msgstr ""
"В этом примере мы \"запомнили\" обозначение `:loop_amen` в переменной `sample_na"
"me`. Теперь мы можем пользоваться `sample_name` везде, где мы могли бы указать"
" `:loop_amen`. Например:"

#: 05.6-Variables.md:17
#, no-wrap
msgid ""
"sample_name = :loop_amen\n"
"sample sample_name"
msgstr ""
"sample_name = :loop_amen\n"
"sample sample_name"

#: 05.6-Variables.md:22
#, fuzzy
msgid ""
"There are three main reasons for using variables in Sonic Pi: communicating me"
"aning, managing repetition and capturing the results of things."
msgstr ""
"Есть три главных причины для использования переменных в Sonic Pi: присвоение з"
"начения, управление повторами и захват результатов операций."

#: 05.6-Variables.md:26
#, fuzzy
msgid "Communicating Meaning"
msgstr "Присвоение Значения"

#: 05.6-Variables.md:28
#, fuzzy
msgid ""
"When you write code it's easy to just think you're telling the computer how to"
" do stuff - as long as the computer understands it's OK. However, it's importa"
"nt to remember that it's not just the computer that reads the code. Other peop"
"le may read it too and try to understand what's going on. Also, you're likely "
"to read your own code in the future and try to understand what's going on. Alt"
"hough it might seem obvious to you now - it might not be so obvious to others "
"or even your future self!"
msgstr ""
"Когда вы пишете код, вы говорите компьютеру сделать что-то. Пока компьютер это"
" понимает - всё в порядке. Но всё же важно помнить, что код читает не только к"
"омпьютер. Другие люди, возможно, захотят тоже прочесть его и попробовать разоб"
"раться, что в нём происходит. Скорее всего и вы сами будете читать и пытаться "
"понять свой собственный код в будущем. Сейчас всё кажется очевидным, но для ос"
"тальных, или же для вас самих в будущем, это может быть не так!"

#: 05.6-Variables.md:36
#, fuzzy
msgid ""
"One way to help others understand what your code is doing is to write comments"
" (as we saw in a previous section). Another is to use meaningful variable name"
"s. Look at this code:"
msgstr ""
"Одним из способов помочь другим понять, что делает ваш код, - это оставлять ко"
"мментарии (как мы это видели в предыдущей главе). Ещё один способ - давать осм"
"ысленные имена переменным. Посмотрите на этот код:"

#: 05.6-Variables.md:40
#, no-wrap
msgid "sleep 1.7533"
msgstr "sleep 1.7533"

#: 05.6-Variables.md:44
#, fuzzy
msgid ""
"Why does it use the number `1.7533`? Where did this number come from? What doe"
"s it mean? However, look at this code:"
msgstr ""
"Зачем указано число `1.7533`? Откуда оно взялось? Что оно означает? Теперь взг"
"ляните на этот пример:"

#: 05.6-Variables.md:47
#, no-wrap
msgid ""
"loop_amen_duration = 1.7533\n"
"sleep loop_amen_duration"
msgstr ""
"loop_amen_duration = 1.7533\n"
"sleep loop_amen_duration"

#: 05.6-Variables.md:52
#, fuzzy
msgid ""
"Now, it's much clearer what `1.7533` means: it's the duration of the sample `:"
"loop_amen`! Of course, you might say why not simply write:"
msgstr ""
"Вот теперь стало ясно, что значит `1.7533`. Это же продолжительность сэмпла `:"
"loop_amen`! Конечно, вы могли бы заметить, почему бы просто не написать так:"

#: 05.6-Variables.md:55
#, no-wrap
msgid "sleep sample_duration(:loop_amen)"
msgstr "sleep sample_duration(:loop_amen)"

#: 05.6-Variables.md:59
#, fuzzy
msgid "Which, of course, is a very nice way of communicating the intent of the code."
msgstr "Это, безусловно, очень хороший способ выразить намерения кода."

#: 05.6-Variables.md:62
#, fuzzy
msgid "Managing Repetition"
msgstr "Управление Повторами"

#: 05.6-Variables.md:64
#, fuzzy
msgid ""
"Often you see a lot of repetition in your code and when you want to change thi"
"ngs, you have to change it in a lot of places. Take a look at this code:"
msgstr ""
"Часто вы видите много повторений в своем коде. Когда необходимо что-то поменят"
"ь, то делать это приходится во многих местах. Посмотрите на следующее:"

#: 05.6-Variables.md:68
#, no-wrap
msgid ""
"sample :loop_amen\n"
"sleep sample_duration(:loop_amen)\n"
"sample :loop_amen, rate: 0.5\n"
"sleep sample_duration(:loop_amen, rate: 0.5)\n"
"sample :loop_amen\n"
"sleep sample_duration(:loop_amen)"
msgstr ""
"sample :loop_amen\n"
"sleep sample_duration(:loop_amen)\n"
"sample :loop_amen, rate: 0.5\n"
"sleep sample_duration(:loop_amen, rate: 0.5)\n"
"sample :loop_amen\n"
"sleep sample_duration(:loop_amen)"

#: 05.6-Variables.md:77
#, fuzzy
msgid ""
"We're doing a lot of things with `:loop_amen`! What if we wanted to hear what "
"it sounded like with another loop sample such as `:loop_garzul`? We'd have to "
"find and replace all `:loop_amen`s with `:loop_garzul`. That might be fine if "
"you have lots of time - but what if you're performing on stage? Sometimes you "
"don't have the luxury of time - especially if you want to keep people dancing."
msgstr ""
"Много чего мы делаем с `:loop_amen`! Но что если мы захотим послушать как это "
"будет звучать с другим замкнутым сэмплом, таким как `:loop_garzul`? Пришлось б"
"ы найти и заменить все `:loop_amen` на `:loop_garzul`. Этим можно заняться, ес"
"ли больше нечего делать. А как насчет живого выступления? Иногда время - это н"
"епозволительная роскошь. Особенно, если вы хотите, чтобы люди продолжали танце"
"вать."

#: 05.6-Variables.md:84
#, fuzzy
msgid "What if you'd written your code like this:"
msgstr "Ну, а если бы вы записали свой код так:"

#: 05.6-Variables.md:86
#, no-wrap
msgid ""
"sample_name = :loop_amen\n"
"sample sample_name\n"
"sleep sample_duration(sample_name)\n"
"sample sample_name, rate: 0.5\n"
"sleep sample_duration(sample_name, rate: 0.5)\n"
"sample sample_name\n"
"sleep sample_duration(sample_name)"
msgstr ""
"sample_name = :loop_amen\n"
"sample sample_name\n"
"sleep sample_duration(sample_name)\n"
"sample sample_name, rate: 0.5\n"
"sleep sample_duration(sample_name, rate: 0.5)\n"
"sample sample_name\n"
"sleep sample_duration(sample_name)"

#: 05.6-Variables.md:96
#, fuzzy
msgid ""
"Now, that does exactly the same as above (try it). It also gives us the abilit"
"y to just change one line `sample_name = :loop_amen` to `sample_name = :loop_g"
"arzul` and we change it in many places through the magic of variables."
msgstr ""
"Он делает совершенно то же самое (попробуйте сами). Зато тут есть возможность "
"заменить строку `sample_name = :loop_amen` на `sample_name = :loop_garzul`, чт"
"о приведёт к реальным изменениям во многих местах. Вот что даёт нам магия пере"
"менных."

#: 05.6-Variables.md:101
#, fuzzy
msgid "Capturing Results"
msgstr "Захват Результатов"

#: 05.6-Variables.md:103
#, fuzzy
msgid ""
"Finally, a good motivation for using variables is to capture the results of th"
"ings. For example, you may wish to do things with the duration of a sample:"
msgstr ""
"Наконец, хороший повод использовать переменные - захватывать результат чего-ли"
"бо. К примеру, вам может понадобится что-то сделать с продолжительностью сэмпл"
"а:"

#: 05.6-Variables.md:107
#, no-wrap
msgid "sd = sample_duration(:loop_amen)"
msgstr "sd = sample_duration(:loop_amen)"

#: 05.6-Variables.md:111
#, fuzzy
msgid "We can now use `sd` anywhere we need the duration of the `:loop_amen` sample."
msgstr ""
"Теперь можно вставлять `sd` везде, где нам нужна длительность сэмпла `:loop_am"
"en`."

#: 05.6-Variables.md:114
#, fuzzy
msgid ""
"Perhaps more importantly, a variable allows us to capture the result of a call"
" to `play` or `sample`:"
msgstr ""
"Вероятно, ещё более важно то, что переменная разрешает нам сохранить результат"
" вызова `play` или `sample`:"

#: 05.6-Variables.md:117
#, no-wrap
msgid "s = play 50, release: 8"
msgstr "s = play 50, release: 8"

#: 05.6-Variables.md:121
#, fuzzy
msgid ""
"Now we have caught and remembered `s` as a variable, which allows us to contro"
"l the synth as it is running:"
msgstr ""
"Мы захватили и запомнили `s` как переменную, которая позволяет управлять синто"
"м, пока он играет:"

#: 05.6-Variables.md:124
#, no-wrap
msgid ""
"s = play 50, release: 8\n"
"sleep 2\n"
"control s, note: 62"
msgstr ""
"s = play 50, release: 8\n"
"sleep 2\n"
"control s, note: 62"

#: 05.6-Variables.md:130
#, fuzzy
msgid "We'll look into controlling synths in more detail in a later section."
msgstr "В следующей главе мы рассмотрим подробнее управление синтами."

#: 05.6-Variables.md:133
#, fuzzy
msgid "Warning: Variables and Threads"
msgstr "Переменные"

#: 05.6-Variables.md:135
msgid ""
"Whilst variables are great for giving things names and capturing the results o"
"f things, it is important to know that they should typically only be used loca"
"lly within a thread. For example, *don't do this*:"
msgstr ""
"Хотя переменные хороши для присвоения имени и сохранения результатов, важно "
"знать что они обычно должны использоваться в потоке. Например,  *не делайте "
"так*:"

#: 05.6-Variables.md:139
#, no-wrap
msgid ""
"a = (ring 6, 5, 4, 3, 2, 1)\n"
"live_loop :shuffled do\n"
"  a = a.shuffle\n"
"  sleep 0.5\n"
"end\n"
"live_loop :sorted do\n"
"  a = a.sort\n"
"  sleep 0.5\n"
"  puts \"sorted: \", a\n"
"end"
msgstr ""
"a = (ring 6, 5, 4, 3, 2, 1)\n"
"live_loop :shuffled do\n"
"  a = a.shuffle\n"
"  sleep 0.5\n"
"end\n"
"live_loop :sorted do\n"
"  a = a.sort\n"
"  sleep 0.5\n"
"  puts \"sorted: \", a\n"
"end"

#: 05.6-Variables.md:154
msgid ""
"In the above example we assign a ring of numbers to a variable `a` and then us"
"ed it within two separate `live_loop`s. In the first live loop every `0.5`s we"
" sort the ring (to `(ring 1, 2, 3, 4, 5, 6)`) and then print it out to the log"
". If you run the code, you'll find that the printed list *is not always sorted"
"!*. This may surprise you - especially that sometimes the list is printed as s"
"orted, and sometimes it is not. This is called non-deterministic behaviour and"
" is the result of a rather nasty problem called a race-condition. The problem "
"is due to the fact that the second live loop is also manipulating the list (in"
" this case shuffling it) and by the time the list is printed, sometimes it has"
" just been sorted and sometimes it has just been shuffled. Both live loops are"
" racing to do something different to the same variable and every time round a "
"different loop 'wins'."
msgstr ""
"В примере выше мы присвоили ряд чисел переменной 'a' и затем использовали её "
"в  двух отдельных 'live_loop`s'.  В первом живом цикле каждые '0,5' секунды "
"мы сортируем ряд чисел (1, 2, 3, 4, 5, 6) и выводим его на экран.  Если ты "
"запустишь код, ты увидишь, что выведенный список *не всегда отсортирован!*. "
"Это может быть для тебя сюрпризом, ведь иногда список выводится "
"отсортированным, а иногда нет. Это называется недетерминированным поведением "
"и является результатом неприятной проблемы называемой гонкой состояний.  "
"Проблема заключается в том, что второй живой цикл также работает со списком ("
"в данном случае перемешивает его) и на момент вывода на экран ряд может быть "
"как отсортирован, так и перемешан. Оба живых цикла  соревнуются сделать "
"разные вещи с одной переменной и каждый раз 'побеждает' разный цикл."

#: 05.6-Variables.md:168
msgid ""
"There are two solutions to this. Firstly, *don't use the same variable in mult"
"iple live loops or threads*. For example, the following code will always print"
" a sorted list as each live loop has its own separate variable:"
msgstr ""
"Есть два решения. Первое: *не использовать одну переменную в разных живых "
"циклах или потоках*. Например, код ниже всегда выводит отсортированный "
"список, поскольку каждый живой цикл имеет собственную отдельную переменную:"

#: 05.6-Variables.md:173
#, no-wrap
msgid ""
"live_loop :shuffled do\n"
"  a = (ring 6, 5, 4, 3, 2, 1)\n"
"  a = a.shuffle\n"
"  sleep 0.5\n"
"end\n"
"live_loop :sorted do\n"
"  a = (ring 6, 5, 4, 3, 2, 1)\n"
"  a = a.sort\n"
"  sleep 0.5\n"
"  puts \"sorted: \", a\n"
"end"
msgstr ""
"live_loop :shuffled do\n"
"  a = (ring 6, 5, 4, 3, 2, 1)\n"
"  a = a.shuffle\n"
"  sleep 0.5\n"
"end\n"
"live_loop :sorted do\n"
"  a = (ring 6, 5, 4, 3, 2, 1)\n"
"  a = a.sort\n"
"  sleep 0.5\n"
"  puts \"sorted: \", a\n"
"end"

#: 05.6-Variables.md:188
msgid ""
"However, sometimes we do want to share things across threads. For example, the"
" current key, BPM, synth etc. In these cases, the solution is to use Sonic Pi'"
"s special thread-safe state system via the fns `get` and `set`. This is discus"
"sed later on in section 10."
msgstr ""
"Однако, иногда мы хотим поделиться чем-то между потоками. Например, текущей "
"тональностью, BMP, синтом и т.д. В этом случае решением будет "
"воспользоваться специальными потоко-безопасными состояниями системы Sonic Pi "
"через функции 'get' и 'set. Это будет осуждаться в разделе 10."

#: 05.7-Thread-Synchronisation.md:1
msgid "5.7 Thread Synchronisation"
msgstr "5.7 Синхронизация Потоков"

#: 05.7-Thread-Synchronisation.md:3
#, fuzzy
msgid "Thread Synchronisation"
msgstr "Синхронизация Потоков"

#: 05.7-Thread-Synchronisation.md:5
#, fuzzy
msgid ""
"Once you have become sufficiently advanced live coding with a number of functi"
"ons and threads simultaneously, you've probably noticed that it's pretty easy "
"to make a mistake in one of the threads which kills it. That's no big deal, be"
"cause you can easily restart the thread by hitting Run. However, when you rest"
"art the thread it is now *out of time* with the original threads."
msgstr ""
"Когда у вас начнёт достаточно хорошо получаться лайвкодинг с большим количеств"
"ом потоков, выполняющихся одновременно, вы, скорее всего, заметите, что очень "
"легко допустить ошибку, которая может прервать поток. Ничего страшного в этом "
"нет, так как поток может быть перезапущен простым нажатием кнопки \"Выполнить\"."
" Однако, после перезапуска потока он будет играть *невпопад* с другими."

#: 05.7-Thread-Synchronisation.md:12
#, fuzzy
msgid "Inherited Time"
msgstr "Унаследованное Время"

#: 05.7-Thread-Synchronisation.md:14
#, fuzzy
msgid ""
"As we discussed earlier, new threads created with `in_thread` inherit all of t"
"he settings from the parent thread. This includes the current time. This means"
" that threads are always in time with each other when started simultaneously."
msgstr ""
"Как мы обсуждали ранее, новые потоки, созданные при помощи `in_thread` наследу"
"ют все настройки от родительского потока. Они включают и текущую метку времени"
". Это означает, что потоки всегда синхронизированы друг с другом после одновре"
"менного их запуска."

#: 05.7-Thread-Synchronisation.md:19
#, fuzzy
msgid ""
"However, when you start a thread on its own it starts with its own time which "
"is unlikely to be in sync with any of the other currently running threads."
msgstr ""
"Но, когда поток стартует отдельно от родительского, внутри него ведётся собств"
"енный отсчет времени, который вряд ли совпадёт с каким-либо из других активных"
" потоков."

#: 05.7-Thread-Synchronisation.md:23
#, fuzzy
msgid "Cue and Sync"
msgstr "Функции cue и sync"

#: 05.7-Thread-Synchronisation.md:25
#, fuzzy
msgid ""
"Sonic Pi provides a solution to this problem with the functions `cue` and `syn"
"c`."
msgstr "В Sonic Pi решением этой проблемы являются функции `cue` и `sync`."

#: 05.7-Thread-Synchronisation.md:28
#, fuzzy
msgid ""
"`cue` allows us to send out heartbeat messages to all other threads. By defaul"
"t the other threads aren't interested and ignore these heartbeat messages. How"
"ever, you can easily register interest with the `sync` function."
msgstr ""
"`cue` позволяет нам отправлять сигнал пульса другим потокам. По умолчанию, дру"
"гие потоки не слушают и пропускают эти сообщения. Однако, поток может легко за"
"явить о своей заинтересованности, вызвав функцию `sync`."

#: 05.7-Thread-Synchronisation.md:33
#, fuzzy
msgid ""
"The important thing to be aware of is that `sync` is similar to `sleep` in tha"
"t it stops the current thread from doing anything for a period of time. Howeve"
"r, with `sleep` you specify how long you want to wait while with `sync` you do"
"n't know how long you will wait - as `sync` waits for the next `cue` from anot"
"her thread which may be soon or a long time away."
msgstr ""
"Важно осознавать, что функция `sync` похожа на `sleep`, ведь она останавливает"
" текущий поток, и тот некоторое время не выполняется. Для `sleep` время просто"
"я указывается явно, но вызвав `sync`, вы не знаете сколько времени оно продлит"
"ся, потому что `sync` ждёт следующий `cue` от другого потока. Это может случит"
"ься скоро, а может и нет."

#: 05.7-Thread-Synchronisation.md:40
#, fuzzy
msgid "Let's explore this in a little more detail:"
msgstr "Давайте выясним немного больше деталей:"

#: 05.7-Thread-Synchronisation.md:42
#, no-wrap
msgid ""
"in_thread do\n"
"  loop do\n"
"    cue :tick\n"
"    sleep 1\n"
"  end\n"
"end\n"
"in_thread do\n"
"  loop do\n"
"    sync :tick\n"
"    sample :drum_heavy_kick\n"
"  end\n"
"end"
msgstr ""
"in_thread do\n"
"  loop do\n"
"    cue :tick\n"
"    sleep 1\n"
"  end\n"
"end\n"
"in_thread do\n"
"  loop do\n"
"    sync :tick\n"
"    sample :drum_heavy_kick\n"
"  end\n"
"end"

#: 05.7-Thread-Synchronisation.md:58
#, fuzzy
msgid ""
"Here we have two threads - one acting like a metronome, not playing any sounds"
" but sending out `:tick` heartbeat messages every beat. The second thread is s"
"ynchronising on `tick` messages and when it receives one it inherits the time "
"of the `cue` thread and continues running."
msgstr ""
"Здесь у нас есть два потока. Один работает как метроном. Он не играет никаких "
"звуков, только отправляет `:tick` сигнал каждую долю такта. Второй поток синхр"
"онизуется с сообщениями `tick`. Когда он получает `:tick` сообщение, то наслед"
"ует временную отметку потока, вызвавшего `cue`, и продолжает выполнение."

#: 05.7-Thread-Synchronisation.md:63
#, fuzzy
msgid ""
"As a result, we will hear the `:drum_heavy_kick` sample exactly when the other"
" thread sends the `:tick` message, even if the two threads didn't start their "
"execution at the same time:"
msgstr ""
"В результате мы будем слышать сэмпл `:drum_heavy_kick` в тот самый момент, ког"
"да другой поток отправляет `:tick` сигнал. Даже если два этих потока стартовал"
"и не одновременно, это всё равно будет происходить:"

#: 05.7-Thread-Synchronisation.md:67
#, no-wrap
msgid ""
"in_thread do\n"
"  loop do\n"
"    cue :tick\n"
"    sleep 1\n"
"  end\n"
"end\n"
"sleep(0.3)\n"
"in_thread do\n"
"  loop do\n"
"    sync :tick\n"
"    sample :drum_heavy_kick\n"
"  end\n"
"end"
msgstr ""
"in_thread do\n"
"  loop do\n"
"    cue :tick\n"
"    sleep 1\n"
"  end\n"
"end\n"
"sleep(0.3)\n"
"in_thread do\n"
"  loop do\n"
"    sync :tick\n"
"    sample :drum_heavy_kick\n"
"  end\n"
"end"

#: 05.7-Thread-Synchronisation.md:85
#, fuzzy
msgid ""
"That naughty `sleep` call would typically make the second thread out of phase "
"with the first. However, as we're using `cue` and `sync`, we automatically syn"
"c the threads bypassing any accidental timing offsets."
msgstr ""
"Результатом вызова `sleep` будет расхождение второго потока с первым. Однако, "
"так как мы используем `cue` и `sync`, то мы автоматически синхронизируем поток"
"и и избегаем любых случайных временных сдвигов."

#: 05.7-Thread-Synchronisation.md:90
#, fuzzy
msgid "Cue Names"
msgstr "Имена Сигналов"

#: 05.7-Thread-Synchronisation.md:92
#, fuzzy
msgid ""
"You are free to use whatever name you'd like for your `cue` messages - not jus"
"t `:tick`. You just need to ensure that any other threads are `sync`ing on the"
" correct name - otherwise they'll be waiting for ever (or at least until you p"
"ress the Stop button)."
msgstr ""
"Для сигналов `cue` можно использовать любые названия, а не только `:tick`. Про"
"сто следите за тем, чтобы все остальные потоки вызывали `sync` с правильным им"
"енем. Иначе они остановятся навсегда (или, по крайней мере, пока вы не нажмёте"
" кнопку \"Остановить\")."

#: 05.7-Thread-Synchronisation.md:97
#, fuzzy
msgid "Let's play with a few `cue` names:"
msgstr "Попробуем что-нибудь с несколькими названиями `cue`:"

#: 05.7-Thread-Synchronisation.md:99
#, no-wrap
#, fuzzy
msgid ""
"in_thread do\n"
"  loop do \n"
"    cue [:foo, :bar, :baz].choose\n"
"    sleep 0.5\n"
"  end\n"
"end\n"
"in_thread do\n"
"  loop do \n"
"    sync :foo \n"
"    sample :elec_beep\n"
"  end\n"
"end\n"
"in_thread do\n"
"  loop do\n"
"    sync :bar\n"
"    sample :elec_flip\n"
"  end\n"
"end\n"
"in_thread do\n"
"  loop do\n"
"    sync :baz\n"
"    sample :elec_blup\n"
"  end\n"
"end"
msgstr ""
"in_thread do\n"
"  loop do\n"
"    cue [:foo, :bar, :baz].choose\n"
"    sleep 0.5\n"
"  end\n"
"end\n"
"in_thread do\n"
"  loop do\n"
"    sync :foo\n"
"    sample :elec_beep\n"
"  end\n"
"end\n"
"in_thread do\n"
"  loop do\n"
"    sync :bar\n"
"    sample :elec_flip\n"
"  end\n"
"end\n"
"in_thread do\n"
"  loop do\n"
"    sync :baz\n"
"    sample :elec_blup\n"
"  end\n"
"end"

#: 05.7-Thread-Synchronisation.md:129
#, fuzzy
msgid ""
"Here we have a main `cue` loop which is randomly sending one of the heartbeat "
"names `:foo`, `:bar` or `:baz`. We then also have three loop threads syncing o"
"n each of those names independently and then playing a different sample. The n"
"et effect is that we hear a sound every 0.5 beats as each of the `sync` thread"
"s is randomly synced with the `cue` thread and plays its sample."
msgstr ""
"Тут у нас есть цикл с функцией `cue`, отправляющей пульс. Случайным образом эт"
"от пульс может быть назван `:foo`, `:bar` или `:baz`. Ещё есть три цикла в пот"
"оках, которые синхронизируются с каждым из этих сигналов независимо и воспроиз"
"водят разные сэмплы. Чистый эффект от этого кода в том, что каждые полсекунды "
"мы слышим звук, так как каждый из потоков `sync` случайным образом синхронизир"
"уется с потоком `cue` и проигрывает свой сэмпл."

#: 05.7-Thread-Synchronisation.md:136
#, fuzzy
msgid ""
"This of course also works if you order the threads in reverse as the `sync` th"
"reads will simply sit and wait for the next `cue`."
msgstr ""
"Конечно же, код будет работать даже если расположить потоки в обратном порядке"
", поскольку потоки будут дожидаться следующего `cue`."

#: 06-FX.md:1
msgid "6 FX"
msgstr "6 FX"

#: 06-FX.md:3
#, fuzzy
msgid "Studio FX"
msgstr "Студийные Эффекты"

#: 06-FX.md:5
#, fuzzy
msgid ""
"One of the most rewarding and fun aspects of Sonic Pi is the ability to easily"
" add studio effects to your sounds. For example, you may wish to add some reve"
"rb to parts of your piece, or some echo or perhaps even distort or wobble your"
" basslines."
msgstr ""
"Одной из наиболее стоящих и весёлых вещей в Sonic Pi является возможность легк"
"о добавить студийные эффекты к вашим звукам. Например, можно добавить ревербер"
"ацию к частям вашей пьесы или эхо, или даже исказить или заставить колебаться "
"ваши басы."

#: 06-FX.md:10
#, fuzzy
msgid ""
"Sonic Pi provides a very simple yet powerful way of adding FX. It even allows "
"you to chain them (so you can pass your sounds through distortion, then echo a"
"nd then reverb) and also control each individual FX unit with opts (in a simil"
"ar way to giving params to synths and samples). You can even modify the opts o"
"f the FX whilst it's still running. So, for example, you could increase the re"
"verb on your bass throughout the track..."
msgstr ""
"Sonic Pi даёт очень простой, но вместе с тем очень мощный способ добавления эф"
"фектов. Можно даже строить цепочки из них (таким образом можно пропустить звук"
" через дисторшн, потом эхо и в конце реверберацию) и настраивать каждый из них"
" по отдельности при помощи регулировок (как синты и сэмплы). Можно даже менять"
" параметры эффектов пока они используются. Так, к примеру, реверберация баса м"
"ожет усиливаться в течение трэка..."

#: 06-FX.md:18
#, fuzzy
msgid "Guitar Pedals"
msgstr "Гитарные Педали"

#: 06-FX.md:20
#, fuzzy
msgid ""
"If all of this sounds a bit complicated, don't worry. Once you play around wit"
"h it a little, it will all become quite clear. Before you do though, a simple "
"analogy is that of guitar FX pedals. There are many kinds of FX pedals you can"
" buy. Some add reverb, others distort etc. A guitarist will plug his or her gu"
"itar into one FX pedal - i.e. distortion -, then take another cable and connec"
"t (chain) a reverb pedal. The output of the reverb pedal can then be plugged i"
"nto the amplifier:"
msgstr ""
"Не переживайте, если это кажется вам слишком сложным. Всё станет намного понят"
"нее после того, как вы попробуете это сами. Но пока полезной аналогией будет с"
"лужить гитарный эффект. Есть много видов гитарных эффектов. Одни добавляют рев"
"ерберацию, другие искажение и так далее. Гитарист подключает свой инструмент к"
" педали, например дисторшн, затем другим кабелем добавляет в цепь педаль ревер"
"берации. После этого выход реверберации соединяется с усилителем:"

#: 06-FX.md:29
#, no-wrap
#, fuzzy
msgid "Guitar -> Distortion -> Reverb -> Amplifier"
msgstr "Гитара -> Дисторшн -> Реверберация -> Усилитель"

#: 06-FX.md:33
#, fuzzy
msgid ""
"This is called FX chaining. Sonic Pi supports exactly this. Additionally, each"
" pedal often has dials and sliders to allow you to control how much distortion"
", reverb, echo etc. to apply. Sonic Pi also supports this kind of control. Fin"
"ally, you can imagine a guitarist playing whilst someone plays with the FX con"
"trols whilst they're playing. Sonic Pi also supports this - but instead of nee"
"ding someone else to control things for you, that's where the computer steps i"
"n."
msgstr ""
"Это называется каскадом эффектов. И это поддерживается в Sonic Pi. Вдобавок, о"
"бычно на каждой педали есть ручки и ползунки для управления применяемым эффект"
"ом. В Sonic Pi есть то же самое. Представьте себе музыканта, который что-то иг"
"рает, а кто-то другой управляет эффектами. Такой способ тоже реализован в Soni"
"c Pi, но тут вместо кого-то другого вступает в дело компьютер."

#: 06-FX.md:42
#, fuzzy
msgid "Let's explore FX!"
msgstr "Давайте исследовать эффекты!"

#: 06.1-Adding-FX.md:1
msgid "6.1 Adding FX"
msgstr "6.1 Добавление эффектов"

#: 06.1-Adding-FX.md:3 13.1-Sound-In.md:26
#, fuzzy
msgid "Adding FX"
msgstr "Добавление Эффектов"

#: 06.1-Adding-FX.md:5
#, fuzzy
msgid ""
"In this section we'll look at a couple of FX: reverb and echo. We'll see how t"
"o use them, how to control their opts and how to chain them."
msgstr ""
"В этом разделе мы рассмотрим пару эффектов - реверберацию и эхо. Мы увидим, ка"
"к их использовать, как настраивать и как строить из них цепочки."

#: 06.1-Adding-FX.md:9
#, fuzzy
msgid ""
"Sonic Pi's FX system uses blocks. So if you haven't read section 5.1 you might"
" want to take a quick look and then head back."
msgstr ""
"Система эффектов Sonic Pi использует блоки. Так что, если ты еще не прочел гла"
"ву 5.1, было бы неплохо её просмотреть и вернуться назад."

#: 06.1-Adding-FX.md:12
#, fuzzy
msgid "Reverb"
msgstr "Реверберация"

#: 06.1-Adding-FX.md:14
#, fuzzy
msgid ""
"If we want to use reverb we write `with_fx :reverb` as the special code to our"
" block like this:"
msgstr ""
"Нужно написать специальный блок `with_fx :reverb`, если мы хотим использовать "
"реверберацию. Примерно так:"

#: 06.1-Adding-FX.md:17
#, no-wrap
msgid ""
"with_fx :reverb do\n"
"  play 50\n"
"  sleep 0.5\n"
"  sample :elec_plip\n"
"  sleep 0.5\n"
"  play 62\n"
"end"
msgstr ""
"with_fx :reverb do\n"
"  play 50\n"
"  sleep 0.5\n"
"  sample :elec_plip\n"
"  sleep 0.5\n"
"  play 62\n"
"end"

#: 06.1-Adding-FX.md:27
#, fuzzy
msgid ""
"Now play this code and you'll hear it played with reverb. It sounds good, does"
"n't it! Everything sounds pretty nice with reverb."
msgstr ""
"Теперь запустите этот код, и вы услышите как он звучит с реверберацией. Неплох"
"о, правда? Все что угодно будет звучать отлично с реверберацией."

#: 06.1-Adding-FX.md:30
#, fuzzy
msgid "Now let's look what happens if we have code outside the do/end block:"
msgstr "Посмотрим, что произойдет, если поместить код вне блока do/end:"

#: 06.1-Adding-FX.md:32
#, no-wrap
msgid ""
"with_fx :reverb do\n"
"  play 50\n"
"  sleep 0.5\n"
"  sample :elec_plip\n"
"  sleep 0.5\n"
"  play 62\n"
"end\n"
"sleep 1\n"
"play 55"
msgstr ""
"with_fx :reverb do\n"
"  play 50\n"
"  sleep 0.5\n"
"  sample :elec_plip\n"
"  sleep 0.5\n"
"  play 62\n"
"end\n"
"sleep 1\n"
"play 55"

#: 06.1-Adding-FX.md:45
#, fuzzy
msgid ""
"Notice how the final `play 55` isn't played with reverb. This is because it is"
" *outside* the do/end block, so it isn't captured by the reverb FX."
msgstr ""
"Обратите внимание, как последний `play 55` играется без реверберации. Это прои"
"сходит потому, что эта строка находится *за пределами* блока do/end, то есть о"
"на не пропускается через эффект."

#: 06.1-Adding-FX.md:48
#, fuzzy
msgid ""
"Similarly, if you make sounds before the do/end block, they also won't be capt"
"ured:"
msgstr ""
"Точно так же, если играть звуки перед блоком do/end, то и они не будут обрабат"
"ываться эффектом:"

#: 06.1-Adding-FX.md:51
#, no-wrap
msgid ""
"play 55\n"
"sleep 1\n"
"with_fx :reverb do\n"
"  play 50\n"
"  sleep 0.5\n"
"  sample :elec_plip\n"
"  sleep 0.5\n"
"  play 62\n"
"end\n"
"sleep 1\n"
"play 55"
msgstr ""
"play 55\n"
"sleep 1\n"
"with_fx :reverb do\n"
"  play 50\n"
"  sleep 0.5\n"
"  sample :elec_plip\n"
"  sleep 0.5\n"
"  play 62\n"
"end\n"
"sleep 1\n"
"play 55"

#: 06.1-Adding-FX.md:67
#, fuzzy
msgid "Echo"
msgstr "Эхо"

#: 06.1-Adding-FX.md:69
#, fuzzy
msgid "There are many FX to choose from. How about some echo?"
msgstr "Есть множество эффектов на выбор. Как насчет эхо?"

#: 06.1-Adding-FX.md:71
#, no-wrap
msgid ""
"with_fx :echo do\n"
"  play 50\n"
"  sleep 0.5\n"
"  sample :elec_plip\n"
"  sleep 0.5\n"
"  play 62\n"
"end"
msgstr ""
"with_fx :echo do\n"
"  play 50\n"
"  sleep 0.5\n"
"  sample :elec_plip\n"
"  sleep 0.5\n"
"  play 62\n"
"end"

#: 06.1-Adding-FX.md:81
#, fuzzy
msgid ""
"One of the powerful aspects of Sonic Pi's FX blocks is that they may be passed"
" opts similar to opts we've already seen with `play` and `sample`. For example"
" a fun echo opt to play with is `phase:` which represents the duration of a gi"
"ven echo in beats. Let's make the echo slower:"
msgstr ""
"Одна из сильных сторон блоков эффектов Sonic Pi в том, что у них есть регулиро"
"вки, похожие на те, что мы уже видели у `play` и `sample`. Например, рассмотри"
"м забавный параметр `phase:`, который представляет собой длительность эхо в до"
"лях такта. Сделаем эхо помедленнее:"

#: 06.1-Adding-FX.md:87
#, no-wrap
msgid ""
"with_fx :echo, phase: 0.5 do\n"
"  play 50\n"
"  sleep 0.5\n"
"  sample :elec_plip\n"
"  sleep 0.5\n"
"  play 62\n"
"end"
msgstr ""
"with_fx :echo, phase: 0.5 do\n"
"  play 50\n"
"  sleep 0.5\n"
"  sample :elec_plip\n"
"  sleep 0.5\n"
"  play 62\n"
"end"

#: 06.1-Adding-FX.md:97
#, fuzzy
msgid "Let's also make the echo faster:"
msgstr "Или побыстрее:"

#: 06.1-Adding-FX.md:99
#, no-wrap
msgid ""
"with_fx :echo, phase: 0.125 do\n"
"  play 50\n"
"  sleep 0.5\n"
"  sample :elec_plip\n"
"  sleep 0.5\n"
"  play 62\n"
"end"
msgstr ""
"with_fx :echo, phase: 0.125 do\n"
"  play 50\n"
"  sleep 0.5\n"
"  sample :elec_plip\n"
"  sleep 0.5\n"
"  play 62\n"
"end"

#: 06.1-Adding-FX.md:109
#, fuzzy
msgid ""
"Let's make the echo take longer to fade away by setting the `decay:` time to 8"
" beats:"
msgstr "Заставим эхо затихать дольше, установив время `decay:` на 8 долей такта:"

#: 06.1-Adding-FX.md:112
#, no-wrap
msgid ""
"with_fx :echo, phase: 0.5, decay: 8 do\n"
"  play 50\n"
"  sleep 0.5\n"
"  sample :elec_plip\n"
"  sleep 0.5\n"
"  play 62\n"
"end"
msgstr ""
"with_fx :echo, phase: 0.5, decay: 8 do\n"
"  play 50\n"
"  sleep 0.5\n"
"  sample :elec_plip\n"
"  sleep 0.5\n"
"  play 62\n"
"end"

#: 06.1-Adding-FX.md:122
#, fuzzy
msgid "Nesting FX"
msgstr "Вкладывание Эффектов"

#: 06.1-Adding-FX.md:124
#, fuzzy
msgid ""
"One of the most powerful aspects of the FX blocks is that you can nest them. T"
"his allows you to very easily chain FX together. For example, what if you want"
"ed to play some code with echo and then with reverb? Easy, just put one inside"
" the other:"
msgstr ""
"Блоки эффектов можно вкладывать друг в друга, что позволяет очень легко собира"
"ть из них каскады эффектов. Например, что если вы захотите пропустить некоторы"
"й код через эхо, а потом через реверберацию? Легко! Просто поместите один эффе"
"кт внутри другого:"

#: 06.1-Adding-FX.md:129
#, no-wrap
msgid ""
"with_fx :reverb do\n"
"  with_fx :echo, phase: 0.5, decay: 8 do\n"
"    play 50\n"
"    sleep 0.5\n"
"    sample :elec_blup\n"
"    sleep 0.5\n"
"    play 62\n"
"  end\n"
"end"
msgstr ""
"with_fx :reverb do\n"
"  with_fx :echo, phase: 0.5, decay: 8 do\n"
"    play 50\n"
"    sleep 0.5\n"
"    sample :elec_blup\n"
"    sleep 0.5\n"
"    play 62\n"
"  end\n"
"end"

#: 06.1-Adding-FX.md:141
#, fuzzy
msgid ""
"Think about the audio flowing from the inside out. The sound of all the code w"
"ithin the inner do/end block such as `play 50` is first sent to the echo FX an"
"d the sound of the echo FX is in turn sent out to the reverb FX."
msgstr ""
"Представьте как звук вытекает изнутри наружу. Весь звук из внутреннего блока d"
"o/end (такой как `play 50`) вначале попадает в эффект эхо, а затем звук с эффе"
"ктом эхо в свою очередь отправляется в эффект реверберации."

#: 06.1-Adding-FX.md:146
#, fuzzy
msgid ""
"We may use very deep nestings for crazy results. However, be warned, the FX ca"
"n use a lot of resources and when you nest them you're effectively running mul"
"tiple FX simultaneously. So be sparing with your use of FX especially on low p"
"owered platforms such as the Raspberry Pi."
msgstr ""
"Можно создавать очень глубокие вложения, чтобы получать непредсказуемые резуль"
"таты. Однако, имейте в виду, что эффекты требуют больших ресурсов. При вложени"
"и они работают в одно и то же время. Так что используйте эффекты разумно, особ"
"енно на платформах с низким количеством ресурсов (например Raspberry Pi)."

#: 06.1-Adding-FX.md:151
#, fuzzy
msgid "Discovering FX"
msgstr "Исследование Эффектов"

#: 06.1-Adding-FX.md:153
#, fuzzy
msgid ""
"Sonic Pi ships with a large number of FX for you to play with. To find out whi"
"ch ones are available, click on FX in the far left of this help system and you"
"'ll see a list of available options. Here's a list of some of my favourites:"
msgstr ""
"В Sonic Pi встроено большое количество эффектов на выбор. Чтобы увидеть доступ"
"ные, щелкните мышью по FX в левом нижнем углу справочной системы. Вот некоторы"
"е из моих любимых:"

#: 06.1-Adding-FX.md:158
msgid "wobble,"
msgstr "колебание,"

#: 06.1-Adding-FX.md:159
msgid "reverb,"
msgstr "реверберации,"

#: 06.1-Adding-FX.md:160
msgid "echo,"
msgstr "эхо,"

#: 06.1-Adding-FX.md:161
msgid "distortion,"
msgstr "искажение,"

#: 06.1-Adding-FX.md:162
msgid "slicer"
msgstr "срез"

#: 06.1-Adding-FX.md:164
#, fuzzy
msgid "Now go crazy and add FX everywhere for some amazing new sounds!"
msgstr "Теперь вы можете добавлять эффекты везде, где только захочется!"

#: 06.2-FX-in-Practice.md:1
msgid "6.2 FX in Practice"
msgstr "6.2 Эффекты на практике"

#: 06.2-FX-in-Practice.md:3
#, fuzzy
msgid "FX in Practice"
msgstr "Практика Использования Эффектов"

#: 06.2-FX-in-Practice.md:5
#, fuzzy
msgid ""
"Although they look deceptively simple on the outside, FX are actually quite co"
"mplex beasts internally. Their simplicity often entices people to overuse them"
" in their pieces. This may be fine if you have a powerful machine, but if - li"
"ke me - you use a Raspberry Pi to jam with, you need to be careful about how m"
"uch work you ask it to do if you want to ensure the beats keep flowing."
msgstr ""
"Хотя снаружи они выглядят обманчиво просто, внутри эффекты устроены довольно с"
"ложно. Их простота часто побуждает людей злоупотреблять их использованием. Это"
" вполне нормально, если у вас мощный компьютер. Но если, как и я, вы импровизи"
"руете на Raspberry Pi, то нужно быть аккуратным с нагрузкой. Иначе ритм может "
"начать прерываться."

#: 06.2-FX-in-Practice.md:12
#, fuzzy
msgid "Consider this code:"
msgstr "Рассмотрим следующий код:"

#: 06.2-FX-in-Practice.md:14
#, no-wrap
msgid ""
"loop do\n"
"  with_fx :reverb do\n"
"    play 60, release: 0.1\n"
"    sleep 0.125\n"
"  end\n"
"end"
msgstr ""
"loop do\n"
"  with_fx :reverb do\n"
"    play 60, release: 0.1\n"
"    sleep 0.125\n"
"  end\n"
"end"

#: 06.2-FX-in-Practice.md:23
#, fuzzy
msgid ""
"In this code we're playing note 60 with a very short release time, so it's a s"
"hort note. We also want reverb so we've wrapped it in a reverb block. All good"
" so far. Except..."
msgstr ""
"В этом примере мы играем ноту 60 с очень коротким временем затухания. То есть "
"это очень короткая нота. Нам нужна реверберация, поэтому мы обернули её в блок"
" reverb. Пока что все хорошо. За исключением..."

#: 06.2-FX-in-Practice.md:27
#, fuzzy
msgid ""
"Let's look at what the code does. First we have a `loop` which means everythin"
"g inside of it is repeated forever. Next we have a `with_fx` block. This means"
" we will create a new reverb FX *every time we loop*. This is like having a se"
"parate FX reverb pedal for every time you pluck a string on a guitar. It's coo"
"l that you can do this, but it's not always what you want. For example, this c"
"ode will struggle to run nicely on a Raspberry Pi. All the work of creating th"
"e reverb and then waiting until it needs to be stopped and removed is all hand"
"led by `with_fx` for you, but this takes CPU power which may be precious."
msgstr ""
"Посмотрим, что делает код. Во-первых, у нас есть цикл `loop`. Это означает, чт"
"о всё, что внутри него, повторяется бесконечно. Во-вторых, есть блок `with_fx`"
". Его роль в том, чтобы создавать новый эффект реверберации *каждый раз, когда"
" он выполняется*. Как будто для каждого щипка гитарной струны включается собст"
"венная педаль реверберации. Здорово, что так можно делать, но это не всегда то"
", что нам нужно. Например, такой код будет трудно выполнять на Raspberry Pi. С"
"оздание эффекта реверберации и ожидание момента, когда он должен быть остановл"
"ен и удален, - обо всем позаботится за тебя блок `with_fx`. Но на это требуютс"
"я ресурсы процессора, а они могут быть ограничены."

#: 06.2-FX-in-Practice.md:37
#, fuzzy
msgid ""
"How do we make it more similar to a traditional setup where our guitarist has "
"just *one* reverb pedal which all sounds pass through? Simple:"
msgstr ""
"Как изменить код так, чтобы он больше походил на обычное подключение, где у на"
"шего гитариста всего *одна* педаль реверберации, через которую и пропускаются "
"все звуки? Легко:"

#: 06.2-FX-in-Practice.md:41
#, no-wrap
msgid ""
"with_fx :reverb do\n"
"  loop do\n"
"    play 60, release: 0.1\n"
"    sleep 0.125\n"
"  end\n"
"end"
msgstr ""
"with_fx :reverb do\n"
"  loop do\n"
"    play 60, release: 0.1\n"
"    sleep 0.125\n"
"  end\n"
"end"

#: 06.2-FX-in-Practice.md:50
#, fuzzy
msgid ""
"We put our loop *inside* the `with_fx` block. This way we only create a single"
" reverb for all notes played in our loop. This code is a lot more efficient an"
"d would work fine on a Raspberry Pi."
msgstr ""
"Мы помещаем наш цикл *внутрь* блока `with_fx`. Таким образом создается всего о"
"дин единственный эффект для всех нот, извлекаемых в цикле. Этот вариант намног"
"о более эффективен, и Raspberry Pi с ним хорошо справится."

#: 06.2-FX-in-Practice.md:54
#, fuzzy
msgid "A compromise is to use `with_fx` over an iteration within a loop:"
msgstr ""
"В качестве компромисса можно предложить использовать `with_fx` на протяжении н"
"ескольких повторений внутри цикла:"

#: 06.2-FX-in-Practice.md:56
#, no-wrap
msgid ""
"loop do\n"
"  with_fx :reverb do\n"
"    16.times do\n"
"      play 60, release: 0.1\n"
"      sleep 0.125\n"
"    end\n"
"  end\n"
"end"
msgstr ""
"loop do\n"
"  with_fx :reverb do\n"
"    16.times do\n"
"      play 60, release: 0.1\n"
"      sleep 0.125\n"
"    end\n"
"  end\n"
"end"

#: 06.2-FX-in-Practice.md:67
#, fuzzy
msgid ""
"This way we've lifted the `with_fx` out of the inner part of the `loop` and we"
"'re now creating a new reverb every 16 notes."
msgstr "То есть новый эффект реверберации будет создаваться через каждые 16 нот."

#: 06.2-FX-in-Practice.md:70
msgid ""
"This is such a common pattern that `with_fx` supports an opt to do exactly thi"
"s but without having to write the `16.times` block:"
msgstr ""

#: 06.2-FX-in-Practice.md:73
#, no-wrap
msgid ""
"loop do\n"
"  with_fx :reverb, reps: 16 do\n"
"    play 60, release: 0.1\n"
"    sleep 0.125\n"
"  end\n"
"end"
msgstr ""
"loop do\n"
"  with_fx :reverb, reps: 16 do\n"
"    play 60, release: 0.1\n"
"    sleep 0.125\n"
"  end\n"
"end"

#: 06.2-FX-in-Practice.md:82
msgid ""
"Both the `reps: 16` and `16.times do` examples will behave identically. The `r"
"eps: 16` essentially repeats the code in the `do/end` block 16 times so you ca"
"n use them both interchangeably and choose the one that feels best for you."
msgstr ""

#: 06.2-FX-in-Practice.md:87
#, fuzzy
msgid ""
"Remember, there are no mistakes, just possibilities. However, some of these ap"
"proaches will have a different sound and also different performance characteri"
"stics. So play around and use the approach that sounds best to you whilst also"
" working within the performance constraints of your platform."
msgstr ""
"Помните, ошибок нет, есть только возможности. Однако, каждый из этих подходов "
"даст разный звук и разные показатели производительности. Поэтому попрактикуйте"
"сь, а затем использте тот способ, который звучит лучше всего для вас, и в то ж"
"е время укладывается в ограничения быстродействия вашей платформы."

#: 07-Control.md:1
msgid "7 Control"
msgstr "7 Управление"

#: 07-Control.md:3
#, fuzzy
msgid "Controlling running sounds"
msgstr "Управление Звуком Во Время Воспроизведения"

#: 07-Control.md:5
#, fuzzy
msgid ""
"So far we've looked at how you can trigger synths and samples, and also how to"
" change their default opts such as amplitude, pan, envelope settings and more."
" Each sound triggered is essentially its own sound with its own list of option"
"s set for the duration of the sound."
msgstr ""
"До этого момента мы разбирали, как включать синты и сэмплы, и то, как менять и"
"х регулировки, такие как амплитуда, панорамирование, параметры огибающей и т.д"
". Каждый звук, по сути, является отдельным звуком с собственными настройками, "
"действующими в течение всей его продолжительности."

#: 07-Control.md:11
#, fuzzy
msgid ""
"Wouldn't it also be cool if you could change a sound's opts whilst it's still "
"playing, just like you might bend a string of a guitar whilst it's still vibra"
"ting?"
msgstr ""
"Вот бы было здорово, если бы вы могли менять параметры воспроизводящегося звук"
"а, как вы може подтягивать вибрирующую струну гитары, правда?"

#: 07-Control.md:15
#, fuzzy
msgid "You're in luck - this section will show you how to do exactly this."
msgstr "Вам повезло - этот раздел покажет, как это можно сделаеть в Sonic Pi."

#: 07.1-Controlling-Running-Synths.md:1
msgid "7.1 Controlling Running Synths"
msgstr "7.1 Контроль выполняющихся синтов"

#: 07.1-Controlling-Running-Synths.md:3
#, fuzzy
msgid "Controlling Running Synths"
msgstr "Управление Играющим Синтезатором"

#: 07.1-Controlling-Running-Synths.md:5
#, fuzzy
msgid ""
"So far we've only concerned ourselves with triggering new sounds and FX. Howev"
"er, Sonic Pi gives us the ability to manipulate and control currently running "
"sounds. We do this by using a variable to capture a reference to a synth:"
msgstr ""
"Раньше мы изучали только как включать звуки и добавлять эффекты. Однако, в Son"
"ic Pi есть возможность управлять воспроизводимыми звуками. Этого можно достичь"
", сохранив ссылку на синт в переменной:"

#: 07.1-Controlling-Running-Synths.md:10
#, no-wrap
msgid "s = play 60, release: 5"
msgstr "s = play 60, release: 5"

#: 07.1-Controlling-Running-Synths.md:14
#, fuzzy
msgid ""
"Here, we have a run-local variable `s` which represents the synth playing note"
" 60. Note that this is *run-local* - you can't access it from other runs like "
"functions."
msgstr ""
"В этом примере мы создали локальную переменную среды выполнения `s`, которая п"
"редставляет собой синт, играющий ноту 60. Обратите внимание, что она локальна "
"для *текущего контекста* - нельзя получить к ней доступ из других контекстов, "
"таких как функции."

#: 07.1-Controlling-Running-Synths.md:18
#, fuzzy
msgid "Once we have `s`, we can start controlling it via the `control` function:"
msgstr ""
"После того, как у нас появилась `s`, мы можем управлять ей с помощью функции `"
"control`:"

#: 07.1-Controlling-Running-Synths.md:21 07.3-Sliding-Parameters.md:13
#, no-wrap
msgid ""
"s = play 60, release: 5\n"
"sleep 0.5\n"
"control s, note: 65\n"
"sleep 0.5\n"
"control s, note: 67\n"
"sleep 3\n"
"control s, note: 72"
msgstr ""
"s = play 60, release: 5\n"
"sleep 0.5\n"
"control s, note: 65\n"
"sleep 0.5\n"
"control s, note: 67\n"
"sleep 3\n"
"control s, note: 72"

#: 07.1-Controlling-Running-Synths.md:31
#, fuzzy
msgid ""
"The thing to notice is that we're not triggering 4 different synths here - we'"
"re just triggering one synth and then change the pitch 3 times afterwards, whi"
"le it's playing."
msgstr ""
"Заметьте, что мы запускаем не четыре разных синта, а один и просто изменяем вы"
"соту звука в то время, как он продолжает играть."

#: 07.1-Controlling-Running-Synths.md:35
#, fuzzy
msgid ""
"We can pass any of the standard opts to `control`, so you can control things l"
"ike `amp:`, `cutoff:` or `pan:`."
msgstr ""
"Можно передавать функции `control` любые из стандартных настроек, то есть дост"
"упен контроль над такими параметрами, как `amp:`, `cutoff:` или `pan:`."

#: 07.1-Controlling-Running-Synths.md:38
#, fuzzy
msgid "Non-controllable Options"
msgstr "Неконтролируемые Настройки"

#: 07.1-Controlling-Running-Synths.md:40
#, fuzzy
msgid ""
"Some of the opts can't be controlled once the synth has started. This is the c"
"ase for all the ADSR envelope parameters. You can find out which opts are cont"
"rollable by looking at their documentation in the help system. If the document"
"ation says *Can not be changed once set*, you know it's not possible to contro"
"l the opt after the synth has started."
msgstr ""
"Некоторые регулировки нельзя менять после включения синта. Это относится ко вс"
"ем параметрам ADSR-огибающей. Из документации в справочной системе можно узнат"
"ь какие параметры разрешено менять, а какие нет. Если документация говорит *Не"
"льзя изменять после установки*, это значит, что после запуска синта настройке "
"нельзя задавать новое значение."

#: 07.2-Controlling-FX.md:1
msgid "7.2 Controlling FX"
msgstr "7.2 Контроль эффектов"

#: 07.2-Controlling-FX.md:3
#, fuzzy
msgid "Controlling FX"
msgstr "Управление Эффектами"

#: 07.2-Controlling-FX.md:5
#, fuzzy
msgid ""
"It is also possible to control FX, although this is achieved in a slightly dif"
"ferent way:"
msgstr ""
"Также в Sonic Pi доступен контроль над эффектами, хотя он и достигается немног"
"о другим способом:"

#: 07.2-Controlling-FX.md:8
#, no-wrap
msgid ""
"with_fx :reverb do |r|\n"
"  play 50\n"
"  sleep 0.5\n"
"  control r, mix: 0.7\n"
"  play 55\n"
"  sleep 1\n"
"  control r, mix: 0.9\n"
"  sleep 1\n"
"  play 62\n"
"end"
msgstr ""
"with_fx :reverb do |r|\n"
"  play 50\n"
"  sleep 0.5\n"
"  control r, mix: 0.7\n"
"  play 55\n"
"  sleep 1\n"
"  control r, mix: 0.9\n"
"  sleep 1\n"
"  play 62\n"
"end"

#: 07.2-Controlling-FX.md:21
#, fuzzy
msgid ""
"Instead of using a variable, we use the goalpost parameters of the do/end bloc"
"k. Inside the `|` bars, we need to specify a unique name for our running FX wh"
"ich we then reference from the containing do/end block. This behaviour is iden"
"tical to using parameterised functions."
msgstr ""
"Мы используем параметры блока do/end вместо переменных. Нам надо задать уникал"
"ьное имя для выбранного эффекта, окружив его вертикальными чертами `|`. Затем "
"мы можем ссылаться на него изнутри охватывающего блока do/end. Так же работают"
" и параметризованные функции."

#: 07.2-Controlling-FX.md:26
#, fuzzy
msgid "Now go and control some synths and FX!"
msgstr "Пришла пора немного поуправлять синтами и эффектами!"

#: 07.3-Sliding-Parameters.md:1
msgid "7.3 Sliding Options"
msgstr ""

#: 07.3-Sliding-Parameters.md:3
#, fuzzy
msgid "Sliding Opts"
msgstr "Плавные Настройки"

#: 07.3-Sliding-Parameters.md:5
#, fuzzy
msgid ""
"Whilst exploring the synth and FX opts, you might have noticed that there are "
"a number of opts ending with `_slide`. You might have even tried calling them "
"and seeing no effect. This is because they're not normal parameters, they're s"
"pecial opts that only work when you control synths as introduced in the previo"
"us section."
msgstr ""
"Вы могли заметить, что есть множество настроек, имя которых оканчивается на `_"
"slide`, пока занимались изучением синтов и специальных эффектов. Возможно, вы "
"даже пытались ими воспользоваться и заметили, что ничего не происходит. Это от"
" того, что они не являются обычными параметрами. Эти настройки особенные потом"
"у, что они работают только тогда, когда вы контролируете синт так, как мы виде"
"ли в предыдущем разделе."

#: 07.3-Sliding-Parameters.md:11
#, fuzzy
msgid "Consider the following example:"
msgstr "Рассмотрим пример:"

#: 07.3-Sliding-Parameters.md:23
#, fuzzy
msgid ""
"Here, you can hear the synth pitch changing immediately on each `control` call"
". However, we might want the pitch to slide between changes. As we're controll"
"ing the `note:` parameter, to add slide, we need to set the `note_slide` param"
"eter of the synth:"
msgstr ""
"Вы можете слышать, как высота звука синта сразу же меняется, как только происх"
"одит вызов `control`. Однако, что если мы захотим, чтобы параметр менялся плав"
"но. Поскольку мы управляем значением `note:`, то для добавления плавности надо"
" задать параметр синтезатора `note_slide`:"

#: 07.3-Sliding-Parameters.md:28
#, no-wrap
msgid ""
"s = play 60, release: 5, note_slide: 1\n"
"sleep 0.5\n"
"control s, note: 65\n"
"sleep 0.5\n"
"control s, note: 67\n"
"sleep 3\n"
"control s, note: 72"
msgstr ""
"s = play 60, release: 5, note_slide: 1\n"
"sleep 0.5\n"
"control s, note: 65\n"
"sleep 0.5\n"
"control s, note: 67\n"
"sleep 3\n"
"control s, note: 72"

#: 07.3-Sliding-Parameters.md:38
#, fuzzy
msgid ""
"Now we hear the notes being bent between the `control` calls. It sounds nice, "
"doesn't it? You can speed up the slide by using a shorter time such as `note_s"
"lide: 0.2` or slow it down by using a longer slide time."
msgstr ""
"Теперь мы слышим, как ноты подтягиваются в промежутках между вызовами `control"
"`. Звучит неплохо, не так ли? Можно ускорить скольжение звука, если указать бо"
"лее короткий интервал времени, например `note_slide: 0.2`, или замедлить его, "
"установив большее значение."

#: 07.3-Sliding-Parameters.md:43
#, fuzzy
msgid ""
"Every parameter that can be controlled has a corresponding `_slide` parameter "
"for you to play with."
msgstr ""
"Для каждой настройки, которой можно управлять, есть соответствующий `_slide` п"
"араметр, с которым можно поиграть."

#: 07.3-Sliding-Parameters.md:46
#, fuzzy
msgid "Sliding is sticky"
msgstr "Скольжение Сохраняется"

#: 07.3-Sliding-Parameters.md:48
#, fuzzy
msgid ""
"Once you've set a `_slide` parameter on a running synth, it will be remembered"
" and used every time you slide the corresponding parameter. To stop sliding yo"
"u must set the `_slide` value to 0 before the next `control` call."
msgstr ""
"Если вы задали значение `_slide` для играющего синтезатора, то оно запомнится "
"и будет использоваться всякий раз, когда соответствующая настройка меняется. Ч"
"тобы прекратить плавное изменение звука, надо установить значение `_slide` в 0"
" перед следующим вызовом `control`."

#: 07.3-Sliding-Parameters.md:53
#, fuzzy
msgid "Sliding FX Opts"
msgstr "Плавные Эффекты"

#: 07.3-Sliding-Parameters.md:55
#, fuzzy
msgid "It is also possible to slide FX opts:"
msgstr "Можно делать плавное изменение эффектов:"

#: 07.3-Sliding-Parameters.md:57
#, no-wrap
msgid ""
"with_fx :wobble, phase: 1, phase_slide: 5 do |e|\n"
"  use_synth :dsaw\n"
"  play 50, release: 5\n"
"  control e, phase: 0.025\n"
"end"
msgstr ""
"with_fx :wobble, phase: 1, phase_slide: 5 do |e|\n"
"  use_synth :dsaw\n"
"  play 50, release: 5\n"
"  control e, phase: 0.025\n"
"end"

#: 07.3-Sliding-Parameters.md:65
#, fuzzy
msgid ""
"Now have fun sliding things around for smooth transitions and flowing control."
".."
msgstr "Пришла пора добавить немного плавности к вашей музыке..."

#: 08-Data-Structures.md:1
msgid "8 Data Structures"
msgstr "8 Структуры Данных"

#: 08-Data-Structures.md:3
#, fuzzy
msgid "Data Structures"
msgstr "Структуры Данных"

#: 08-Data-Structures.md:5
#, fuzzy
msgid "A very useful tool in a programmer's toolkit is a data structure."
msgstr ""
"Очень полезный инструмент в инструментарии программиста - это структуры данных"
"."

#: 08-Data-Structures.md:7
#, fuzzy
msgid ""
"Sometimes you may wish to represent and use more than one thing. For example, "
"you may find it useful to have a series of notes to play one after another. Pr"
"ogramming languages have data structures to allow you do exactly this."
msgstr ""
"Иногда вы, возможно, захотите определить и использовать несколько разных вещей"
". Например, вы можете посчитать полезным иметь последовательность нот, чтобы и"
"грать их одну за другой. Языки программирования имеют структуры данных, чтобы "
"вы могли делать это."

#: 08-Data-Structures.md:12
#, fuzzy
msgid ""
"There are many exciting and exotic data structures available to programmers - "
"and people are always inventing new ones. However, for now we only really need"
" to consider a very simple data structure - the list."
msgstr ""
"Существует множество интересных и экзотических структур данных, доступных для "
"программистов, и люди постоянно изобретают новые. Впрочем, пока что мы нуждаем"
"ся в рассмотрении одной очень простой структуры данных - списка."

#: 08-Data-Structures.md:16
#, fuzzy
msgid ""
"Let's look at it in more detail. We'll cover its basic form and then also how "
"lists can be used to represent scales and chords."
msgstr ""
"Давайте рассмотрим его более подробно. Мы узнаем про его базовую форму, а так "
"же как списки могут быть использованы для представления гамм и аккордов."

#: 08.1-Lists.md:1
msgid "8.1 Lists"
msgstr "8.1 Списки"

#: 08.1-Lists.md:3
#, fuzzy
msgid "Lists"
msgstr "Списки"

#: 08.1-Lists.md:5
#, fuzzy
msgid ""
"In this section we'll take a look at a data structure which is very useful - t"
"he list. We met it very briefly before in the section on randomisation when we"
" randomly chose from a list of notes to play:"
msgstr ""
"В этом разделе мы рассмотрим очень полезную структуру данных - список. Мы очен"
"ь кратко познакомились с ним ранее в разделе о рандомизации, тогда мы случайны"
"м образом выбирали ноты из списка, чтобы играть их:"

#: 08.1-Lists.md:9
#, no-wrap
msgid "play choose([50, 55, 62])"
msgstr "play choose([50, 55, 62])"

#: 08.1-Lists.md:13
#, fuzzy
msgid ""
"In this section we'll explore using lists to also represent chords and scales."
" First let's recap how we might play a chord. Remember that if we don't use `s"
"leep`, sounds all happen at the same time:"
msgstr ""
"В этом разделе мы также изучим использование списков для представления аккордо"
"в и гамм. Сначала давайте вспомним, как мы можем сыграть аккорд. Помните, что "
"если мы не используем `sleep`, все звуки воспроизводятся одновременно:"

#: 08.1-Lists.md:17
#, no-wrap
msgid ""
"play 52\n"
"play 55\n"
"play 59"
msgstr ""
"play 52\n"
"play 55\n"
"play 59"

#: 08.1-Lists.md:23
#, fuzzy
msgid "Let's look at other ways to represent this code."
msgstr "Давайте посмотрим на другой способ представления этого кода."

#: 08.1-Lists.md:25
#, fuzzy
msgid "Playing a List"
msgstr "Воспроизведение Списка"

#: 08.1-Lists.md:27
#, fuzzy
msgid ""
"One option is to place all the notes in a list: `[52, 55, 59]`. Our friendly `"
"play` function is smart enough to know how to play a list of notes. Try it:"
msgstr ""
"Один из вариантов - разместить все ноы в виде списка: `[52, 55, 59]`. Наша дру"
"жественная функция `play` достаточно умна, чтобы понимать, как играть список н"
"от. Попробуйте это:"

#: 08.1-Lists.md:31
#, no-wrap
msgid "play [52, 55, 59]"
msgstr "play [52, 55, 59]"

#: 08.1-Lists.md:35
#, fuzzy
msgid ""
"Ooh, that's already nicer to read. Playing a list of notes doesn't stop you fr"
"om using any of the parameters as normal:"
msgstr ""
"О, это уже приятнее читать. Воспроизведение списка нот не мешает вам использов"
"ать любые обычные параметры:"

#: 08.1-Lists.md:38
#, no-wrap
msgid "play [52, 55, 59], amp: 0.3"
msgstr "play [52, 55, 59], amp: 0.3"

#: 08.1-Lists.md:42
#, fuzzy
msgid ""
"Of course, you can also use the traditional note names instead of the MIDI num"
"bers:"
msgstr ""
"Конечно, мы также можем использовать традиционные имена нот вместо номеров MID"
"I:"

#: 08.1-Lists.md:45
#, no-wrap
msgid "play [:E3, :G3, :B3]"
msgstr "play [:E3, :G3, :B3]"

#: 08.1-Lists.md:49
#, fuzzy
msgid ""
"Now those of you lucky enough to have studied some music theory might recognis"
"e that chord as *E Minor* played in the 3rd octave."
msgstr ""
"Теперь те из вас, кому повезло изучать теорию музыки, смогут подтвердить, что "
"аккорд *ми минор* был сыгран в 3-й октаве."

#: 08.1-Lists.md:52
#, fuzzy
msgid "Accessing a List"
msgstr "Доступ К Списку"

#: 08.1-Lists.md:54
#, fuzzy
msgid ""
"Another very useful feature of a list is the ability to get information out of"
" it. This may sound a bit strange, but it's no more complicated than someone a"
"sking you to turn a book to page 23. With a list, you'd say, what's the elemen"
"t at index 23? The only strange thing is that in programming indexes usually s"
"tart at 0 not 1."
msgstr ""
"Еще одной полезной особенностью списка является возможность получать оттуда ин"
"формацию. Это может звучать немного странно, но это не сложнее чьей-либо прось"
"бы открыть книгу на странице 23. Применительно к списку, говорят - \"Какой элем"
"ент находится по индексу 23\"? Единственная странность заключается в том, что в"
" программировании индексы начинаются с 0, а не с 1."

#: 08.1-Lists.md:60
#, fuzzy
msgid "With list indexes we don't count 1, 2, 3... Instead we count 0, 1, 2..."
msgstr "Мы не считаем индекы списка 1, 2, 3... вместо этого мы считаем 0, 1, 2..."

#: 08.1-Lists.md:62
#, fuzzy
msgid "Let's look at this in a little more detail. Take a look at this list:"
msgstr "Давайте рассмотрим это чуть более подробно. Взгляните на этот список:"

#: 08.1-Lists.md:64
#, no-wrap
msgid "[52, 55, 59]"
msgstr "[52, 55, 59]"

#: 08.1-Lists.md:68
#, fuzzy
msgid ""
"There's nothing especially scary about this. Now, what's the second element in"
" that list? Yes, of course, it's `55`. That was easy. Let's see if we can get "
"the computer to answer it for us too:"
msgstr ""
"Здесь нет ничего страшного. Теперь, какой второй элемент в этом списке? Конечн"
"о, это `55`. Это было легко. Давайте посмотрим, что нам ответит компьютер на а"
"налогичный вопрос:"

#: 08.1-Lists.md:72 08.4-Rings.md:12
#, no-wrap
msgid "puts [52, 55, 59][1]"
msgstr "puts [52, 55, 59][1]"

#: 08.1-Lists.md:76
#, fuzzy
msgid ""
"OK, that looks a bit weird if you've never seen anything like it before. Trust"
" me though, it's not too hard. There are three parts to the line above: the wo"
"rd `puts` , our list `52, 55, 59` and our index `[1]`. Firstly we're saying `p"
"uts` because we want Sonic Pi to print the answer out for us in the log. Next,"
" we're giving it our list, and finally our index is asking for the second elem"
"ent. We need to surround our index with square brackets and because counting s"
"tarts at `0`, the index for the second element is `1`. Look:"
msgstr ""
"Это выглядит немного странно, если вы никогда не видели ничего подобного раньш"
"е. Поверьте мне, это не очень сложно. Строка выше состоит из трёх частей: слов"
"о `puts`, наш список `[52, 55, 59]` и наш индекс `[1]`. Сначала мы говорим `pu"
"ts` потому что хотим, чтобы Sonic Pi напечатал ответ для нас в журнал. Далее, "
"мы даём ему наш список, и, наконец, наш индекс запрашивает второй элемент. Мы "
"должны окружить индекс квадратными скобками и т.к. счёт начинается с `0`, инде"
"кс второго элемента это `1`. Посмотрите:"

#: 08.1-Lists.md:85
#, no-wrap
msgid ""
"# indexes:  0   1   2\n"
"           [52, 55, 59]"
msgstr ""
"# indexes:  0   1   2\n"
"           [52, 55, 59]"

#: 08.1-Lists.md:90
#, fuzzy
msgid ""
"Try running the code `puts [52, 55, 59][1]` and you'll see `55` pop up in the "
"log. Change the index `1` to other indexes, try longer lists and think about h"
"ow you might use a list in your next code jam. For example, what musical struc"
"tures might be represented as a series of numbers..."
msgstr ""
"Попробуйте выполнить код `puts [52, 55, 59][1]` и вы увидите, что `55` появитс"
"я в журнале. Измените индекс `1` на другой, попробуйте более длинные списки и "
"подумайте, как вы сможете использовать список в своём следующем сочинении. Нап"
"ример, какие музыкальные структуры могут быть представлены в виде ряда чисел.."
"."

#: 08.2-Chords.md:1
msgid "8.2 Chords"
msgstr "8.2 Аккорды"

#: 08.2-Chords.md:5
#, fuzzy
msgid ""
"Sonic Pi has built-in support for chord names which will return lists. Try it "
"for yourself:"
msgstr ""
"Sonic Pi имеет встроенную поддержку названий аккордов, которая возвращает спис"
"ки. Попробуйте сами:"

#: 08.2-Chords.md:8
#, no-wrap
msgid "play chord(:E3, :minor)"
msgstr "play chord(:E3, :minor)"

#: 08.2-Chords.md:12
#, fuzzy
msgid ""
"Now, we're really getting somewhere. That looks a lot more pretty than the raw"
" lists (and is easier to read for other people). So what other chords does Son"
"ic Pi support? Well, a *lot*. Try some of these:"
msgstr ""
"Теперь мы действительно проникаем куда-то. Это выглядит намного симпатичнее, ч"
"ем сырые списки (и это легче читать). А как на счёт других аккордов, Sonic Pi "
"их поддерживает? Да, и *много*. Попробуйте некоторые из них:"

#: 08.2-Chords.md:16
msgid "`chord(:E3, :m7)`"
msgstr "`chord(:E3, :m7)`"

#: 08.2-Chords.md:17
msgid "`chord(:E3, :minor)`"
msgstr "`chord(:E3, :minor)`"

#: 08.2-Chords.md:18
msgid "`chord(:E3, :dim7)`"
msgstr "`chord(:E3, :dim7)`"

#: 08.2-Chords.md:19
msgid "`chord(:E3, :dom7)`"
msgstr "`chord(:E3, :dom7)`"

#: 08.2-Chords.md:21
#, fuzzy
msgid "Arpeggios"
msgstr "Арпеджио"

#: 08.2-Chords.md:23
#, fuzzy
msgid "We can easily turn chords into arpeggios with the function `play_pattern`:"
msgstr "Мы можем легко превратить аккорды в арпеджио с функцией `play_pattern`:"

#: 08.2-Chords.md:26
#, no-wrap
msgid "play_pattern chord(:E3, :m7)"
msgstr "play_pattern chord(:E3, :m7)"

#: 08.2-Chords.md:30
#, fuzzy
msgid ""
"Ok, that's not so fun - it played it really slowly. `play_pattern` will play e"
"ach note in the list separated with a call to `sleep 1` between each call to `"
"play`. We can use another function `play_pattern_timed` to specify our own tim"
"ings and speed things up:"
msgstr ""
"Хорошо, но не очень весело - она играла очень медленно. `play_pattern` будет и"
"грать каждую ноту из списка, вызывая `sleep 1` после каждого вызова `play`. Мы"
" можем использовать другую функцию - `play_pattern_timed`, чтобы устанавливать"
" наше собственное время и повысить скорость:"

#: 08.2-Chords.md:35
#, no-wrap
msgid "play_pattern_timed chord(:E3, :m7), 0.25"
msgstr "play_pattern_timed chord(:E3, :m7), 0.25"

#: 08.2-Chords.md:39
#, fuzzy
msgid "We can even pass a list of times which it will treat as a circle of times:"
msgstr ""
"Мы можем также передавать разное время в виде списка, который будет рассматрив"
"аться как кольцо:"

#: 08.2-Chords.md:42
#, no-wrap
msgid "play_pattern_timed chord(:E3, :m13), [0.25, 0.5]"
msgstr "play_pattern_timed chord(:E3, :m13), [0.25, 0.5]"

#: 08.2-Chords.md:46
#, fuzzy
msgid "This is the equivalent to:"
msgstr "Это эквивалентно:"

#: 08.2-Chords.md:48
#, no-wrap
msgid ""
"play 52\n"
"sleep 0.25\n"
"play 55\n"
"sleep 0.5\n"
"play 59\n"
"sleep 0.25\n"
"play 62\n"
"sleep 0.5\n"
"play 66\n"
"sleep 0.25\n"
"play 69\n"
"sleep 0.5\n"
"play 73"
msgstr ""
"play 52\n"
"sleep 0.25\n"
"play 55\n"
"sleep 0.5\n"
"play 59\n"
"sleep 0.25\n"
"play 62\n"
"sleep 0.5\n"
"play 66\n"
"sleep 0.25\n"
"play 69\n"
"sleep 0.5\n"
"play 73"

#: 08.2-Chords.md:64
#, fuzzy
msgid "Which would you prefer to write?"
msgstr "Что бы вы предпочли написать?"

#: 08.3-Scales.md:1
msgid "8.3 Scales"
msgstr ""

#: 08.3-Scales.md:3
#, fuzzy
msgid "Scales"
msgstr "Гаммы"

#: 08.3-Scales.md:5
#, fuzzy
msgid ""
"Sonic Pi has support for a wide range of scales. How about playing a C3 major "
"scale?"
msgstr ""
"Sonic Pi поддерживает широкий диапазон гамм. Как насчет сыграть мажорную гамму"
" от ноты С3?"

#: 08.3-Scales.md:8
#, no-wrap
msgid "play_pattern_timed scale(:c3, :major), 0.125, release: 0.1"
msgstr "play_pattern_timed scale(:c3, :major), 0.125, release: 0.1"

#: 08.3-Scales.md:12
#, fuzzy
msgid "We can even ask for more octaves:"
msgstr "Мы даже можем запросить больше октав:"

#: 08.3-Scales.md:14
#, no-wrap
msgid "play_pattern_timed scale(:c3, :major, num_octaves: 3), 0.125, release: 0.1"
msgstr "play_pattern_timed scale(:c3, :major, num_octaves: 3), 0.125, release: 0.1"

#: 08.3-Scales.md:18
#, fuzzy
msgid "How about all the notes in a pentatonic scale?"
msgstr "Как насчёт пентатоники?"

#: 08.3-Scales.md:20
#, no-wrap
msgid ""
"play_pattern_timed scale(:c3, :major_pentatonic, num_octaves: 3), 0.125, relea"
"se: 0.1"
msgstr ""
"play_pattern_timed scale(:c3, :major_pentatonic, num_octaves: 3), 0.125, relea"
"se: 0.1"

#: 08.3-Scales.md:24
#, fuzzy
msgid "Random notes"
msgstr "Случайные Ноты"

#: 08.3-Scales.md:26
#, fuzzy
msgid ""
"Chords and scales are great ways of constraining a random choice to something "
"meaningful. Have a play with this example which picks random notes from the ch"
"ord E3 minor:"
msgstr ""
"Использование аккордов и гамм - отличный способ ограничить случайный выбор для"
" получения чего-то более осмысленного. Поиграйте с примером, который выбирает "
"случайные ноты из минорного аккорда:"

#: 08.3-Scales.md:30
#, no-wrap
msgid ""
"use_synth :tb303\n"
"loop do\n"
"  play choose(chord(:E3, :minor)), release: 0.3, cutoff: rrand(60, 120)\n"
"  sleep 0.25\n"
"end"
msgstr ""
"use_synth :tb303\n"
"loop do\n"
"  play choose(chord(:E3, :minor)), release: 0.3, cutoff: rrand(60, 120)\n"
"  sleep 0.25\n"
"end"

#: 08.3-Scales.md:38
#, fuzzy
msgid "Try switching in different chord names and cutoff ranges."
msgstr "Попробуйте другие названия аккордов и диапазоны частот среза фильтра."

#: 08.3-Scales.md:40
#, fuzzy
msgid "Discovering Chords and Scales"
msgstr "Нахождение Аккордов И Гамм"

#: 08.3-Scales.md:42
#, fuzzy
msgid ""
"To find out which scales and chords are supported by Sonic Pi simply click the"
" Lang button on the far left of this tutorial and then choose either chord or "
"scale in the API list. In the information in the main panel, scroll down until"
" you see a long list of chords or scales (depending on which you're looking at"
")."
msgstr ""
"Чтобы выяснить, какие гаммы и аккорды поддерживаются Sonic Pi, просто нажмите "
"кнопку lang внизу слева от этого учебника и затем выберите аккорд или гамму в "
"списке. Прокручивайте вниз информацию в главной панели, пока не увидите длинны"
"й список аккордов или гамм (в зависимости от того, что вы ищете)."

#: 08.3-Scales.md:48
#, fuzzy
msgid "Have fun and remember: there are no mistakes, only opportunities."
msgstr "Получайте удовольствие и помните: здесь нет ошибок, только возможности."

#: 08.4-Rings.md:1
msgid "8.4 Rings"
msgstr ""

#: 08.4-Rings.md:3 A.11-beat-tracking.md:62
#, fuzzy
msgid "Rings"
msgstr "Кольца"

#: 08.4-Rings.md:5
#, fuzzy
msgid ""
"An interesting spin on standard lists are rings. If you know some programming,"
" you might have come across ring buffers or ring arrays. Here, we'll just go f"
"or ring - it's short and simple."
msgstr ""
"Интересной разновидностью списков являются кольца. Если вы раньше занимались п"
"рограммированием, то наверняка сталкивались с кольцевым буфером или кольцевым "
"массивом. Здесь мы узнаем про кольцевой список - это быстро и просто."

#: 08.4-Rings.md:9
#, fuzzy
msgid ""
"In the previous section on lists we saw how we could fetch elements out of the"
"m by using the indexing mechanism:"
msgstr ""
"В предыдущем разделе о списках мы видели, как можно извлечь из них элементы, и"
"спользуя механизм индексирования:"

#: 08.4-Rings.md:16
#, fuzzy
msgid ""
"Now, what happens if you want index `100`? Well, there's clearly no element at"
" index 100 as the list has only three elements in it. So Sonic Pi will return "
"you `nil` which means nothing."
msgstr ""
"Так, а что произойдет, если вы захотите извлечь индекс `100`? Там явно нет эле"
"мента с индексом 100, так как у нашего списка только три элемента. Поэтому Son"
"ic Pi вернет вам `nil`, что означает \"ничто\"."

#: 08.4-Rings.md:20
#, fuzzy
msgid ""
"However, consider you have a counter such as the current beat which continuall"
"y increases. Let's create our counter and our list:"
msgstr ""
"Однако, представьте, что у вас есть счётчик, который, подобно номеру текущего "
"такта, постоянно увеличивается. Давайте создадим наш счётчик и наш список:"

#: 08.4-Rings.md:23
#, no-wrap
msgid ""
"counter = 0\n"
"notes = [52, 55, 59]"
msgstr ""
"counter = 0\n"
"notes = [52, 55, 59]"

#: 08.4-Rings.md:28
#, fuzzy
msgid "We can now use our counter to access a note in our list:"
msgstr ""
"Теперь мы можем использовать счётчик, чтобы получить доступ к нотам в нашем сп"
"иске:"

#: 08.4-Rings.md:30
#, no-wrap
msgid "puts notes[counter]"
msgstr "puts notes[counter]"

#: 08.4-Rings.md:34
#, fuzzy
msgid "Great, we got `52`. Now, let's increment our counter and get another note:"
msgstr ""
"Здорово, мы получили `52`. Теперь давайте увеличим наш счётчик и получим другу"
"ю ноту:"

#: 08.4-Rings.md:37
#, no-wrap
msgid ""
"counter = (inc counter)\n"
"puts notes[counter]"
msgstr ""
"counter = (inc counter)\n"
"puts notes[counter]"

#: 08.4-Rings.md:42
#, fuzzy
msgid ""
"Super, we now get `55` and if we do it again we get `59`. However, if we do it"
" again, we'll run out of numbers in our list and get `nil`. What if we wanted "
"to just loop back round and start at the beginning of the list again? This is "
"what rings are for."
msgstr ""
"Супер, теперь мы получили `55` и если мы сделаем так снова, получим `59`. Одна"
"ко, если после этого мы увеличим счётчик ещё раз, мы выйдем за пределы нашего "
"списка и получим `nil`. Но что, если нам нужно вернуться к началу списка и сно"
"ва начинать извлекать элементы по кругу? Вот для этого и нужны кольца."

#: 08.4-Rings.md:47
#, fuzzy
msgid "Creating Rings"
msgstr "Создание Колец"

#: 08.4-Rings.md:49
#, fuzzy
msgid ""
"We can create rings one of two ways. Either we use the `ring` function with th"
"e elements of the ring as parameters:"
msgstr ""
"Мы можем создавать кольца одним из двух способов. Либо используем функцию `rin"
"g` с элементами кольца в качестве параметров:"

#: 08.4-Rings.md:52
#, no-wrap
msgid "(ring 52, 55, 59)"
msgstr "(ring 52, 55, 59)"

#: 08.4-Rings.md:56
#, fuzzy
msgid ""
"Or we can take a normal list and convert it to a ring by sending it the `.ring"
"` message:"
msgstr ""
"Либо можем взять обычный список и преобразовать его в кольцо, передав ему `.ri"
"ng` сообщение:"

#: 08.4-Rings.md:59
#, no-wrap
msgid "[52, 55, 59].ring"
msgstr "[52, 55, 59].ring"

#: 08.4-Rings.md:63
#, fuzzy
msgid "Indexing Rings"
msgstr "Индексирование Колец"

#: 08.4-Rings.md:65
#, fuzzy
msgid ""
"Once we have a ring, you can use it in exactly the same way you would use a no"
"rmal list with the exception that you can use indexes that are negative or lar"
"ger than the size of the ring and they'll wrap round to always point at one of"
" the ring's elements:"
msgstr ""
"Как только мы получили кольцо, мы можем использовать его точно так же, как есл"
"и бы мы использовали обычный список, за исключением того, что можно использова"
"ть отрицательные индексы и индексы, превышающие размеры кольца. И они будут по"
"вторяться по кругу и всегда указывать на один из элементов кольца:"

#: 08.4-Rings.md:70
#, no-wrap
msgid ""
"(ring 52, 55, 59)[0] #=> 52\n"
"(ring 52, 55, 59)[1] #=> 55\n"
"(ring 52, 55, 59)[2] #=> 59\n"
"(ring 52, 55, 59)[3] #=> 52\n"
"(ring 52, 55, 59)[-1] #=> 59"
msgstr ""
"(ring 52, 55, 59)[0] #=> 52\n"
"(ring 52, 55, 59)[1] #=> 55\n"
"(ring 52, 55, 59)[2] #=> 59\n"
"(ring 52, 55, 59)[3] #=> 52\n"
"(ring 52, 55, 59)[-1] #=> 59"

#: 08.4-Rings.md:78
#, fuzzy
msgid "Using Rings"
msgstr "Использование Колец"

#: 08.4-Rings.md:80
#, fuzzy
msgid ""
"Let's say we're using a variable to represent the current beat number. We can "
"use this as an index into our ring to fetch notes to play, or release times or"
" anything useful we've stored in our ring regardless of the beat number we're "
"currently on."
msgstr ""
"Допустим, мы используем переменную для хранения номера текущего такта. Мы може"
"м использовать её в качестве индекса в нашем кольце для извлечения нот, или вр"
"емени затухания или чего-нибудь полезного, что мы сохранили в нашем кольце, не"
"зависимо от номера такта, в котором мы находимся в данный момент."

#: 08.4-Rings.md:85
#, fuzzy
msgid "Scales and Chords are Rings"
msgstr "Гаммы И Аккорды Есть Кольца"

#: 08.4-Rings.md:87
#, fuzzy
msgid ""
"A useful thing to know is that the lists returned by `scale` and `chord` are a"
"lso rings and allow you to access them with arbitrary indexes."
msgstr ""
"Полезно знать, что списки, возвращаемые `scale` и `chord` также являются кольц"
"ами и позволяют получить к ним доступ с помощью произвольных индексов."

#: 08.4-Rings.md:90
#, fuzzy
msgid "Ring Constructors"
msgstr "Конструкторы Колец"

#: 08.4-Rings.md:92
#, fuzzy
msgid ""
"In addition to `ring` there are a number of other functions which will constru"
"ct a ring for us."
msgstr ""
"В дополнение к `ring` существует ряд других функций, которые будут создавать к"
"ольца для нас."

#: 08.4-Rings.md:95
#, fuzzy
msgid "`range` invites you specify a starting point, end point and step size."
msgstr "`range` предлагает вам указать начальную точку, конечную точку и размер шага."

#: 08.4-Rings.md:96
#, fuzzy
msgid "`bools` allows you to use `1`s and `0`s to succinctly represent booleans."
msgstr ""
"`bools` позволяет использовать `1` и `0`, чтобы кратко представлять логические"
" переменные."

#: 08.4-Rings.md:97
#, fuzzy
msgid "`knit` allows you to knit a sequence of repeated values."
msgstr "`knit` позволяет связывать в последовательности повторяющиеся значения."

#: 08.4-Rings.md:98
#, fuzzy
msgid "`spread` creates a ring of bools with a Euclidean distribution."
msgstr "`spread` создает кольцо логических значений с Евклидовым распределением."

#: 08.4-Rings.md:100
#, fuzzy
msgid "Take a look at their respective documentation for more information."
msgstr ""
"Взгляните на их соответствующую документацию для получения дополнительной инфо"
"рмации."

#: 08.5-Ring-Chains.md:1
msgid "8.5 Ring Chains"
msgstr ""

#: 08.5-Ring-Chains.md:3
#, fuzzy
msgid "Ring Chains"
msgstr "Колцевые Связки"

#: 08.5-Ring-Chains.md:5
#, fuzzy
msgid ""
"In addition to the constructors such as `range` and `spread` another way of cr"
"eating new rings is to manipulate existing rings."
msgstr ""
"Помимо конструкторов, таких как `range` и `spread`, есть и другой способ созда"
"ния новых колец - манипулирование существующими кольцами."

#: 08.5-Ring-Chains.md:9
#, fuzzy
msgid "Chain Commands"
msgstr "Связянные Методы"

#: 08.5-Ring-Chains.md:11
#, fuzzy
msgid "To explore this, take a simple ring:"
msgstr "Чтобы исследовать это, возьмём простое кольцо:"

#: 08.5-Ring-Chains.md:13
#, no-wrap
msgid "(ring 10, 20, 30, 40, 50)"
msgstr "(ring 10, 20, 30, 40, 50)"

#: 08.5-Ring-Chains.md:17
#, fuzzy
msgid ""
"What if we wanted it backwards? Well we'd use the chain command `.reverse` to "
"take the ring and turn it around:"
msgstr ""
"Что, если мы хотим перевернуть его задом наперёд? Тогда мы используем связанны"
"й метод `.reverse`, который разворачивает кольцо в обратную сторону:"

#: 08.5-Ring-Chains.md:20
#, no-wrap
msgid "(ring 10, 20, 30, 40, 50).reverse  #=> (ring 50, 40, 30, 20, 10)"
msgstr "(ring 10, 20, 30, 40, 50).reverse  #=> (ring 50, 40, 30, 20, 10)"

#: 08.5-Ring-Chains.md:24
#, fuzzy
msgid "Now, what if we wanted the first three values from the ring?"
msgstr "Так, а что, если мы захотим получить первые три элемента кольца?"

#: 08.5-Ring-Chains.md:26
#, no-wrap
msgid "(ring 10, 20, 30, 40, 50).take(3)  #=> (ring 10, 20, 30)"
msgstr "(ring 10, 20, 30, 40, 50).take(3)  #=> (ring 10, 20, 30)"

#: 08.5-Ring-Chains.md:30
#, fuzzy
msgid "Finally, what if we wanted to shuffle the ring?"
msgstr "И, наконец, что, если мы захотим перемешать элементы кольца?"

#: 08.5-Ring-Chains.md:32
#, no-wrap
msgid "(ring 10, 20, 30, 40, 50).shuffle  #=> (ring 40, 30, 10, 50, 20)"
msgstr "(ring 10, 20, 30, 40, 50).shuffle  #=> (ring 40, 30, 10, 50, 20)"

#: 08.5-Ring-Chains.md:36
#, fuzzy
msgid "Multiple Chains"
msgstr "Множественные Связки"

#: 08.5-Ring-Chains.md:38
#, fuzzy
msgid ""
"This is already a powerful way of creating new rings. However, the *real* powe"
"r comes when you chain a few of these commands together."
msgstr ""
"Это очень мощный способ создания новых колец. Однако, *реальная* мощь приходит"
", когда вы связываете несколько методов вместе."

#: 08.5-Ring-Chains.md:41
#, fuzzy
msgid "How about shuffling the ring, dropping 1 element and then taking the next 3?"
msgstr ""
"Как на счёт перемешать кольцо, отбросить 1 элемент, а затем получить первые 3 "
"элемента?"

#: 08.5-Ring-Chains.md:43
#, fuzzy
msgid "Let's take this in stages:"
msgstr "Давайте сделаем это в несколько этапов:"

#: 08.5-Ring-Chains.md:45
#, fuzzy
msgid "`(ring 10, 20, 30, 40, 50)` - our initial ring"
msgstr "`(ring 10, 20, 30, 40, 50)` - наше исходное кольцо"

#: 08.5-Ring-Chains.md:46
#, fuzzy
msgid "`(ring 10, 20, 30, 40, 50).shuffle` - shuffles - `(ring 40, 30, 10, 50, 20)`"
msgstr ""
"`(ring 10, 20, 30, 40, 50).shuffle` - перемешиваем - `(ring 40, 30, 10, 50, 20"
")`"

#: 08.5-Ring-Chains.md:47
#, fuzzy
msgid "`(ring 10, 20, 30, 40, 50).shuffle.drop(1)` - drop 1 - `(ring 30, 10, 50, 20)`"
msgstr ""
"`(ring 10, 20, 30, 40, 50).shuffle.drop(1)` - отбрасываем 1 элемент - `(ring 3"
"0, 10, 50, 20)`"

#: 08.5-Ring-Chains.md:48
#, fuzzy
msgid ""
"`(ring 10, 20, 30, 40, 50).shuffle.drop(1).take(3)` - take 3 - `(ring 30, 10, "
"50)`"
msgstr ""
"`(ring 10, 20, 30, 40, 50).shuffle.drop(1).take(3)` - берём 3 первых элемента "
"- `(ring 30, 10, 50)`"

#: 08.5-Ring-Chains.md:50
#, fuzzy
msgid ""
"Can you see how we can just create a long chain of these methods by just *stic"
"king them together*. We can combine these in any order we want creating an ext"
"remely rich and powerful way of generating new rings from existing ones."
msgstr ""
"Как вы видете, можно создавать длинные связки из этих методов просто *склеивая"
" их вместе*. Мы можем комбинировать их в любом порядке, в каком захотим, созда"
"вая чрезвычайно богатый и мощный способ генерации новых колец из существующих."

#: 08.5-Ring-Chains.md:55
#, fuzzy
msgid "Immutability"
msgstr "Неизменяемость"

#: 08.5-Ring-Chains.md:57
#, fuzzy
msgid ""
"These rings have a powerful and important property. They are immutable which m"
"eans that they can not change. This means that the chaining methods described "
"in this section *do not change rings* rather they *create new rings*. This mea"
"ns you're free to share rings across threads and start chaining them within a "
"thread knowing you won't be affecting any other thread using the same ring."
msgstr ""
"Наши кольца обладают одним очень важным свойством. Оно заключается в том, что "
"связанные методы, описанные в этом разделе *не изменяют кольца*, они *возвраща"
"ют новые кольца*. Это значит, что вы можете разделять кольцо между потоками вы"
"полнения и использовать разные методы в разных потоках, зная, что не повлияете"
" на другой поток, использующий то же самое кольцо."

#: 08.5-Ring-Chains.md:64
#, fuzzy
msgid "Available Chain Methods"
msgstr "Доступные Связанные Методы"

#: 08.5-Ring-Chains.md:66
#, fuzzy
msgid "Here's a list of the available chain methods for you to play with:"
msgstr "Вот список доступных для вас связанных методов:"

#: 08.5-Ring-Chains.md:68
#, fuzzy
msgid "`.reverse` - returns a reversed version of the ring"
msgstr "`.reverse` - возвращает отсортированную в обратном порядке версию кольца"

#: 08.5-Ring-Chains.md:69
#, fuzzy
msgid "`.sort` - creates a sorted version of the ring"
msgstr "`.sort` - возвращает отсортированную версию кольца"

#: 08.5-Ring-Chains.md:70
#, fuzzy
msgid "`.shuffle` - creates a shuffled version of the ring"
msgstr "`.shuffle` - возвращает отсортированную в случайном порядке версию кольца"

#: 08.5-Ring-Chains.md:71
msgid "`.pick(3)` - returns a ring with the results of calling `.choose` 3 times"
msgstr ""

#: 08.5-Ring-Chains.md:72
msgid ""
"`.pick` - similar to `.pick(3)` only the size defaults to the same as the orig"
"inal ring"
msgstr ""

#: 08.5-Ring-Chains.md:73
#, fuzzy
msgid "`.take(5)` - returns a new ring containing only the first 5 elements"
msgstr "`.take(5)` - возвращает кольцо, содержащее первые 5 элементов исходного кольца"

#: 08.5-Ring-Chains.md:74
#, fuzzy
msgid "`.drop(3)` - returns a new ring with everything but the first 3 elements"
msgstr ""
"`.drop(3)` - возвращает кольцо, содержащее все элементы исходного кольца, кром"
"е первых 3 элементов"

#: 08.5-Ring-Chains.md:75
#, fuzzy
msgid "`.butlast` - returns a new ring with the last element missing"
msgstr "`.butlast` - возвращает новое кольцо с отсутствующим последним элементом"

#: 08.5-Ring-Chains.md:76
#, fuzzy
msgid "`.drop_last(3)` - returns a new ring with the last 3 elements missing"
msgstr ""
"`.drop_last(3)` - возвращает новое кольцо с отсутствующими 3 последними элемен"
"тами"

#: 08.5-Ring-Chains.md:77
#, fuzzy
msgid "`.take_last(6)`- returns a new ring with only the last 6 elements"
msgstr ""
"`.take_last(6)`- возвращает кольцо, содержащее последние 6 элементов исходного"
" кольца"

#: 08.5-Ring-Chains.md:78
#, fuzzy
msgid "`.stretch(2)` - repeats each element in the ring twice"
msgstr "`.stretch(2)` - повторяет каждый элемент кольца дважды"

#: 08.5-Ring-Chains.md:79
#, fuzzy
msgid "`.repeat(3)` - repeats the entire ring 3 times"
msgstr "`.repeat(3)` - повторяет всё кольцо 3 раза"

#: 08.5-Ring-Chains.md:80
#, fuzzy
msgid "`.mirror` - adds the ring to a reversed version of itself"
msgstr "`.mirror` - добавляет кольцо к перевёрнутой версии себя"

#: 08.5-Ring-Chains.md:81
#, fuzzy
msgid "`.reflect` - same as mirror but doesn't duplicate middle value"
msgstr "`.reflect` - то же, что и `.mirror`, но не дублирует средний элемент"

#: 08.5-Ring-Chains.md:82
msgid ""
"`.scale(2)` - returns a new ring with all elements multiplied by 2 (assumes ri"
"ng contains numbers only)"
msgstr ""
"`.scale(2)` -  возвращает новое кольцо все элементы которого умножены на 2 ("
"если кольцо содержит только числа)"

#: 08.5-Ring-Chains.md:84
#, fuzzy
msgid ""
"Of course, those chain methods that take numbers can take other numbers too! S"
"o feel free to call `.drop(5)` instead of `.drop(3)` if you want to drop the f"
"irst 5 elements."
msgstr ""
"Конечно, связанные методы, принимающие числовые аргументы, могут принимать и д"
"ругие числа! Так что не стесняйтесь вызывать `.drop(5)` вместо `.drop(3)`, есл"
"и вы хотите отбросить первые 5 элементов кольца."

#: 09-Live-Coding.md:1
msgid "9 Live Coding"
msgstr "9 Лайв-кодинг"

#: 09-Live-Coding.md:5
#, fuzzy
msgid ""
"One of the most exciting aspects of Sonic Pi is that it enables you to write a"
"nd modify code live to make music, just like you might perform live with a gui"
"tar. One advantage of this approach is to give you more feedback whilst compos"
"ing (get a simple loop running and keep tweaking it till it sounds just perfec"
"t). However, the main advantage is that you can take Sonic Pi on stage and gig"
" with it."
msgstr ""
"Один из наиболее интересных аспектов Sonic Pi заключается в том, что он позвол"
"яет писать и модифицировать код вживую, играть музыку, как если бы вы выступал"
"и с гитарой. Одно из преимуществ такого подхода состоит в том, что он даёт вам"
" больше обратной связи во время сочинения (просто начни выполнение цикла и про"
"должай настройку до тех пор, пока звук не станет идеальным). Однако, главное п"
"реимущество заключается в том, что вы можете взять Sonic Pi на сцену и выступа"
"ть с ним."

#: 09-Live-Coding.md:12
#, fuzzy
msgid ""
"In this section we'll cover the fundamentals of turning your static code compo"
"sitions into dynamic performances."
msgstr ""
"В этом разделе мы рассмотрим основы превращения статического кода ваших сочине"
"ний в динамичное исполнение."

#: 09-Live-Coding.md:15
#, fuzzy
msgid "Hold on to your seats..."
msgstr "Держитесь за своё кресло..."

#: 09.1-Live-Coding-Fundamentals.md:1
msgid "9.1 Live Coding Fundamentals"
msgstr "9.1 Основы лайв-кодинга"

#: 09.1-Live-Coding-Fundamentals.md:5
#, fuzzy
msgid ""
"Now we've learned enough to really start having some fun. In this section we'l"
"l draw from all the previous sections and show you how you can start making yo"
"ur music compositions live and turning them into a performance. For that we'll"
" need 3 main ingredients:"
msgstr ""
"Теперь мы узнали достаточно, чтобы начать по-настоящему развлекаться. В этом р"
"азделе мы будем черпать из всех предыдущих разделов и узнаем, как вы сможете д"
"елать свои музыкальные композиции живыми и превращать их в выступления. Для эт"
"ого нам понадобится 3 основных компонента:"

#: 09.1-Live-Coding-Fundamentals.md:10
#, fuzzy
msgid "An ability to write code that makes sounds - CHECK!"
msgstr "Умение писать код, который создаёт звук - ПРОВЕРЬТЕ!"

#: 09.1-Live-Coding-Fundamentals.md:11
#, fuzzy
msgid "An ability to write functions - CHECK!"
msgstr "Умение писать функции - ПРОВЕРЬТЕ!"

#: 09.1-Live-Coding-Fundamentals.md:12
#, fuzzy
msgid "An ability to use (named) threads - CHECK!"
msgstr "Умение использовать (именовать) потоки - ПРОВЕРЬТЕ!"

#: 09.1-Live-Coding-Fundamentals.md:14
#, fuzzy
msgid ""
"Alrighty, let's get started. Let's live code our first sounds. We first need a"
" function containing the code we want to play. Let's start simple. We also wan"
"t to loop calls to that function in a thread:"
msgstr ""
"Чудненько, давайте начнём. Будем вживую кодировать наши первые звуки. Начнем с"
" простого. Сначала нам нужна функция, содержащая код, который мы хотим проигра"
"ть. Ещё мы хотим зациклить вызовы этой функции в отдельном потоке:"

#: 09.1-Live-Coding-Fundamentals.md:18
#, no-wrap
msgid ""
"define :my_loop do\n"
"  play 50\n"
"  sleep 1\n"
"end\n"
"in_thread(name: :looper) do\n"
"  loop do\n"
"    my_loop\n"
"  end\n"
"end"
msgstr ""
"define :my_loop do\n"
"  play 50\n"
"  sleep 1\n"
"end\n"
"in_thread(name: :looper) do\n"
"  loop do\n"
"    my_loop\n"
"  end\n"
"end"

#: 09.1-Live-Coding-Fundamentals.md:31
#, fuzzy
msgid ""
"If that looks a little too complicated to you, go back and re-read the section"
"s on functions and threads. It's not too complicated if you've already wrapped"
" your head around these things."
msgstr ""
"Если это выглядит для вас довольно сложным, вернитесь и перечитайте разделы о "
"функциях и потоках. Это не сложно, если раньше вы уже прокручивал эти вещи у с"
"ебя в голове."

#: 09.1-Live-Coding-Fundamentals.md:35
#, fuzzy
msgid ""
"What we have here is a function definition which just plays note 50 and sleeps"
" for a beat. We then define a named thread called `:looper` which just loops a"
"round calling `my_loop` repeatedly."
msgstr ""
"То, что мы здесь имеем - это определение функции, которая всего лишь играет но"
"ту 50 и немного ждёт. Затем мы определили именованную нить, названную `:looper"
"`, которая бесконечно выполняет цикл с функцией `my_loop`."

#: 09.1-Live-Coding-Fundamentals.md:39
#, fuzzy
msgid "If you run this code, you'll hear note 50 repeating again and again..."
msgstr "Если вы выполните этот код, то услышите ноту 50 повторяющуюся снова и снова..."

#: 09.1-Live-Coding-Fundamentals.md:41
#, fuzzy
msgid "Changing it up"
msgstr "Изменяем Это"

#: 09.1-Live-Coding-Fundamentals.md:43
#, fuzzy
msgid ""
"Now, this is where the fun starts. Whilst the code is *still running* change 5"
"0 to another number, say 55, then press the Run button again. Woah! It changed"
"! Live!"
msgstr ""
"Итак, вот где начинается веселье. В то время, как код *по-прежнему выполняется"
"*, изменим 50 на другое число, скажем, на 55, и снова нажмём кнопку \"Выполнить"
"\". Ого! Всё изменилось! Вживую!"

#: 09.1-Live-Coding-Fundamentals.md:47
#, fuzzy
msgid ""
"It didn't add a new layer because we're using named threads which only allow o"
"ne thread for each name. Also, the sound changed because we *redefined* the fu"
"nction. We gave `:my_loop` a new definition. When the `:looper` thread looped "
"around it simply called the new definition."
msgstr ""
"Это не добавило новый звуковой слой, так как мы используем именованные потоки "
"выполнения, которые допускают только один поток для каждого имени. Кроме того,"
" звук изменился, потому что мы *переопределили* функцию. Мы дали `:my_loop` но"
"вое определение. Когда нить `:looper` повторяла цикл, она просто вызвала новое"
" определение."

#: 09.1-Live-Coding-Fundamentals.md:52
#, fuzzy
msgid ""
"Try changing it again, change the note, change the sleep time. How about addin"
"g a `use_synth` statement? For example, change it to:"
msgstr ""
"Попробуйте изменить это снова - измените ноту, измените время сна. Как на счёт"
" добавления инструкции `use_synth`? Например, измените код на:"

#: 09.1-Live-Coding-Fundamentals.md:55
#, no-wrap
msgid ""
"define :my_loop do\n"
"  use_synth :tb303\n"
"  play 50, release: 0.3\n"
"  sleep 0.25\n"
"end"
msgstr ""
"define :my_loop do\n"
"  use_synth :tb303\n"
"  play 50, release: 0.3\n"
"  sleep 0.25\n"
"end"

#: 09.1-Live-Coding-Fundamentals.md:63
#, fuzzy
msgid ""
"Now it sounds pretty interesting, but we can spice it up further. Instead of p"
"laying the same note again and again, try playing a chord:"
msgstr ""
"Сейчас это звучит довольно интересно, но мы можем оживить это ещё больше. Вмес"
"то того, чтобы играть одну и ту же ноту снова и снова, попробуем сыграть аккор"
"д:"

#: 09.1-Live-Coding-Fundamentals.md:67
#, no-wrap
msgid ""
"define :my_loop do\n"
"  use_synth :tb303\n"
"  play chord(:e3, :minor), release: 0.3\n"
"  sleep 0.5\n"
"end"
msgstr ""
"define :my_loop do\n"
"  use_synth :tb303\n"
"  play chord(:e3, :minor), release: 0.3\n"
"  sleep 0.5\n"
"end"

#: 09.1-Live-Coding-Fundamentals.md:75
#, fuzzy
msgid "How about playing random notes from the chord:"
msgstr "Как на счёт воспроизведения случайных нот из аккорда:"

#: 09.1-Live-Coding-Fundamentals.md:77
#, no-wrap
msgid ""
"define :my_loop do\n"
"  use_synth :tb303\n"
"  play choose(chord(:e3, :minor)), release: 0.3\n"
"  sleep 0.25\n"
"end"
msgstr ""
"define :my_loop do\n"
"  use_synth :tb303\n"
"  play choose(chord(:e3, :minor)), release: 0.3\n"
"  sleep 0.25\n"
"end"

#: 09.1-Live-Coding-Fundamentals.md:85
#, fuzzy
msgid "Or using a random cutoff value:"
msgstr "Или использования случайных значений частоты среза:"

#: 09.1-Live-Coding-Fundamentals.md:87
#, no-wrap
msgid ""
"define :my_loop do\n"
"  use_synth :tb303\n"
"  play choose(chord(:e3, :minor)), release: 0.2, cutoff: rrand(60, 130)\n"
"  sleep 0.25\n"
"end"
msgstr ""
"define :my_loop do\n"
"  use_synth :tb303\n"
"  play choose(chord(:e3, :minor)), release: 0.2, cutoff: rrand(60, 130)\n"
"  sleep 0.25\n"
"end"

#: 09.1-Live-Coding-Fundamentals.md:95
#, fuzzy
msgid "Finally, add some drums:"
msgstr "Наконец, добавим немного барабанов:"

#: 09.1-Live-Coding-Fundamentals.md:97
#, no-wrap
msgid ""
"define :my_loop do\n"
"  use_synth :tb303\n"
"  sample :drum_bass_hard, rate: rrand(0.5, 2)\n"
"  play choose(chord(:e3, :minor)), release: 0.2, cutoff: rrand(60, 130)\n"
"  sleep 0.25\n"
"end"
msgstr ""
"define :my_loop do\n"
"  use_synth :tb303\n"
"  sample :drum_bass_hard, rate: rrand(0.5, 2)\n"
"  play choose(chord(:e3, :minor)), release: 0.2, cutoff: rrand(60, 130)\n"
"  sleep 0.25\n"
"end"

#: 09.1-Live-Coding-Fundamentals.md:106
#, fuzzy
msgid "Now things are getting exciting!"
msgstr "Теперь это становится увлекательным!"

#: 09.1-Live-Coding-Fundamentals.md:108
#, fuzzy
msgid ""
"However, before you jump up and start live coding with functions and threads, "
"stop what you're doing and read the next section on `live_loop` which will cha"
"nge the way you code in Sonic Pi forever..."
msgstr ""
"Однако, прежде чем вы начнёте живое кодирование с функциями и потоками, остано"
"вите то, что вы сейчас делаете, и прочтите следующий раздел `live_loop`, котор"
"ый изменит манеру вашего кодирования в Sonic Pi навсегда..."

#: 09.2-Live-Loops.md:1
msgid "9.2 Live Loops"
msgstr "9.2 Живые циклы"

#: 09.2-Live-Loops.md:3
#, fuzzy
msgid "Live Loops"
msgstr "Живые циклы"

#: 09.2-Live-Loops.md:5
#, fuzzy
msgid ""
"Ok, so this section of the tutorial is the real gem. If you only read one sect"
"ion, it should be this one. If you read the previous section on Live Coding Fu"
"ndamentals, `live_loop` is a simple way of doing exactly that but without havi"
"ng to write so much."
msgstr ""
"Окей, этот раздел учебника - настоящая жемчужина. Если вы решите прочесть толь"
"ко один раздел, это должен быть именно этот раздел. Если вы прочли предыдущий "
"раздел - основы лайвкодинга, `live_loop` - это простой способ сделать всё то ж"
"е самое, но без необходимости писать так много кода."

#: 09.2-Live-Loops.md:10
#, fuzzy
msgid ""
"If you didn't read the previous section, `live_loop` is the best way to jam wi"
"th Sonic Pi."
msgstr ""
"Если вы не читали предыдущий раздел, `live_loop` - это лучший способ поджемова"
"ть с Sonic Pi."

#: 09.2-Live-Loops.md:13
#, fuzzy
msgid "Let's play. Write the following in a new buffer:"
msgstr "Давайте поиграем. Наберите следующее в новом буфере:"

#: 09.2-Live-Loops.md:15
#, no-wrap
msgid ""
"live_loop :foo do\n"
"  play 60\n"
"  sleep 1\n"
"end"
msgstr ""
"live_loop :foo do\n"
"  play 60\n"
"  sleep 1\n"
"end"

#: 09.2-Live-Loops.md:22
#, fuzzy
msgid ""
"Now press the Run button. You hear a basic beep every beat. Nothing fun there."
" However, don't press Stop just yet. Change the `60` to `65` and press Run aga"
"in."
msgstr ""
"Теперь нажмите кнопку \"Выполнить\". Вы услышите базовый звуковой сигнал на кажд"
"ую долю такта. Здесь нет ничего весёлого. Однако, пока не нажимайте \"Остановит"
"ь\". Измените `60` на `65` и нажмите \"Выполнить\" снова."

#: 09.2-Live-Loops.md:26
#, fuzzy
msgid "Woah! It changed *automatically* without missing a beat. This is live coding."
msgstr "Ого! Тон изменился *автоматически* без пропуска доли. Это и есть лайвкодинг."

#: 09.2-Live-Loops.md:28
#, fuzzy
msgid ""
"Why not change it to be more bass like? Just update your code whilst it's play"
"ing:"
msgstr ""
"Почему бы не изменить звук так, чтобы он больше походил на бас? Просто обновит"
"е свой код пока тот играет:"

#: 09.2-Live-Loops.md:30
#, no-wrap
msgid ""
"live_loop :foo do\n"
"  use_synth :prophet\n"
"  play :e1, release: 8\n"
"  sleep 8\n"
"end"
msgstr ""
"live_loop :foo do\n"
"  use_synth :prophet\n"
"  play :e1, release: 8\n"
"  sleep 8\n"
"end"

#: 09.2-Live-Loops.md:38
#, fuzzy
msgid "Then hit Run."
msgstr "Затем нажмите \"Выполнить\"."

#: 09.2-Live-Loops.md:40
#, fuzzy
msgid "Let's make the cutoff move around:"
msgstr "Давайте добавим изменяющуюся частоту среза:"

#: 09.2-Live-Loops.md:42
#, no-wrap
msgid ""
"live_loop :foo do\n"
"  use_synth :prophet\n"
"  play :e1, release: 8, cutoff: rrand(70, 130)\n"
"  sleep 8\n"
"end"
msgstr ""
"live_loop :foo do\n"
"  use_synth :prophet\n"
"  play :e1, release: 8, cutoff: rrand(70, 130)\n"
"  sleep 8\n"
"end"

#: 09.2-Live-Loops.md:50
#, fuzzy
msgid "Hit Run again."
msgstr "Нажмите \"Выполнить\" снова."

#: 09.2-Live-Loops.md:52
#, fuzzy
msgid "Add some drums:"
msgstr "Добавьте какие-нибудь барабаны:"

#: 09.2-Live-Loops.md:54
#, no-wrap
msgid ""
"live_loop :foo do\n"
"  sample :loop_garzul\n"
"  use_synth :prophet\n"
"  play :e1, release: 8, cutoff: rrand(70, 130)\n"
"  sleep 8\n"
"end"
msgstr ""
"live_loop :foo do\n"
"  sample :loop_garzul\n"
"  use_synth :prophet\n"
"  play :e1, release: 8, cutoff: rrand(70, 130)\n"
"  sleep 8\n"
"end"

#: 09.2-Live-Loops.md:63
#, fuzzy
msgid "Change the note from `e1` to `c1`:"
msgstr "Измените ноту с `e1` на `c1`:"

#: 09.2-Live-Loops.md:65
#, no-wrap
msgid ""
"live_loop :foo do\n"
"  sample :loop_garzul\n"
"  use_synth :prophet\n"
"  play :c1, release: 8, cutoff: rrand(70, 130)\n"
"  sleep 8\n"
"end"
msgstr ""
"live_loop :foo do\n"
"  sample :loop_garzul\n"
"  use_synth :prophet\n"
"  play :c1, release: 8, cutoff: rrand(70, 130)\n"
"  sleep 8\n"
"end"

#: 09.2-Live-Loops.md:74
#, fuzzy
msgid "Now stop listening to me and play around yourself! Have fun!"
msgstr "Теперь хватит слушать меня и начните играь сами! Веселись!"

#: 09.3-Multiple-Live-Loops.md:1
msgid "9.3 Multiple Live Loops"
msgstr ""

#: 09.3-Multiple-Live-Loops.md:3
#, fuzzy
msgid "Multiple Live Loops"
msgstr "Несколько Живых Циклов"

#: 09.3-Multiple-Live-Loops.md:5
#, fuzzy
msgid "Consider the following live loop:"
msgstr "Рассмотрим следующий живой цикл:"

#: 09.3-Multiple-Live-Loops.md:7
#, no-wrap
msgid ""
"live_loop :foo do\n"
"  play 50\n"
"  sleep 1\n"
"end"
msgstr ""
"live_loop :foo do\n"
"  play 50\n"
"  sleep 1\n"
"end"

#: 09.3-Multiple-Live-Loops.md:14
#, fuzzy
msgid ""
"You may have wondered why it needs the name `:foo`. This name is important bec"
"ause it signifies that this live loop is different from all other live loops."
msgstr ""
"Вы, наверное, заинтересовались, почему он называется `:foo`. Это имя имеет зна"
"чение, поскольку оно показывает, что этот живой цикл отличается от всех других"
" живых циклов."

#: 09.3-Multiple-Live-Loops.md:18
#, fuzzy
msgid "*There can never be two live loops running with the same name*."
msgstr "*Не может быть двух живых циклов, выполняющихся под одним именем*."

#: 09.3-Multiple-Live-Loops.md:20
#, fuzzy
msgid ""
"This means that if we want multiple concurrently running live loops, we just n"
"eed to give them different names:"
msgstr ""
"Это значит, что если мы хотим иметь несколько одновременно выполняющихся цикло"
"в, нам просто нужно дать им разные имена:"

#: 09.3-Multiple-Live-Loops.md:23
#, no-wrap
msgid ""
"live_loop :foo do\n"
"  use_synth :prophet\n"
"  play :c1, release: 8, cutoff: rrand(70, 130)\n"
"  sleep 8\n"
"end\n"
"live_loop :bar do\n"
"  sample :bd_haus\n"
"  sleep 0.5\n"
"end"
msgstr ""
"live_loop :foo do\n"
"  use_synth :prophet\n"
"  play :c1, release: 8, cutoff: rrand(70, 130)\n"
"  sleep 8\n"
"end\n"
"live_loop :bar do\n"
"  sample :bd_haus\n"
"  sleep 0.5\n"
"end"

#: 09.3-Multiple-Live-Loops.md:36
#, fuzzy
msgid ""
"You can now update and change each live loop independently and it all just wor"
"ks."
msgstr ""
"Теперь можно обновлять и изменять каждый живой цикл отдельно и всё будет прекр"
"асно работать."

#: 09.3-Multiple-Live-Loops.md:39
#, fuzzy
msgid "Syncing Live Loops"
msgstr "Синхронизация Живых Циклов"

#: 09.3-Multiple-Live-Loops.md:41
#, fuzzy
msgid ""
"One thing you might have already noticed is that live loops work automatically"
" with the thread cue mechanism we explored previously. Every time the live loo"
"p loops, it generates a new `cue` event with the name of the live loop. We can"
" therefore `sync` on these cues to ensure our loops are in sync without having"
" to stop anything."
msgstr ""
"Есть один важный момент, который вы, наверное, уже заметили - все живые циклы "
"автоматически работают с механизмом распарралеливания потоков, который мы иссл"
"едовали ранее. Всякий раз, когда живой цикл начинает выполняться, он генерируе"
"т новое `cue` событие с названием цикла. Следовательно, мы можем `sync` эти си"
"гналы, чтобы гарантировать нашим циклам синхронизацию без необходимости что-ли"
"бо останавливать."

#: 09.3-Multiple-Live-Loops.md:47
#, fuzzy
msgid "Consider this badly synced code:"
msgstr "Рассмотрим этот плохо синхронизированный код:"

#: 09.3-Multiple-Live-Loops.md:49
#, no-wrap
msgid ""
"live_loop :foo do\n"
"  play :e4, release: 0.5\n"
"  sleep 0.4\n"
"end\n"
"live_loop :bar do\n"
"  sample :bd_haus\n"
"  sleep 1\n"
"end"
msgstr ""
"live_loop :foo do\n"
"  play :e4, release: 0.5\n"
"  sleep 0.4\n"
"end\n"
"live_loop :bar do\n"
"  sample :bd_haus\n"
"  sleep 1\n"
"end"

#: 09.3-Multiple-Live-Loops.md:61
#, fuzzy
msgid ""
"Let's see if we can fix the timing and sync without stopping it. First, let's "
"fix the `:foo` loop to make the sleep a factor of 1 - something like `0.5` wil"
"l do:"
msgstr ""
"Давайте посмотрим, сможем ли мы исправить тайминг и синхронизировать его без о"
"становки воспроизведения. Сначала исправим время сна в цикле `:foo` на что-то "
"вроде `0.5`:"

#: 09.3-Multiple-Live-Loops.md:65
#, no-wrap
msgid ""
"live_loop :foo do\n"
"  play :e4, release: 0.5\n"
"  sleep 0.5\n"
"end\n"
"live_loop :bar do\n"
"  sample :bd_haus\n"
"  sleep 1\n"
"end"
msgstr ""
"live_loop :foo do\n"
"  play :e4, release: 0.5\n"
"  sleep 0.5\n"
"end\n"
"live_loop :bar do\n"
"  sample :bd_haus\n"
"  sleep 1\n"
"end"

#: 09.3-Multiple-Live-Loops.md:77
#, fuzzy
msgid ""
"We're not quite finished yet though - you'll notice that the beats don't quite"
" line up correctly. This is because the loops are *out of phase*. Let's fix th"
"at by syncing one to the other:"
msgstr ""
"Но мы ещё не совсем закончили, ведь вы заметили, что такты пока не выстроились"
" правильно. Это происходит потому, что циклы *не в фазе*. Давайте исправим это"
", синхронизировав один цикл с другим:"

#: 09.3-Multiple-Live-Loops.md:81
#, no-wrap
msgid ""
"live_loop :foo do\n"
"  play :e4, release: 0.5\n"
"  sleep 0.5\n"
"end\n"
"live_loop :bar do\n"
"  sync :foo\n"
"  sample :bd_haus\n"
"  sleep 1\n"
"end"
msgstr ""
"live_loop :foo do\n"
"  play :e4, release: 0.5\n"
"  sleep 0.5\n"
"end\n"
"live_loop :bar do\n"
"  sync :foo\n"
"  sample :bd_haus\n"
"  sleep 1\n"
"end"

#: 09.3-Multiple-Live-Loops.md:94
#, fuzzy
msgid "Wow, everything is now perfectly in time - all without stopping."
msgstr "Ого, теперь всё прекрасно синхронизируется по времени и всё это без остановки."

#: 09.3-Multiple-Live-Loops.md:96
#, fuzzy
msgid "Now, go forth and live code with live loops!"
msgstr "А теперь вперёд! Кодируйте вживую с живыми петлями!"

#: 09.4-Ticking.md:1
msgid "9.4 Ticking"
msgstr ""

#: 09.4-Ticking.md:3
#, fuzzy
msgid "Ticking"
msgstr "Тики"

#: 09.4-Ticking.md:5
#, fuzzy
msgid ""
"Something you'll likely find yourself doing a lot when live coding is looping "
"through rings. You'll be putting notes into rings for melodies, sleeps for rhy"
"thms, chord progressions, timbral variations, etc. etc."
msgstr ""
"Однажды, кодируя вживую, вы, вероятно, найдёте себя делающими множество вещей "
"с помощью циклов, основанных на кольцах. Вы будете помещать в кольца мелодии, "
"ритмы, последовательности аккордов, тембральные изменения и т.д и т.п."

#: 09.4-Ticking.md:9
#, fuzzy
msgid "Ticking Rings"
msgstr "Тики И Кольца"

#: 09.4-Ticking.md:11
#, fuzzy
msgid ""
"Sonic Pi provides a *very* handy tool for working with rings within `live_loop"
"`s. It's called the tick system. In the section about the rings we were talkin"
"g about the counter that is constantly increasing, like a current beat number."
" Tick just implements this idea. It provides you with the ability to *tick thr"
"ough rings*. Let's look at an example:"
msgstr ""
"Sonic Pi предоставляет *очень* удобный инструмент для работы с кольцами внутри"
" `live_loop`. Он называется системой тиков. В разделе о кольцах мы говорили о "
"счётчике, который постоянно увеличиватся, подобно номеру текущего такта. Тик к"
"ак раз и реализует эту идею. Давайте рассмотрим примеры:"

#: 09.4-Ticking.md:17
#, no-wrap
msgid ""
"counter = 0\n"
"live_loop :arp do\n"
"  play (scale :e3, :minor_pentatonic)[counter], release: 0.1\n"
"  counter += 1\n"
"  sleep 0.125\n"
"end"
msgstr ""
"counter = 0\n"
"live_loop :arp do\n"
"  play (scale :e3, :minor_pentatonic)[counter], release: 0.1\n"
"  counter += 1\n"
"  sleep 0.125\n"
"end"

#: 09.4-Ticking.md:26
#, fuzzy
msgid "This is equivalent to:"
msgstr "Это эквивалентно:"

#: 09.4-Ticking.md:28
#, no-wrap
msgid ""
"live_loop :arp do\n"
"  play (scale :e3, :minor_pentatonic).tick, release: 0.1\n"
"  sleep 0.125\n"
"end"
msgstr ""
"live_loop :arp do\n"
"  play (scale :e3, :minor_pentatonic).tick, release: 0.1\n"
"  sleep 0.125\n"
"end"

#: 09.4-Ticking.md:35
#, fuzzy
msgid ""
"Here, we're just grabbing the scale E3 minor pentatonic and ticking through ea"
"ch element. This is done by adding `.tick` to the end of the scale declaration"
". This tick is local to the live loop, so each live loop can have its own inde"
"pendent tick:"
msgstr ""
"Здесь мы просто берём минорную пентатонику, построенную от e3, и перебираем ка"
"ждый элемент кольца. Это делается путём добавления `.tick` в конец объявления "
"гаммы. Тик является локальным для живого цикла, поэтому каждый живой цикл може"
"т иметь свой собственный, независимый тик:"

#: 09.4-Ticking.md:40
#, no-wrap
msgid ""
"live_loop :arp do\n"
"  play (scale :e3, :minor_pentatonic).tick, release: 0.1\n"
"  sleep 0.125\n"
"end\n"
"live_loop :arp2 do\n"
"  use_synth :dsaw\n"
"  play (scale :e2, :minor_pentatonic, num_octaves: 3).tick, release: 0.25\n"
"  sleep 0.25\n"
"end"
msgstr ""
"live_loop :arp do\n"
"  play (scale :e3, :minor_pentatonic).tick, release: 0.1\n"
"  sleep 0.125\n"
"end\n"
"live_loop :arp2 do\n"
"  use_synth :dsaw\n"
"  play (scale :e2, :minor_pentatonic, num_octaves: 3).tick, release: 0.25\n"
"  sleep 0.25\n"
"end"

#: 09.4-Ticking.md:53
#, fuzzy
msgid "Tick"
msgstr "Функция tick"

#: 09.4-Ticking.md:55
#, fuzzy
msgid "You can also call `tick` as a standard fn and use the value as an index:"
msgstr ""
"Вы также можете вызвать `tick` как стандартную функцию и использовать возвраща"
"емое ею значение в качестве индекса:"

#: 09.4-Ticking.md:57
#, no-wrap
msgid ""
"live_loop :arp do\n"
"  idx = tick\n"
"  play (scale :e3, :minor_pentatonic)[idx], release: 0.1\n"
"  sleep 0.125\n"
"end"
msgstr ""
"live_loop :arp do\n"
"  idx = tick\n"
"  play (scale :e3, :minor_pentatonic)[idx], release: 0.1\n"
"  sleep 0.125\n"
"end"

#: 09.4-Ticking.md:65
#, fuzzy
msgid ""
"However, it is much nicer to call `.tick` at the end. The `tick` fn is for whe"
"n you want to do fancy things with the tick value and for when you want to use"
" ticks for other things than indexing into rings."
msgstr ""
"Однако, гораздо изящнее вызывать `.tick` в конце объявления кольцевого списка."
" Функция `tick` полезна, когда вы хотите сделать что-то необычное с величиной "
"тика или, если нужно, использовать тики для чего-то отличного от индексировани"
"я в кольцах."

#: 09.4-Ticking.md:70
#, fuzzy
msgid "Look"
msgstr "Функция Look"

#: 09.4-Ticking.md:72
#, fuzzy
msgid ""
"The magical thing about tick is that not only does it return a new index (or t"
"he value of the ring at that index) it also makes sure that next time you call"
" tick, it's the next value. Take a look at the examples in the docs for `tick`"
" for many ways of working with this. However, for now, it's important to point"
" out that sometimes you'll want to just look at the current tick value and *no"
"t increase* it. This is available via the `look` fn. You can call `look` as a "
"standard fn or by adding `.look` to the end of a ring."
msgstr ""
"Магическая особенность тика заключается в том, что он не только возвращает нов"
"ый индекс (или элемент кольцевого списка по этому индексу), он также гарантиру"
"ет, что в следующий раз, когда вы вызовете тик, вы получите следующее значение"
". Посмотрите примеры для функции `tick` в разделе \"Язык\" документации, чтобы у"
"знать о различных способах работы с ней. Впрочем, сейчас необходимо отметить, "
"что иногда вам захочется просто посмотреть на текущее значение тика и *не увел"
"ичивать* его. Это доступно с помощью Функции `look`. Вы можете вызвать `look` "
"как стандартную функцию путем добавления `.look` в конец кольцевого списка."

#: 09.4-Ticking.md:81
#, fuzzy
msgid "Naming Ticks"
msgstr "Именование Тиков"

#: 09.4-Ticking.md:83
#, fuzzy
msgid ""
"Finally, sometimes you'll need more than one tick per live loop. This is achie"
"ved by giving your tick a name:"
msgstr ""
"Наконец, иногда вам может потребоваться использовать более одного тика внутри "
"живой петли. Это достигается путем предоставления вашему тику имени:"

#: 09.4-Ticking.md:86
#, no-wrap
msgid ""
"live_loop :arp do\n"
"  play (scale :e3, :minor_pentatonic).tick(:foo), release: 0.1\n"
"  sleep (ring 0.125, 0.25).tick(:bar)\n"
"end"
msgstr ""
"live_loop :arp do\n"
"  play (scale :e3, :minor_pentatonic).tick(:foo), release: 0.1\n"
"  sleep (ring 0.125, 0.25).tick(:bar)\n"
"end"

#: 09.4-Ticking.md:93
#, fuzzy
msgid ""
"Here we're using two ticks one for the note to play and another for the sleep "
"time. As they're both in the same live loop, to keep them separate we need to "
"give them unique names. This is exactly the same kind of thing as naming `live"
"_loop`s - we just pass a symbol prefixed with a `:`. In the example above we c"
"alled one tick `:foo` and the other `:bar`. If we want to `look` at these we a"
"lso need to pass the name of the tick to `look`."
msgstr ""
"Здесь мы используем два тика - один для игры нот, другой для времени сна. Так "
"как они оба находятся в одной и той же живой петле, чтобы держать их раздельно"
", нам нужно дать им уникальные имена. Это тот же самое, что и именование `live"
"_loop` - мы просто передаем функции аргумент с префиксом `:`. В примере выше м"
"ы назвали один тик `:foo` а другой `:bar`. Если мы хотим применить функцию `lo"
"ok` к одному из тиков, нам нужно передать имя тика функции `look`."

#: 09.4-Ticking.md:101
#, fuzzy
msgid "Don't make it too complicated"
msgstr "Не Делайте Это Слишком Сложным"

#: 09.4-Ticking.md:103
#, fuzzy
msgid ""
"Most of the power in the tick system isn't useful when you get started. Don't "
"try and learn everything in this section. Just focus on ticking through a sing"
"le ring. That'll give you most of the joy and simplicity of ticking through ri"
"ngs in your `live_loop`s."
msgstr ""
"Большая часть мощности системы тиков не будет полезной, пока вы ещё только нач"
"инаете осваивать Sonic Pi. Не пытайтесь сразу выучить всё в этом разделе. Прос"
"то сосредоточьтесь на одном тике для одного кольца. Это даст вам больше радост"
"и и простоты применения тиков для колец в твоих `live_loop`."

#: 09.4-Ticking.md:108
#, fuzzy
msgid ""
"Take a look at the documentation for `tick` where there are many useful exampl"
"es and happy ticking!"
msgstr ""
"Взгляните на документацию для функции `tick`, там много полезных примеров. Сча"
"стливых тиков!"

#: 10-State.md:1
msgid "10 Time State"
msgstr "10 Временное Состояние"

#: 10-State.md:3
msgid "Time State"
msgstr "Временное Состояние"

#: 10-State.md:5
#, fuzzy
msgid ""
"Often it is useful to have information that is *shared across multiple threads"
" or live loops*. For example, you might want to share a notion of the current "
"key, BPM or even more abstract concepts such as the current 'complexity' (whic"
"h you'd potentially interpret in different ways across different threads). We "
"also don't want to lose any of our existing determinism guarantees when doing "
"this. In other words, we'd still like to be able to share code with others and"
" know exactly what they'll hear when they run it. At the end of Section 5.6 of"
" this tutorial we briefly discussed why we *should not use variables to share "
"information across threads* due to a loss of determinism (in turn due to race "
"conditions)."
msgstr ""
"Часто полезно иметь информацию, которая является *общей для нескольких "
"потоков или живых циклов*. Например, тебе может понадобиться сделать общими "
"значение текущей тональности, BMP или даже более отвлеченные понятия такие "
"как текущая 'сложность' (которые могут быть истолкованы по-разному в разных "
"потоках).  Мы также не хотим потерять любую существующую гарантию "
"детерминированности когда делаем это. Другими словами, мы хотим иметь "
"возможность поделиться кодом с другими и знать наверняка что они услышат "
"когда запустят его. В конце Главы 5.6 этого руководства мы кратко обсудили, "
"почему мы *не должны использовать переменные для передачи информации между "
"потоками*"

#: 10-State.md:16
msgid ""
"Sonic Pi's solution to the problem of easily working with global variables in "
"a deterministic way is through a novel system it calls Time State. This might "
"sound complex and difficult (in fact, in the UK, programming with multiple thr"
"eads and shared memory is typically a university level subject). However, as y"
"ou'll see, just like playing your first note, *Sonic Pi makes it incredibly si"
"mple to share state across threads* whilst still keeping your programs *thread"
"-safe and deterministic.*."
msgstr ""
"Sonic Pi решает проблему облегчения работы с глобальными переменными в "
"детерминированном пути через новаторскую систему, называемую Временное "
"Состояние. Это может звучать сложно и трудно (на самом деле, в "
"Великобритании программирование с несколькими потоками и разделяемой "
"памятью, как правило, является предметом университетского уровня). Однако, "
"как вы увидите, так же, как играть вашу первую ноту, *Sonic PI делает обмен "
"состоянием через потоки невероятно простым*, в то же время сохраняя ваши "
"программы *потоко-безопасными и детерминированными. *."

#: 10-State.md:24
msgid "Meet `get` and `set`..."
msgstr "Встречайте `get` и `set` ..."

#: 10.1-Set-and-Get.md:1
msgid "10.1 Set and Get"
msgstr "10.1 Set и Get"

#: 10.1-Set-and-Get.md:3
msgid "Set and Get"
msgstr "Set и Get"

#: 10.1-Set-and-Get.md:5
msgid ""
"Sonic Pi has a global memory store called Time State. The two main things you "
"do with it are to `set` information and `get` information. Let's dive deeper.."
"."
msgstr ""
"Sonic PI имеет глобальное хранилище памяти, называемое Временным Состоянием. "
"В основном оно используется чтобы \"установить\" (set) информацию и \""
"получить\" (get)  информацию. Давайте нырнем глубже..."

#: 10.1-Set-and-Get.md:9
msgid "Set"
msgstr "Set"

#: 10.1-Set-and-Get.md:11
msgid "To store information into the Time State we need two things:"
msgstr "Чтобы хранить информацию во Временном Состоянии нам нужны две вещи:"

#: 10.1-Set-and-Get.md:13
msgid "the information we want to store,"
msgstr "информация, которую мы хотим сохранить,"

#: 10.1-Set-and-Get.md:14
msgid "a unique name (key) for the information."
msgstr "уникальное имя (ключ) для этой информации."

#: 10.1-Set-and-Get.md:16
msgid ""
"For example, we might want to store the number `3000` with the key `:intensity"
"`. This is possible using the `set` function:"
msgstr ""
"Например, мы можем захотеть хранить число `3000` с ключом `:intensity`. Это "
"можно сделать используя функцию  `set`:"

#: 10.1-Set-and-Get.md:19
#, no-wrap
msgid "set :intensity, 3000"
msgstr "set :intensity, 3000"

#: 10.1-Set-and-Get.md:23
msgid ""
"We can use any name for our key. If information has already been stored with t"
"hat key, our new `set` will override it:"
msgstr ""
"Мы можем дать ключу любое имя. Если какая-то информация уже хранится под "
"этим именем, наш новый `set` перезапишет её:"

#: 10.1-Set-and-Get.md:26
#, no-wrap
msgid ""
"set :intensity, 1000\n"
"set :intensity, 3000"
msgstr ""
"set :intensity, 1000\n"
"set :intensity, 3000"

#: 10.1-Set-and-Get.md:31
msgid ""
"In the above example, as we stored both numbers under the same key, the last c"
"all to `set` 'wins', so the number associated with `:intensity` will be `3000`"
" as the first call to `set` is effectively overridden."
msgstr ""
"В примере выше, где мы сохранили оба числа под одним ключом, последний вызов "
"`set` 'побеждает', поэтому число связанное с `:intensity` будет равно `3000`"
", так как первый вызов 'set'  эффективно перезаписан."

#: 10.1-Set-and-Get.md:35
msgid "Get"
msgstr "Get"

#: 10.1-Set-and-Get.md:37
msgid ""
"To fetch information from the Time State we just need the key we used to `set`"
" it, which in our case is `:intensity`. We then just need to call `get[:intens"
"ity]` which we can see by printing out the result to the log:"
msgstr ""
"Для извлечения информации из Временного Состояния нам просто нужен ключ, "
"который мы использовали в `set`, в нашем случае это `:intensity`. Тогда нам "
"просто нужно вызвать `get[:intensity]`, результат которого выведем на экран:"

#: 10.1-Set-and-Get.md:42
#, no-wrap
msgid "print get[:intensity] #=> prints 3000"
msgstr "print get[:intensity] #=> выведет 3000"

#: 10.1-Set-and-Get.md:46
msgid ""
"Notice that calls to `get` can return information that was `set` in a previous"
" run. Once a piece of information has been `set` it is available until either "
"the information is overridden (just like we clobbered the `:intensity` value o"
"f `1000` to `3000` above) or Sonic Pi is closed."
msgstr ""

#: 10.1-Set-and-Get.md:52
#, fuzzy
msgid "Multiple Threads"
msgstr "Потоки Выполнения"

#: 10.1-Set-and-Get.md:54
msgid ""
"The main benefit of the Time State system is that it can be safely used across"
" threads or live loops. For example, you could have one live loop setting info"
"rmation and another one getting it:"
msgstr ""

#: 10.1-Set-and-Get.md:58
#, no-wrap
#, fuzzy
msgid ""
"live_loop :setter do\n"
"  set :foo, rrand(70, 130)\n"
"  sleep 1\n"
"end\n"
"live_loop :getter do\n"
"  puts get[:foo]\n"
"  sleep 0.5\n"
"end"
msgstr "rrand"

#: 10.1-Set-and-Get.md:70
msgid ""
"The nice thing about using `get` and `set` across threads like this is that it"
" will always produce the same result every time you hit run. Go on, try it. Se"
"e if you get the following in your log:"
msgstr ""

#: 10.1-Set-and-Get.md:74
#, no-wrap
msgid ""
"{run: 0, time: 0.0}\n"
" └─ 125.72265625\n"
"{run: 0, time: 0.5}\n"
" └─ 125.72265625\n"
"{run: 0, time: 1.0}\n"
" └─ 76.26220703125\n"
"{run: 0, time: 1.5}\n"
" └─ 76.26220703125\n"
"{run: 0, time: 2.0}\n"
" └─ 114.93408203125\n"
"{run: 0, time: 2.5}\n"
" └─ 114.93408203125\n"
"{run: 0, time: 3.0}\n"
" └─ 75.6048583984375\n"
"{run: 0, time: 3.5}\n"
" └─ 75.6048583984375"
msgstr ""

#: 10.1-Set-and-Get.md:100
msgid ""
"Try running it a few times - see, it's the same every time. This is what we ca"
"ll deterministic behaviour and it's really very important when we want to shar"
"e our music as code and know that the person playing the code is hearing exact"
"ly what we wanted them to hear (just like playing an MP3 or internet stream so"
"unds the same for all listeners)."
msgstr ""

#: 10.1-Set-and-Get.md:107
msgid "A Simple Deterministic State System"
msgstr ""

#: 10.1-Set-and-Get.md:109
#, fuzzy
msgid ""
"Back in Section 5.6 we discussed why using variables across threads can lead t"
"o random behaviour. This stops us from being able to reliably reproduce code s"
"uch as this:"
msgstr "rand"

#: 10.1-Set-and-Get.md:113
#, no-wrap
msgid ""
"## An Example of Non-Deterministic Behaviour\n"
"## (due to race conditions caused by multiple\n"
"## live loops manipulating the same variable\n"
"## at the same time).\n"
"##  \n"
"## If you run this code you'll notice\n"
"## that the list that's printed is\n"
"## not always sorted!\n"
"a = (ring 6, 5, 4, 3, 2, 1)\n"
"live_loop :shuffled do\n"
"  a = a.shuffle\n"
"  sleep 0.5\n"
"end\n"
"live_loop :sorted do\n"
"  a = a.sort\n"
"  sleep 0.5\n"
"  puts \"sorted: \", a\n"
"end"
msgstr ""

#: 10.1-Set-and-Get.md:136
msgid "Let's take a look at how this might look using `get` and `set`:"
msgstr ""

#: 10.1-Set-and-Get.md:138
#, no-wrap
msgid ""
"## An Example of Deterministic Behaviour\n"
"## (despite concurrent access of shared state)\n"
"## using Sonic Pi's new Time State system.\n"
"##\n"
"## When this code is executed, the list that's\n"
"## printed is always sorted!\n"
"set :a, (ring 6, 5, 4, 3, 2, 1)\n"
"live_loop :shuffled do\n"
"  set :a, get[:a].shuffle\n"
"  sleep 0.5\n"
"end\n"
"live_loop :sorted do\n"
"  set :a, get[:a].sort\n"
"  sleep 0.5\n"
"  puts \"sorted: \", get[:a]\n"
"end"
msgstr ""

#: 10.1-Set-and-Get.md:159
msgid ""
"Notice how this code is pretty much identical to the version using a variable "
"before it. However when you run the code, it behaves as you would expect with "
"any typical Sonic Pi code - *it does the same thing every time* in this case t"
"hanks to the Time State system."
msgstr ""

#: 10.1-Set-and-Get.md:164
msgid ""
"Therefore, when sharing information across live loops and threads, use `get` a"
"nd `set` instead of variables for deterministic, reproducible behaviour."
msgstr ""

#: 10.2-Sync.md:1
msgid "10.2 Sync"
msgstr ""

#: 10.2-Sync.md:3
msgid "Sync"
msgstr ""

#: 10.2-Sync.md:5
msgid ""
"Section 5.7 introduced the functions `cue` and `sync` when dealing with the is"
"sue of synchronising threads. What it didn't explain was that it is the Time S"
"tate system which provides this functionality. It just so happens that `set` i"
"s actually a variation of `cue` and is built on top of the same core functiona"
"lity which is to insert information into the Time State system. Additionally, "
"`sync` is also designed in such a way that it works seamlessly with Time State"
" - any information that we plan to store in Time State we can sync on. In othe"
"r words - *we `sync` on events yet to be inserted into Time State*."
msgstr ""

#: 10.2-Sync.md:15
msgid "Waiting for Events"
msgstr ""

#: 10.2-Sync.md:17
msgid ""
"Let's take a quick look at how to use `sync` to wait for new events to be adde"
"d to Time State:"
msgstr ""

#: 10.2-Sync.md:20
#, no-wrap
#, fuzzy
msgid ""
"in_thread do\n"
"  sync :foo\n"
"  sample :ambi_lunar_land\n"
"end\n"
"sleep 2\n"
"set :foo, 1"
msgstr "sample :ambi_lunar_land"

#: 10.2-Sync.md:31
#, fuzzy
msgid ""
"In this example first we create a thread which waits for a `:foo` event to be "
"added to the Time State. After this thread declaration we sleep for 2 beats an"
"d then `set` `:foo` to be `1`. This then releases the `sync` which then moves "
"to the next line which is to trigger the `:ambi_lunar_land` sample."
msgstr "foo"

#: 10.2-Sync.md:37
msgid ""
"Note that `sync` always waits for *future events* and that it will block the c"
"urrent thread waiting for a new event. Also, it will inherit the logical time "
"of the thread which triggered it via `set` or `cue` so it may also be used to "
"sync time."
msgstr ""

#: 10.2-Sync.md:42
msgid "Passing values into the Future"
msgstr ""

#: 10.2-Sync.md:44
#, fuzzy
msgid ""
"In the example above we set `:foo` to `1` which we did nothing with. We can ac"
"tually get this value from the thread calling `sync`:"
msgstr "foo"

#: 10.2-Sync.md:47
#, no-wrap
#, fuzzy
msgid ""
"in_thread do\n"
"  amp = sync :foo\n"
"  sample :ambi_lunar_land, amp: amp\n"
"end\n"
"sleep 2\n"
"set :foo, 0.5"
msgstr "sample :ambi_lunar_land"

#: 10.2-Sync.md:58
msgid ""
"Note that values that are passed through `set` and `cue` must be thread safe -"
" i.e. immutable rings, numbers, symbols or frozen strings. Sonic Pi will throw"
" an error if the value you are attempting to store in the Time State is not va"
"lid."
msgstr ""

#: 10.3-Pattern-Matching.md:1
msgid "10.3 Pattern Matching"
msgstr ""

#: 10.3-Pattern-Matching.md:3
msgid "Pattern Matching"
msgstr ""

#: 10.3-Pattern-Matching.md:5
#, fuzzy
msgid ""
"When getting and setting information into the Time State, it's possible to use"
" more complex keys than basic symbols such as `:foo` and `:bar`. You can also "
"use URL style strings called paths such as `\"/foo/bar/baz\"`. Once we start wor"
"king with paths, we can then start taking advantage of Sonic Pi's sophisticate"
"d pattern matching system to `get` and `sync` with 'similar' rather than 'iden"
"tical' paths. Let's take a look."
msgstr "foo"

#: 10.3-Pattern-Matching.md:13
msgid "Match any path segment"
msgstr ""

#: 10.3-Pattern-Matching.md:15
msgid "Let's assume we want to wait for the next event that has three path segments:"
msgstr ""

#: 10.3-Pattern-Matching.md:17
#, no-wrap
msgid "sync \"/*/*/*\""
msgstr ""

#: 10.3-Pattern-Matching.md:21
msgid ""
"This will match any Time State event with exactly three path segments, regardl"
"ess of their names. For example:"
msgstr ""

#: 10.3-Pattern-Matching.md:24 10.3-Pattern-Matching.md:46
#: 10.3-Pattern-Matching.md:68 10.3-Pattern-Matching.md:78
#, fuzzy
msgid "`cue \"/foo/bar/baz\"`"
msgstr "foo"

#: 10.3-Pattern-Matching.md:25
#, fuzzy
msgid "`cue \"/foo/baz/quux\"`"
msgstr "foo"

#: 10.3-Pattern-Matching.md:26
msgid "`cue \"/eggs/beans/toast\"`"
msgstr ""

#: 10.3-Pattern-Matching.md:27
msgid "`cue \"/moog/synths/rule\"`"
msgstr ""

#: 10.3-Pattern-Matching.md:29
msgid ""
"However, it will *not* match paths with fewer or more path segments. The follo"
"wing will not match:"
msgstr ""

#: 10.3-Pattern-Matching.md:32
#, fuzzy
msgid "`cue \"/foo/bar\"`"
msgstr "foo"

#: 10.3-Pattern-Matching.md:33
#, fuzzy
msgid "`cue \"/foo/baz/quux/quaax\"`"
msgstr "foo"

#: 10.3-Pattern-Matching.md:34
msgid "`cue \"/eggs\"`"
msgstr ""

#: 10.3-Pattern-Matching.md:36
msgid ""
"Each `*` means *any content*. So we could match paths with just one segment wi"
"th `/*` or paths with five segments with `/*/*/*/*/*`"
msgstr ""

#: 10.3-Pattern-Matching.md:38
msgid "Matching partial segments"
msgstr ""

#: 10.3-Pattern-Matching.md:40
#, fuzzy
msgid ""
"If we know what the segment is going to start or finish with, we can use a `*`"
" in addition to a partial segment name. For example: `\"/foo/b*/baz\"` will matc"
"h any path that has three segments, the first of which is `foo`, the last `baz"
"` and the middle segment can be anything that starts with `b`. So, it would ma"
"tch:"
msgstr "foo"

#: 10.3-Pattern-Matching.md:47
#, fuzzy
msgid "`cue \"/foo/baz/baz\"`"
msgstr "foo"

#: 10.3-Pattern-Matching.md:48
#, fuzzy
msgid "`cue \"/foo/beans/baz\"`"
msgstr "foo"

#: 10.3-Pattern-Matching.md:50
msgid "However, it wouldn't match the following:"
msgstr ""

#: 10.3-Pattern-Matching.md:52
#, fuzzy
msgid "`cue \"/foo/flibble/baz\"`"
msgstr "foo"

#: 10.3-Pattern-Matching.md:53
#, fuzzy
msgid "`cue \"/foo/abaz/baz\"`"
msgstr "foo"

#: 10.3-Pattern-Matching.md:54
#, fuzzy
msgid "`cue \"/foo/beans/baz/eggs\"`"
msgstr "foo"

#: 10.3-Pattern-Matching.md:56
#, fuzzy
msgid ""
"You can also place the `*` at the start of the segment to specify the last cha"
"racters of a segment: `\"/foo/*zz/baz\"` which will match any 3 segment `cue` or"
" `set` where the first segment is `foo`, the last is `baz` and the middle segm"
"ent ends with `zz` such as `\"cue \"/foo/whizz/baz\"`."
msgstr "foo"

#: 10.3-Pattern-Matching.md:62
msgid "Matching Nested Path Segments"
msgstr ""

#: 10.3-Pattern-Matching.md:64
#, fuzzy
msgid ""
"Sometimes you don't know how many path segments you want to match. In these ca"
"ses you can use the powerful double star: `**` such as `\"/foo/**/baz\"` which w"
"ill match:"
msgstr "foo"

#: 10.3-Pattern-Matching.md:69
#, fuzzy
msgid "`cue \"/foo/bar/beans/baz\"`"
msgstr "foo"

#: 10.3-Pattern-Matching.md:70
#, fuzzy
msgid "`cue \"/foo/baz\"`"
msgstr "foo"

#: 10.3-Pattern-Matching.md:71
#, fuzzy
msgid "`cue \"/foo/a/b/c/d/e/f/baz\"`"
msgstr "foo"

#: 10.3-Pattern-Matching.md:73
msgid "Matching Single Letters"
msgstr ""

#: 10.3-Pattern-Matching.md:75
msgid ""
"You can use the `?` character to match against a single char such as `\"/?oo/ba"
"r/baz\"` which will match:"
msgstr ""

#: 10.3-Pattern-Matching.md:79
msgid "`cue \"/goo/bar/baz\"`"
msgstr ""

#: 10.3-Pattern-Matching.md:80
msgid "`cue \"/too/bar/baz\"`"
msgstr ""

#: 10.3-Pattern-Matching.md:81
msgid "`cue \"/woo/bar/baz\"`"
msgstr ""

#: 10.3-Pattern-Matching.md:83
msgid "Matching Multiple Words"
msgstr ""

#: 10.3-Pattern-Matching.md:85
#, fuzzy
msgid ""
"If you know that a segment may be one of a select number of words, you can use"
" the `{` and `}` matchers to specify a list of choices such as `\"/foo/{bar,bea"
"ns,eggs}/quux\"` which will only match the following:"
msgstr "foo"

#: 10.3-Pattern-Matching.md:89
#, fuzzy
msgid "`cue \"/foo/bar/quux\"`"
msgstr "foo"

#: 10.3-Pattern-Matching.md:90
#, fuzzy
msgid "`cue \"/foo/beans/quux\"`"
msgstr "foo"

#: 10.3-Pattern-Matching.md:91
#, fuzzy
msgid "`cue \"/foo/eggs/quux\"`"
msgstr "foo"

#: 10.3-Pattern-Matching.md:93
msgid "Matching Multiple Letters"
msgstr ""

#: 10.3-Pattern-Matching.md:95
#, fuzzy
msgid ""
"Finally, you can match against a selection of letters if you use the `[` and `"
"]` matchers to specify a list of choices such as `\"/foo/[abc]ux/baz\"` which wi"
"ll match only:"
msgstr "foo"

#: 10.3-Pattern-Matching.md:99 10.3-Pattern-Matching.md:106
#, fuzzy
msgid "`cue \"/foo/aux/baz\"`"
msgstr "foo"

#: 10.3-Pattern-Matching.md:100 10.3-Pattern-Matching.md:107
#, fuzzy
msgid "`cue \"/foo/bux/baz\"`"
msgstr "foo"

#: 10.3-Pattern-Matching.md:101 10.3-Pattern-Matching.md:108
#, fuzzy
msgid "`cue \"/foo/cux/baz\"`"
msgstr "foo"

#: 10.3-Pattern-Matching.md:104
#, fuzzy
msgid ""
"You can also use the `-` character to specify ranges of letters. For example `"
"\"/foo/[a-e]ux/baz\"` which will match only:"
msgstr "foo"

#: 10.3-Pattern-Matching.md:109
#, fuzzy
msgid "`cue \"/foo/dux/baz\"`"
msgstr "foo"

#: 10.3-Pattern-Matching.md:110
#, fuzzy
msgid "`cue \"/foo/eux/baz\"`"
msgstr "foo"

#: 10.3-Pattern-Matching.md:112
msgid "Combining Matchers"
msgstr ""

#: 10.3-Pattern-Matching.md:114
msgid ""
"When calling `sync` or `get` you are free to combine matchers in any order you"
" see fit to powerfully match any Time State event created by `cue` or `set`. L"
"et's look at a crazy example:"
msgstr ""

#: 10.3-Pattern-Matching.md:118
#, no-wrap
#, fuzzy
msgid ""
"in_thread do\n"
"  sync \"/?oo/[a-z]*/**/ba*/{quux,quaax}/\"\n"
"  sample :loop_amen\n"
"end\n"
"sleep 1\n"
"cue \"/foo/beans/a/b/c/d/e/bark/quux/\""
msgstr "sample :loop_amen"

#: 10.3-Pattern-Matching.md:129
msgid "OSC Pattern Matching"
msgstr ""

#: 10.3-Pattern-Matching.md:131
msgid ""
"For those curious, these matching rules are based on the Open Sound Control pa"
"ttern matching specification which is explained in detail here: http://opensou"
"ndcontrol.org/spec-1_0"
msgstr ""

#: 11-MIDI.md:1
msgid "11 MIDI"
msgstr ""

#: 11-MIDI.md:3
msgid "MIDI"
msgstr ""

#: 11-MIDI.md:5
msgid ""
"Once you've mastered converting code to music, you might wonder - what's next?"
" Sometimes the constraints of working purely within Sonic Pi's syntax and soun"
"d system can be exciting and put you into a new creative position. However, so"
"metimes it is essential to break out of the code into the real world. We want "
"two extra things:"
msgstr ""

#: 11-MIDI.md:11
msgid ""
"To be able to convert actions in the real world into Sonic Pi events to code w"
"ith"
msgstr ""

#: 11-MIDI.md:12
msgid ""
"To be able to use Sonic Pi's strong timing model and semantics to control and "
"manipulate objects in the real world"
msgstr ""

#: 11-MIDI.md:14
msgid ""
"Luckily there's a protocol that's been around since the 80s that enables exact"
"ly this kind of interaction - MIDI. There's an incredible number of external d"
"evices including keyboards, controllers, sequencers, and pro audio software th"
"at all support MIDI. We can use MIDI to receive data and also use it to send d"
"ata."
msgstr ""

#: 11-MIDI.md:20
msgid ""
"Sonic Pi provides full support for the MIDI protocol enabling you to connect y"
"our live code to the real world. Let's explore it further..."
msgstr ""

#: 11.1-MIDI-In.md:1
msgid "11.1 MIDI In"
msgstr ""

#: 11.1-MIDI-In.md:3
msgid "MIDI In"
msgstr ""

#: 11.1-MIDI-In.md:5
msgid ""
"In this section we will learn how to connect a MIDI controller to send events "
"into Sonic Pi to control our synths and sounds. Go and grab a MIDI controller "
"such as a keyboard or control surface and let's get physical!"
msgstr ""

#: 11.1-MIDI-In.md:11
msgid "Connecting a MIDI Controller"
msgstr ""

#: 11.1-MIDI-In.md:13
msgid ""
"In order to get information from an external MIDI device into Sonic Pi we firs"
"t need to connect it to our computer. Typically this will be via a USB connect"
"ion, although older equipment will have a 5-pin DIN connector for which you'll"
" need hardware support for your computer (for example, some sound cards have M"
"IDI DIN connectors). Once you've connected your device, launch Sonic Pi and ta"
"ke a look at the IO section of the Preferences panel. You should see your devi"
"ce listed there. If not, try hitting the 'Reset MIDI' button and see if it app"
"ears. If you're still not seeing anything, the next thing to try is to consult"
" your operating system's MIDI config to see if it sees your device. Failing al"
"l that, feel free to ask questions in the public chat room: http://gitter.im/s"
"amaaron/sonic-pi"
msgstr ""

#: 11.1-MIDI-In.md:26
msgid "Receiving MIDI Events"
msgstr ""

#: 11.1-MIDI-In.md:28
msgid ""
"Once your device is connected, Sonic Pi will automatically receive events. You"
" can see for yourself by manipulating your MIDI device and looking at the cue "
"logger in the bottom right of the application window below the log (if this is"
"n't visible go to Preferences->Editor->Show & Hide and enable the 'Show cue lo"
"g' tickbox). You'll see a stream of events such as:"
msgstr ""

#: 11.1-MIDI-In.md:35
#, no-wrap
msgid ""
"/midi/nanokey2_keyboard/0/1/note_off  [55, 64]\n"
"/midi/nanokey2_keyboard/0/1/note_on   [53, 102]\n"
"/midi/nanokey2_keyboard/0/1/note_off  [57, 64]\n"
"/midi/nanokey2_keyboard/0/1/note_off  [53, 64]\n"
"/midi/nanokey2_keyboard/0/1/note_on   [57, 87]\n"
"/midi/nanokey2_keyboard/0/1/note_on   [55, 81]\n"
"/midi/nanokey2_keyboard/0/1/note_on   [53, 96]\n"
"/midi/nanokey2_keyboard/0/1/note_off  [55, 64]"
msgstr ""

#: 11.1-MIDI-In.md:46
msgid ""
"Once you can see a stream of messages like this, you've successfully connected"
" your MIDI device. Congratulations, let's see what we can do with it!"
msgstr ""

#: 11.1-MIDI-In.md:50
msgid "MIDI Time State"
msgstr ""

#: 11.1-MIDI-In.md:52
msgid ""
"These events are broken into two sections. Firstly there's the name of the eve"
"nt such as `/midi/nanokey2_keyboard/0/1/note_on` and secondly there's the valu"
"es of the event such as `[18, 62]`. Interestingly, these are the two things we"
" need to store information in Time State. *Sonic Pi automatically inserts inco"
"ming MIDI events into Time State*. This means you can `get` the latest MIDI va"
"lue and also `sync` waiting for the next MIDI value using everything we learne"
"d in section 10 of this tutorial."
msgstr ""

#: 11.1-MIDI-In.md:60
#, fuzzy
msgid "Controlling Code"
msgstr "Управление Эффектами"

#: 11.1-MIDI-In.md:62
msgid ""
"Now we've connected a MIDI device, seen its events in the cue log and discover"
"ed that our knowledge of Time State is all we need to work with the events, we"
" can now start having fun. Let's build a simple MIDI piano:"
msgstr ""

#: 11.1-MIDI-In.md:67
#, no-wrap
msgid ""
"live_loop :midi_piano do\n"
"  note, velocity = sync \"/midi/nanokey2_keyboard/0/1/note_on\"\n"
"  synth :piano, note: note\n"
"end"
msgstr ""

#: 11.1-MIDI-In.md:74
msgid ""
"There's a few things going on in the code above including some issues. Firstly"
", we have a simple `live_loop` which will repeat forever running the code betw"
"een the `do`/`end` block. This was introduced in Section 9.2. Secondly, we're "
"calling `sync` to wait for the next matching Time State event. We use a string"
" representing the MIDI message we're looking for (which is the same as was dis"
"played in the cue logger). Notice that this long string is provided to you by "
"Sonic Pi's autocompletion system, so you don't have to type it all out by hand"
". In the log we saw that there were two values for each MIDI note on event, so"
" we assign the result to two separate variables `note` and `velocity`. Finally"
" we trigger the `:piano` synth passing our note."
msgstr ""

#: 11.1-MIDI-In.md:86
msgid ""
"Now, you try it. Type in the code above, replace the sync key with a string ma"
"tching your specific MIDI device and hit Run. Hey presto, you have a working p"
"iano! However, you'll probably notice a couple of problems: firstly all the no"
"tes are the same volume regardless of how hard you hit the keyboard. This can "
"be easily fixed by using the velocity MIDI value and converting it to an ampli"
"tude. Given that MIDI has a range of 0->127, to convert this number to a value"
" between 0->1 we just need to divide it by 127:"
msgstr ""

#: 11.1-MIDI-In.md:95
#, no-wrap
msgid ""
"live_loop :midi_piano do\n"
"  note, velocity = sync \"/midi/nanokey2_keyboard/0/1/note_on\"\n"
"  synth :piano, note: note, amp: velocity / 127.0\n"
"end"
msgstr ""

#: 11.1-MIDI-In.md:102
msgid ""
"Update the code and hit Run again. Now the velocity of the keyboard is honoure"
"d. Next, let's get rid of that pesky pause."
msgstr ""

#: 11.1-MIDI-In.md:105
msgid "Removing Latency"
msgstr ""

#: 11.1-MIDI-In.md:107
msgid ""
"Before we can remove the pause, we need to know why it's there. In order to ke"
"ep all the synths and FX well-timed across a variety of differently capable CP"
"Us, Sonic Pi schedules the audio *in advance* by 0.5s by default. (Note that t"
"his added latency can be configured via the fns `set_sched_ahead_time!` and `u"
"se_sched_ahead_time`). This 0.5s latency is being added to our `:piano` synth "
"triggers as it is added to all synths triggered by Sonic Pi. Typically we real"
"ly want this added latency as it means all synths will be well timed. However,"
" this only makes sense for synths triggered by code using `play` and `sleep`. "
"In this case, we're actually triggering the `:piano` synth with our external M"
"IDI device and therefore don't want Sonic Pi to control the timing for us. We "
"can turn off this latency with the command `use_real_time` which disables the "
"latency for the current thread. This means you can use real time mode for live"
" loops that have their timing controlled by `sync`ing with external devices, a"
"nd keep the default latency for all other live loops. Let's see:"
msgstr ""

#: 11.1-MIDI-In.md:124
#, no-wrap
msgid ""
"live_loop :midi_piano do\n"
"  use_real_time\n"
"  note, velocity = sync \"/midi/nanokey2_keyboard/0/1/note_on\"\n"
"  synth :piano, note: note, amp: velocity / 127.0\n"
"end"
msgstr ""

#: 11.1-MIDI-In.md:132
msgid ""
"Update your code to match the code above and hit Run again. Now we have a low "
"latency piano with variable velocity coded in just 5 lines. Wasn't that easy!"
msgstr ""

#: 11.1-MIDI-In.md:136
#, fuzzy
msgid "Getting Values"
msgstr "Приступая К Работе"

#: 11.1-MIDI-In.md:138
msgid ""
"Finally, as our MIDI events are going straight into the Time State, we can als"
"o use the `get` fn to retrieve the last seen value. This doesn't block the cur"
"rent thread and returns `nil` if there's no value to be found (which you can o"
"verride by passing a default value - see the docs for `get`). Remember that yo"
"u can call `get` in any thread at any time to see the latest matching Time Sta"
"te value. You can even use `time_warp` to jump back in time and call `get` to "
"see past events..."
msgstr ""

#: 11.1-MIDI-In.md:147
msgid "Now You are in Control"
msgstr ""

#: 11.1-MIDI-In.md:149
#, fuzzy
msgid ""
"The exciting thing now is that you can now use the same code structures to `sy"
"nc` and `get` MIDI information from any MIDI device and do whatever you want w"
"ith the values. You can now choose what your MIDI device will do!"
msgstr "choose"

#: 11.2-MIDI-Out.md:1
msgid "11.2 MIDI Out"
msgstr ""

#: 11.2-MIDI-Out.md:3
msgid "MIDI Out"
msgstr ""

#: 11.2-MIDI-Out.md:5
msgid ""
"In addition to receiving MIDI events we can also send out MIDI events to trigg"
"er and control external hardware synths, keyboards and other devices. Sonic Pi"
" provides a full set of fns for sending various MIDI messages such as:"
msgstr ""

#: 11.2-MIDI-Out.md:9
msgid "Note on - `midi_note_on`"
msgstr ""

#: 11.2-MIDI-Out.md:10
msgid "Note off - `midi_note_off`"
msgstr ""

#: 11.2-MIDI-Out.md:11
msgid "Control change - `midi_cc`"
msgstr ""

#: 11.2-MIDI-Out.md:12
msgid "Pitch bend - `midi_pitch_bend`"
msgstr ""

#: 11.2-MIDI-Out.md:13
msgid "Clock ticks - `midi_clock_tick`"
msgstr ""

#: 11.2-MIDI-Out.md:15
msgid ""
"There are many other supported MIDI messages too - check out the API documenta"
"tion for all the other fns that start with `midi_`."
msgstr ""

#: 11.2-MIDI-Out.md:18
msgid "Connecting to a MIDI Device"
msgstr ""

#: 11.2-MIDI-Out.md:20
msgid ""
"In order to send a MIDI message to an external device, we must first have conn"
"ected it. Check out the subsection 'Connecting a MIDI Controller' in section 1"
"1.1 for further details. Note that if you're using USB, connecting to a device"
" which you're sending to (rather than receiving from) is the same procedure. H"
"owever, if you're using the classic DIN connectors, make sure you connect to t"
"he MIDI out port of your computer. You should see your MIDI device listed in t"
"he preferences pane."
msgstr ""

#: 11.2-MIDI-Out.md:29
msgid "Sending MIDI events"
msgstr ""

#: 11.2-MIDI-Out.md:31
msgid ""
"The many `midi_*` fns work just like `play`, `sample` and `synth` in that they"
" send a message at the current (logical) time. For example, to spread out call"
"s to the `midi_*` fns you need to use `sleep` just like you did with `play`. L"
"et's take a look:"
msgstr ""

#: 11.2-MIDI-Out.md:36
#, no-wrap
msgid "midi_note_on :e3, 50"
msgstr ""

#: 11.2-MIDI-Out.md:40
msgid ""
"This will send a MIDI note on event to the connected MIDI device with velocity"
" 50. (Note that Sonic Pi will automatically convert notes in the form `:e3` to"
" their corresponding MIDI number such as 52 in this case.)"
msgstr ""

#: 11.2-MIDI-Out.md:44
msgid ""
"If your connected MIDI device is a synthesiser, you should be able to hear it "
"playing a note. To disable it use `midi_note_off`:"
msgstr ""

#: 11.2-MIDI-Out.md:47
#, no-wrap
msgid "midi_note_off :e3"
msgstr ""

#: 11.2-MIDI-Out.md:51
msgid "Selecting a MIDI device"
msgstr ""

#: 11.2-MIDI-Out.md:53
msgid ""
"By default, Sonic Pi will send each MIDI message to all connected devices on a"
"ll MIDI channels. This is to make it easy to work with a single connected devi"
"ce without having to configure anything. However, sometimes a MIDI device will"
" treat MIDI channels in a special way (perhaps each note has a separate channe"
"l) and also you may wish to connect more than one MIDI device at the same time"
". In more complicated setups, you may wish to be more selective about which MI"
"DI device receives which message(s) and on which channel."
msgstr ""

#: 11.2-MIDI-Out.md:62
msgid ""
"We can specify which device to send to using the `port:` opt, using the device"
" name as displayed in the preferences:"
msgstr ""

#: 11.2-MIDI-Out.md:65
#, no-wrap
msgid "midi_note_on :e3, port: \"moog_minitaur\""
msgstr ""

#: 11.2-MIDI-Out.md:69
msgid ""
"We can also specify which channel to send to using the `channel:` opt (using a"
" value in the range 1-16):"
msgstr ""

#: 11.2-MIDI-Out.md:72
#, no-wrap
msgid "midi_note_on :e3, channel: 3"
msgstr ""

#: 11.2-MIDI-Out.md:76
msgid ""
"Of course we can also specify both at the same time to send to a specific devi"
"ce on a specific channel:"
msgstr ""

#: 11.2-MIDI-Out.md:79
#, no-wrap
msgid "midi_note_on :e3, port: \"moog_minitaur\", channel: 5"
msgstr ""

#: 11.2-MIDI-Out.md:83
msgid "MIDI Studio"
msgstr ""

#: 11.2-MIDI-Out.md:85
msgid ""
"Finally, a really fun thing to do is to connect the audio output of your MIDI "
"synthesiser to one of the audio inputs of your soundcard. You can then control"
" your synth with code using the `midi_*` fns and also manipulate the audio usi"
"ng `live_audio` and FX:"
msgstr ""

#: 11.2-MIDI-Out.md:90
#, no-wrap
msgid ""
"with_fx :reverb, room: 1 do\n"
"  live_audio :moog\n"
"end\n"
"live_loop :moog_trigger do\n"
"  use_real_time\n"
"  midi (octs :e1, 3).tick, sustain: 0.1\n"
"  sleep 0.125\n"
"end"
msgstr ""
"with_fx :reverb, room: 1 do\n"
"  live_audio :moog\n"
"end\n"
"live_loop :moog_trigger do\n"
"  use_real_time\n"
"  midi (octs :e1, 3).tick, sustain: 0.1\n"
"  sleep 0.125\n"
"end"

#: 11.2-MIDI-Out.md:102
msgid ""
"(The fn `midi` is available as a handy shortcut to sending both note on and no"
"te off events with a single command. Check out its documentation for further i"
"nformation)."
msgstr ""

#: 12-OSC.md:1
msgid "12 OSC"
msgstr ""

#: 12-OSC.md:3
msgid "OSC"
msgstr ""

#: 12-OSC.md:5
msgid ""
"In addition to MIDI, another way to get information in and out of Sonic Pi is "
"via the network using a simple protocol called OSC - Open Sound Control. This "
"will let you send messages to and from external programs (both running on your"
" computer and on external computers) which opens up the potential for control "
"way beyond MIDI which has limitations due to its 1980s design."
msgstr ""

#: 12-OSC.md:12
msgid ""
"For example, you could write a program in another programming language which s"
"ends and receives OSC (there are OSC libraries for pretty much every common la"
"nguage) and work directly with Sonic Pi. What you can use this for is only lim"
"ited by your imagination."
msgstr ""

#: 12.1-Receiving-OSC.md:1
msgid "12.1 Receiving OSC"
msgstr ""

#: 12.1-Receiving-OSC.md:3
msgid "Receiving OSC"
msgstr ""

#: 12.1-Receiving-OSC.md:5
msgid ""
"By default when Sonic Pi is launched it listens to port 4559 for incoming OSC "
"messages from programs on the same computer. This means that without any confi"
"guration, you can send Sonic Pi an OSC message and it will be displayed in the"
" cue log just like incoming MIDI messages. This also means that any incoming O"
"SC message is also automatically added to the Time State which means you can a"
"lso use `get` and `sync` to work with the incoming data - just like with MIDI "
"and synchronising `live_loops` - see sections 5.7 and 10.2 to recap how this w"
"orks."
msgstr ""

#: 12.1-Receiving-OSC.md:15
msgid "A Basic OSC Listener"
msgstr ""

#: 12.1-Receiving-OSC.md:17
msgid "Let's build a basic OSC listener:"
msgstr ""

#: 12.1-Receiving-OSC.md:19
#, no-wrap
#, fuzzy
msgid ""
"live_loop :foo do\n"
"  use_real_time\n"
"  a, b, c = sync \"/osc/trigger/prophet\"\n"
"  synth :prophet, note: a, cutoff: b, sustain: c\n"
"end"
msgstr "foo"

#: 12.1-Receiving-OSC.md:27
msgid ""
"In this example we described an OSC path `\"/osc/trigger/prophet\"` which we're "
"syncing on. This can be any valid OSC path (all letters and numbers are suppor"
"ted and the `/` is used like in a URL to break up the path to multiple words)."
" The `/osc` prefix is added by Sonic Pi to all incoming OSC messages, so we ne"
"ed to send an OSC message with the path `/trigger/prophet` for our `sync` to s"
"top blocking and the prophet synth to be triggered."
msgstr ""

#: 12.1-Receiving-OSC.md:36
msgid "Sending OSC to Sonic Pi"
msgstr ""

#: 12.1-Receiving-OSC.md:38
msgid ""
"We can send OSC to Sonic Pi from any programming language that has an OSC libr"
"ary. For example, if we're sending OSC from Python we might do something like "
"this:"
msgstr ""

#: 12.1-Receiving-OSC.md:42
#, no-wrap
msgid ""
"from pythonosc import osc_message_builder\n"
"from pythonosc import udp_client\n"
"sender = udp_client.SimpleUDPClient('127.0.0.1', 4559)\n"
"sender.send_message('/trigger/prophet', [70, 100, 8])"
msgstr ""

#: 12.1-Receiving-OSC.md:50
msgid ""
"Or, if we're sending OSC from Clojure we might do something like this from the"
" REPL:"
msgstr ""

#: 12.1-Receiving-OSC.md:52
#, no-wrap
msgid ""
"(use 'overtone.core)\n"
"(def c (osc-client \"127.0.0.1\" 4559))\n"
"(osc-send c \"/trigger/prophet\" 70 100 8)"
msgstr ""

#: 12.1-Receiving-OSC.md:58
msgid "Receiving from External Machines"
msgstr ""

#: 12.1-Receiving-OSC.md:60
msgid ""
"For security reasons, by default Sonic Pi does not let remote machines send it"
" OSC messages. However, you can enable support for remote machines in Preferen"
"ces->IO->Network->Receive Remote OSC Messages. Once you've enabled this, you c"
"an receive OSC messages from any computer on your network. Typically the sendi"
"ng machine will need to know your IP address (a unique identifier for your com"
"puter on your network - kind of like a phone number or an email address). You "
"can discover the IP address of your computer by looking at the IO section of t"
"he preferences pane. (If your machine happens to have more than one IP address"
", hovering the mouse over the listed address will pop up with a list of all kn"
"own addresses)."
msgstr ""

#: 12.1-Receiving-OSC.md:72
msgid ""
"Note, some programs such as TouchOSC for iPhone and Android support sending OS"
"C as a standard feature. So, once you're listening to remote machines and know"
" your IP address you can instantly start sending messages from apps like Touch"
"OSC which enable you to build your own custom touch controls with sliders, but"
"tons, dials etc. This can provide you with an enormous range of input options."
msgstr ""

#: 12.2-Sending-OSC.md:1
msgid "12.2 Sending OSC"
msgstr ""

#: 12.2-Sending-OSC.md:3
msgid "Sending OSC"
msgstr ""

#: 12.2-Sending-OSC.md:5
msgid ""
"In addition to receiving OSC and working with it using Time State, we can also"
" send out OSC messages in time with our music (just like we can send out MIDI "
"messages in time with our music). We just need to know which IP address and po"
"rt we're sending to. Let's give it a try:"
msgstr ""

#: 12.2-Sending-OSC.md:10
#, no-wrap
msgid ""
"use_osc \"localhost\", 4559\n"
"osc \"/hello/world\""
msgstr ""

#: 12.2-Sending-OSC.md:15
msgid ""
"If you run the code above, you'll notice that Sonic Pi is sending itself an OS"
"C message! This is because we set the IP address to the current machine and th"
"e port to the default OSC in port. This is essentially the same as posting a l"
"etter to yourself - the OSC packet is created, leaves Sonic Pi, gets to the ne"
"twork stack of the operating system which then routes the packed back to Sonic"
" Pi and then it's received as a standard OSC message and is visible in the cue"
" logger as the incoming message `\"/osc/hello/world`. (Notice how Sonic Pi auto"
"matically prefixes all incoming OSC messages with `/osc`.)"
msgstr ""

#: 12.2-Sending-OSC.md:25
msgid "Sending OSC to other programs"
msgstr ""

#: 12.2-Sending-OSC.md:27
msgid ""
"Of course, sending OSC messages to ourselves may be fun but it's not that usef"
"ul. The real benefit starts when we send messages to other programs:"
msgstr ""

#: 12.2-Sending-OSC.md:32
#, no-wrap
msgid ""
"use_osc \"localhost\", 123456\n"
"osc \"/hello/world\""
msgstr ""

#: 12.2-Sending-OSC.md:37
msgid ""
"In this case we're assuming there's another program on the same machine listen"
"ing to port 123456. If there is, then it will receive a `\"/hello/world` OSC me"
"ssage with which it can do what it wants."
msgstr ""

#: 12.2-Sending-OSC.md:41
msgid ""
"If our program is running on another machine, we need to know its IP address w"
"hich we use instead of `\"localhost\"`:"
msgstr ""

#: 12.2-Sending-OSC.md:44
#, no-wrap
msgid ""
"use_osc \"192.168.10.23\", 123456\n"
"osc \"/hello/world\""
msgstr ""

#: 12.2-Sending-OSC.md:49
msgid ""
"Now we can send OSC messages to any device reachable to us via our local netwo"
"rks and even the internet!"
msgstr ""

#: 13-Multichannel-Audio.md:1
msgid "13 Multichannel Audio"
msgstr ""

#: 13-Multichannel-Audio.md:3
msgid "Multichannel Audio"
msgstr ""

#: 13-Multichannel-Audio.md:5
msgid ""
"So far, in terms of sound production, we've explored triggering synths and rec"
"orded sounds via the fns `play`, `synth` and `sample`. These have then generat"
"ed audio which has played through our stereo speaker system. However, many com"
"puters also have the ability to input sound, perhaps through a microphone, in "
"addition to the ability to send sound out to more than two speakers. Often, th"
"is capability is made possible through the use of an external sound card - the"
"se are available for all platforms. In this section of the tutorial we'll take"
" a look at how we can take advantage of these external sound cards and effortl"
"essly work with multiple channels of audio in and out of Sonic Pi."
msgstr ""

#: 13.1-Sound-In.md:1
msgid "13.1 Sound In"
msgstr ""

#: 13.1-Sound-In.md:3
msgid "Sound In"
msgstr ""

#: 13.1-Sound-In.md:5
msgid ""
"One simple (and perhaps familiar) way of accessing sound inputs is using our f"
"riend `synth` by specifying the `:sound_in` synth:"
msgstr ""

#: 13.1-Sound-In.md:7
#, no-wrap
msgid "synth :sound_in"
msgstr ""

#: 13.1-Sound-In.md:11
msgid ""
"This will operate just like any synth such as `synth :dsaw` with the exception"
" that the audio generated will be read directly from the first input of your s"
"ystem's sound card. On laptops, this is typically the built-in microphone, but"
" if you have an external sound card, you can plug any audio input to the first"
" input."
msgstr ""

#: 13.1-Sound-In.md:17
#, fuzzy
msgid "Increasing the Duration"
msgstr "Длительность"

#: 13.1-Sound-In.md:19
msgid ""
"One thing you might notice is that just like `synth :dsaw` the `:sound_in` syn"
"th only lasts for 1 beat as it has a standard envelope. If you'd like to keep "
"it open for a little longer, change the ADSR envelope settings. For example th"
"e following will keep the synth open for 8 beats before closing the connection"
":"
msgstr ""

#: 13.1-Sound-In.md:22
#, no-wrap
msgid "synth :sound_in, sustain: 8"
msgstr ""

#: 13.1-Sound-In.md:28
msgid ""
"Of course, just like any normal synth, you can easily layer on effects with th"
"e FX block:"
msgstr ""

#: 13.1-Sound-In.md:30
#, no-wrap
msgid ""
"with_fx :reverb do\n"
"  with_fx :distortion do\n"
"    synth :sound_in, sustain: 8\n"
"  end\n"
"end"
msgstr ""

#: 13.1-Sound-In.md:38
msgid ""
"If you have plugged in a guitar to your first input, you should be able to hea"
"r it with distortion and reverb until the synth terminates as expected."
msgstr ""

#: 13.1-Sound-In.md:40
msgid ""
"You are free to use the `:sound_in` synth as many times as you like concurrent"
"ly (just like you would do with any normal synth). For example, the following "
"will play two `:sound_in` synths at the same time - one through distortion and"
" one through reverb:"
msgstr ""

#: 13.1-Sound-In.md:42
#, no-wrap
msgid ""
"with_fx :distortion do\n"
"  synth :sound_in, sustain: 8\n"
"end\n"
"with_fx :reverb do  \n"
"  synth :sound_in, sustain: 8\n"
"end"
msgstr ""

#: 13.1-Sound-In.md:52
#, fuzzy
msgid "Multiple Inputs"
msgstr "Множественные Связки"

#: 13.1-Sound-In.md:54
msgid ""
"You can select which audio input you want to play with the `input:` opt. You c"
"an also specify a stereo input (two consecutive inputs) using the `:sound_in_s"
"tereo` synth. For example, if you have a sound card with at least three inputs"
", you can treat the first two as a stereo stream and add distortion and the th"
"ird as a mono stream and add reverb with the following code:"
msgstr ""

#: 13.1-Sound-In.md:61
#, no-wrap
msgid ""
"with_fx :distortion do\n"
"  synth :sound_in_stereo, sustain: 8, input: 1\n"
"end\n"
"with_fx :reverb do  \n"
"  synth :sound_in, sustain: 8, input: 3\n"
"end"
msgstr ""

#: 13.1-Sound-In.md:72
msgid "Potential Issues"
msgstr ""

#: 13.1-Sound-In.md:74
msgid ""
"However, although this is a useful technique, there are a couple of limitation"
"s to this approach. Firstly, it only works for a specific duration (due to it "
"having an ADSR envelope) and secondly, there's no way to switch the FX around "
"once the synth has been triggered. Both of these things are typical requests w"
"hen working with external audio feeds such as microphones, guitars and externa"
"l synthesisers. We'll therefore take a look at Sonic Pi's solution to the prob"
"lem of manipulating a (potentially) infinite stream of live audio input: `live"
"_audio`."
msgstr ""

#: 13.2-Live-Audio.md:1
msgid "13.2 Live Audio"
msgstr ""

#: 13.2-Live-Audio.md:3
#, fuzzy
msgid "Live Audio"
msgstr "Лайв-кодинг"

#: 13.2-Live-Audio.md:5
msgid ""
"The `:sound_in` synth as described in the previous section provides a very fle"
"xible and familiar method for working with input audio. However, as also discu"
"ssed it has a few issues when working with a single input of audio as a single"
" instrument (such as a voice or guitar). By far the best approach to working w"
"ith a single continuous stream of audio is to use `live_audio`."
msgstr ""

#: 13.2-Live-Audio.md:12
msgid "A Named Audio Input"
msgstr ""

#: 13.2-Live-Audio.md:14
msgid ""
"`live_audio` shares a couple of core design constraints with `live_loop` (henc"
"e the similar name). Firstly it must have a unique name and secondly only one "
"`live_audio` stream with that name may exist at any one time. Let's take a loo"
"k:"
msgstr ""

#: 13.2-Live-Audio.md:19 13.2-Live-Audio.md:92
#, no-wrap
#, fuzzy
msgid "live_audio :foo"
msgstr "foo"

#: 13.2-Live-Audio.md:23
msgid ""
"This code will act in a similar fashion to `synth :sound_in` with some key dif"
"ferences: it runs forever (until you explicitly stop it) and you can *move* it"
" to new FX contexts dynamically."
msgstr ""

#: 13.2-Live-Audio.md:28
msgid "Working with FX"
msgstr ""

#: 13.2-Live-Audio.md:30
msgid ""
"On initial triggering `live_audio` works exactly as you might expect it to wor"
"k with FX. For example, to start a live audio stream with added reverb simply "
"use a `:reverb` FX block:"
msgstr ""

#: 13.2-Live-Audio.md:34
#, no-wrap
#, fuzzy
msgid ""
"with_fx :reverb do\n"
"  live_audio :foo\n"
"end"
msgstr "foo"

#: 13.2-Live-Audio.md:40
msgid ""
"However, given that `live_audio` runs forever (at least until you stop it) it "
"would be pretty limiting if, like typical synths, the live audio was bound wit"
"hin the `:reverb` FX for its entire existence. Luckily this is not the case an"
"d it was designed to be easy to move between different FX. Let's try it. Run t"
"he code above to hear live audio coming directly from the first input of your "
"sound card. Note, if you're using a laptop, this will typically be out of your"
" built-in microphone, so it's recommended to use headphones to stop feedback."
msgstr ""

#: 13.2-Live-Audio.md:49
msgid ""
"Now, whilst you're still hearing the audio live from the sound card with rever"
"b, change the code to the following:"
msgstr ""

#: 13.2-Live-Audio.md:52
#, no-wrap
#, fuzzy
msgid ""
"with_fx :echo do\n"
"  live_audio :foo\n"
"end"
msgstr "foo"

#: 13.2-Live-Audio.md:58
msgid ""
"Now, hit Run, and you'll immediately hear the audio played through the echo FX"
" and no longer through reverb. If you wanted them both, just edit the code aga"
"in and hit Run:"
msgstr ""

#: 13.2-Live-Audio.md:62
#, no-wrap
#, fuzzy
msgid ""
"with_fx :reverb do\n"
"  with_fx :echo do\n"
"    live_audio :foo\n"
"  end\n"
"end"
msgstr "foo"

#: 13.2-Live-Audio.md:70
#, fuzzy
msgid ""
"It's important to point out that you can call `live_audio :foo` from any threa"
"d or live loop and it will move the live audio synth to *that* thread's curren"
"t FX context. You could therefore easily have multiple live loops calling `liv"
"e_audio :foo` at different times resulting in the FX context being automatical"
"ly swapped around for some interesting results."
msgstr "foo"

#: 13.2-Live-Audio.md:78
msgid "Stopping live audio"
msgstr ""

#: 13.2-Live-Audio.md:80
msgid ""
"Unlike standard synths, as `live_audio` has no envelope, it will continue runn"
"ing forever (even if you delete the code, just like a function is still define"
"d in memory if you delete the code in the editor). To stop it, you need to use"
" the `:stop` arg:"
msgstr ""

#: 13.2-Live-Audio.md:85
#, no-wrap
#, fuzzy
msgid "live_audio :foo, :stop"
msgstr "foo"

#: 13.2-Live-Audio.md:89
msgid "It can easily be restarted by calling it without the `:stop` arg again:"
msgstr ""

#: 13.2-Live-Audio.md:96
msgid ""
"Additionally all running live audio synths are stopped when you hit the global"
" Stop button (as with all other running synths and FX)."
msgstr ""

#: 13.2-Live-Audio.md:99
msgid "Stereo input"
msgstr ""

#: 13.2-Live-Audio.md:101
msgid ""
"With respect to audio channels, by default `live_audio` acts similarly to the "
"`:sound_in` synth in that it takes a single mono input stream of audio and con"
"verts it to a stereo stream using the specified panning. However, just like `:"
"sound_in_stereo` it's also possible to tell `live_audio` to read two consecuti"
"ve audio inputs and treat them as the left and right channels directly. This i"
"s achieved via the `:stereo` opt. For example, to treat input 2 as the left si"
"gnal and input 3 as the right signal, you need to configure the `input:` opt t"
"o 2 and enable stereo mode as follows:"
msgstr ""

#: 13.2-Live-Audio.md:111
#, no-wrap
#, fuzzy
msgid "live_audio :foo, stereo: true, input: 2"
msgstr "foo"

#: 13.2-Live-Audio.md:115
msgid ""
"Note that once you have started a live audio stream in stereo mode, you cannot"
" change it to mono without stopping and starting. Similarly, if you start it i"
"n the default mono mode, you can't switch to stereo without starting and stopp"
"ing the stream."
msgstr ""

#: 13.3-Sound-Out.md:1
msgid "13.3 Sound Out"
msgstr ""

#: 13.3-Sound-Out.md:3
msgid "Sound Out"
msgstr ""

#: 13.3-Sound-Out.md:5
msgid ""
"So far in this section we've looked at how to get multiple streams of audio in"
"to Sonic Pi - either through the use of the `:sound_in` synth or via the power"
"ful `live_audio` system. In addition to working with multiple streams of input"
" audio, Sonic Pi can also output multiple streams of audio. This is achieved v"
"ia the `:sound_out` FX."
msgstr ""

#: 13.3-Sound-Out.md:11
msgid "Output contexts"
msgstr ""

#: 13.3-Sound-Out.md:13
msgid ""
"Let's quickly recap on how Sonic Pi's synths and FX output their audio to thei"
"r current FX context. For example, consider the following:"
msgstr ""

#: 13.3-Sound-Out.md:16
#, no-wrap
msgid ""
"with_fx :reverb do    # C\n"
"  with_fx :echo do    # B\n"
"    sample :bd_haus   # A\n"
"  end\n"
"end"
msgstr ""

#: 13.3-Sound-Out.md:24
msgid ""
"The simplest way to understand what's happening with the audio stream is to st"
"art at the innermost audio context and work our way out. In this case, the inn"
"ermost context is labelled `A` and is the `:bd_haus` sample being triggered. T"
"he audio for this goes directly into its context which is `B` - the `:echo` FX"
". This then adds echo to the incoming audio and outputs it to its context whic"
"h is `C` - the `:reverb` FX. This then adds reverb to the incoming audio and o"
"utputs to its context which is the top level - the left and right speakers (ou"
"tputs 1 and 2 in your audio card). The audio flows outwards with a stereo sign"
"al all the way through."
msgstr ""

#: 13.3-Sound-Out.md:35
msgid "Sound Out FX"
msgstr ""

#: 13.3-Sound-Out.md:37
msgid ""
"The above behaviour is true for all synths (including `live_audio`) and the ma"
"jority of FX with the exception of `:sound_out`. The `:sound_out` FX does two "
"things. Firstly it outputs its audio to its external context as described abov"
"e. Secondly it *also* outputs its audio directly to an output on your sound ca"
"rd. Let's take a look:"
msgstr ""

#: 13.3-Sound-Out.md:43
#, no-wrap
msgid ""
"with_fx :reverb do      # C\n"
"  with_fx :sound_out, output: 3 do # B\n"
"    sample :bd_haus     # A\n"
"  end\n"
"end"
msgstr ""

#: 13.3-Sound-Out.md:51
msgid ""
"In this example, our `:bd_haus` sample outputs its audio to its external conte"
"xt which is the `:sound_out` FX. This in turn outputs its audio to its externa"
"l context the `:reverb` FX (as expected). However, it *also* outputs a mono mi"
"x to the 3rd output of the system's soundcard. The audio generated within `:so"
"und_out` therefore has two destinations - the `:reverb` FX and audio card outp"
"ut 3."
msgstr ""

#: 13.3-Sound-Out.md:58
msgid "Mono and Stereo out"
msgstr ""

#: 13.3-Sound-Out.md:60
#, fuzzy
msgid ""
"As we've seen, by default, the `:sound_out` FX outputs a mono mix of the stere"
"o input to a specific channel in addition to passing the stereo feed to the ou"
"ter context (as expected). If outputting a mono mix isn't precisely what you w"
"ant to do, there are a number of alternative options. Firstly, by using the `m"
"ode:` opt you can choose to output just the left or just the right input signa"
"l to the audio card. Or you can use the `:sound_out_stereo` FX to output to tw"
"o consecutive sound card outputs. See the function documentation for more info"
"rmation and examples."
msgstr "choose"

#: 13.3-Sound-Out.md:70
msgid "Direct Out"
msgstr ""

#: 13.3-Sound-Out.md:72
msgid ""
"As we have also seen, the default behaviour for `:sound_out` and `:sound_out_s"
"tereo` is to send the audio both to their external context (as is typical of a"
"ll FX) *and* to the specified output on your soundcard. However, occasionally "
"you may wish to *only* send to the output on your soundcard and not to the ext"
"ernal context (and therefore not have any chance of the sound being mixed and "
"sent to the standard output channels 1 and 2). This is possible by using the s"
"tandard FX opt `amp:` which operates on the audio *after* the FX has been able"
" to manipulate the audio:"
msgstr ""

#: 13.3-Sound-Out.md:82
#, no-wrap
#, fuzzy
msgid ""
"with_fx :sound_out, output: 3, amp: 0 do # B\n"
"  sample :loop_amen                      # A\n"
"end"
msgstr "sample :loop_amen"

#: 13.3-Sound-Out.md:88
msgid ""
"In the above example, the `:loop_amen` sample is sent to its outer context, th"
"e `:sound_out` FX. This then sends a mono mix to audio card output 3 and then "
"multiplies the audio by 0 which essentially silences it. It is this silenced s"
"ignal which is then sent out to the `:sound_out`'s outer context which is the "
"standard output. Therefore with this code, the default output channels will no"
"t receive any audio, and channel 3 will receive a mono mix of the amen drum br"
"eak."
msgstr ""

#: 14-Conclusions.md:1
#, fuzzy
msgid "14 Conclusions"
msgstr "Заключение"

#: 14-Conclusions.md:3
#, fuzzy
msgid "Conclusions"
msgstr "Заключение"

#: 14-Conclusions.md:5
#, fuzzy
msgid ""
"This concludes the Sonic Pi introductory tutorial. Hopefully you've learned so"
"mething along the way. Don't worry if you feel you didn't understand everythin"
"g - just play and have fun and you'll pick things up in your own time. Feel fr"
"ee to dive back in when you have a question that might be covered in one of th"
"e sections."
msgstr ""
"На этом и завершается вводное руководство по Sonic Pi. Надеюсь, вы узнали что-"
"нибудь по пути. Не волнуйтесь, если чувствуете, что не всё поняли, просто игра"
"йте и веселитесь, и всё придёт в своё время. Не стесняйтесь снова погрузиться "
"в чтение этого учебника, когда у вас возникнут вопросы, которые могут быть рас"
"крыты в одной из глав."

#: 14-Conclusions.md:11
#, fuzzy
msgid ""
"If you have any questions that haven't been covered in the tutorial, then plea"
"se jump onto the [Sonic Pi forums](http://groups.google.com/group/sonic-pi/) a"
"nd ask your question there. You'll find someone friendly and willing to lend a"
" hand."
msgstr ""
"Если у вас есть вопросы, которые в учебнике освещены не были, то, пожалуйста, "
"зайдите на [Sonic Pi forums](http://groups.google.com/group/sonic-pi/) и задай"
"те свой вопрос там. Вы обязательно найдёте там кого-нибудь доброжелательного и"
" готового протянуть руку помощи."

#: 14-Conclusions.md:16
#, fuzzy
msgid ""
"Finally, I also invite you to take a deeper look at the rest of the documentat"
"ion in this help system. There are a number of features that haven't been cove"
"red in this tutorial that are waiting for your discovery."
msgstr ""
"Наконец, я также приглашаю вас более детально рассмотреть остальную документац"
"ию этой справочной системы. Есть ряд особенностей, которые не были охвачены в "
"этом учебнике, но ожидают вашего открытия."

#: 14-Conclusions.md:21
#, fuzzy
msgid ""
"So play, have fun, share your code, perform for your friends, show your screen"
"s and remember:"
msgstr ""
"Так играйте, веселитесь, делитесь кодом, выступайте для своих друзей, показыва"
"йте свои экраны и помните:"

#: 14-Conclusions.md:24
#, fuzzy
msgid "*There are no mistakes, only opportunities.*"
msgstr "*Здесь нет ошибок, только возможности.*"

#: 14-Conclusions.md:26
msgid "[Sam Aaron](http://twitter.com/samaaron)"
msgstr ""

#: A-Articles.md:1
msgid "A Appendix A - MagPi Articles"
msgstr ""

#: A-Articles.md:3
#, fuzzy
msgid "MagPi Articles"
msgstr "Статьи MagPi"

#: A-Articles.md:5
#, fuzzy
msgid "Appendix A collects all the Sonic Pi articles written for the MagPi magazine."
msgstr "В Приложении A собраны статьи о Sonic Pi, выходившие в журнале MagPi."

#: A-Articles.md:8
#, fuzzy
msgid "Dive into Topics"
msgstr "Погружение В Тему"

#: A-Articles.md:10
#, fuzzy
msgid ""
"These articles aren't meant to be read in any strict order and contain a lot o"
"f cross-over material from the tutorial itself. Rather than try and teach you "
"all of Sonic Pi, they instead each focus on a specific aspect of Sonic Pi and "
"cover it in a fun and accessible way."
msgstr ""
"Эти статьи не были задуманы для чтения в каком-либо определённом порядке и сод"
"ержат много перекрёстных ссылок на материалы из разных глав этого учебника. Вм"
"есто того, чтобы пытаться рассказать вам обо всём в Sonic Pi, эти статьи фокус"
"ируются на определённом аспекте и подают это в весёлой и доступной форме."

#: A-Articles.md:15
#, fuzzy
msgid "Read the MagPi"
msgstr "Читать В MagPi"

#: A-Articles.md:17
#, fuzzy
msgid ""
"You can see them in their glorious professionally typeset form in the free PDF"
" downloads of The MagPi here: https://www.raspberrypi.org/magpi/"
msgstr ""
"Вы можете прочесть эти статьи в великолепном, профессионально оформленном виде"
", бесплатно загрузив их в формате PDF из [MagPi](https://www.raspberrypi.org/m"
"agpi/)"

#: A-Articles.md:20
#, fuzzy
msgid "Suggest a Topic"
msgstr "Предложить Тему"

#: A-Articles.md:22
#, fuzzy
msgid ""
"If you don't see a topic that interests you covered in these articles - why no"
"t suggest one? The easiest way to do that is to tweet your suggestion to [@Son"
"ic_Pi](http://twitter.com/sonic_pi). You never know - your suggestion might be"
" the subject of the next article!"
msgstr ""
"Если вы не находите интересующую вас тему в этих статьях - почему бы не предло"
"жить свою? Самый простой способ сделать это - твитнуть в [@Sonic_Pi](http://tw"
"itter.com/sonic_pi). Кто знает, возможно предложенная вами тема станет предмет"
"ом следующей статьи!"

#: A.01-tips.md:1
msgid "A.1 Tips for Sonic Pi"
msgstr ""

#: A.01-tips.md:3
#, fuzzy
msgid "Five Top Tips"
msgstr "Пять Главных Советов"

#: A.01-tips.md:5
#, fuzzy
msgid "1. There are no mistakes"
msgstr "1. Здесь Нет Ошибок"

#: A.01-tips.md:7
#, fuzzy
msgid ""
"The most important lesson to learn with Sonic Pi is that there really are no m"
"istakes. The best way to learn is to just try and try and try. Try lots of dif"
"ferent things out, stop worrying whether your code sounds good or not and star"
"t experimenting with as many different synths, notes, FX and opts as possible."
" You'll discover a lot of things that make you laugh because they sound just a"
"wful and some real gems that sound truly amazing. Simply drop the things you d"
"on't like and keep the things you do. The more 'mistakes' you allow yourself t"
"o make the quicker you'll learn and discover your personal coding sound."
msgstr ""
"Самый главный урок в обучении работе с Sonic Pi заключается в том, что здесь д"
"ействительно нет ошибок. Лучший способ узнать это - пробовать, пробовать и ещё"
" раз пробовать. Перестаньте беспокоиться о том, звучит ли ваш код хорошо или н"
"ет, и начните экспериментировать с как можно большим количеством различных син"
"тезаторов, нот, эффектов и параметров. Вы откроете для себя множество вещей, к"
"оторые заставят вас смеяться, потому что они звучат просто ужасно, но некоторы"
"е - настоящие жемчужины, звучащие просто потрясающе. Просто отбросьте то, что "
"не нравится, и продолжайте делать то, что делаете. Чем больше \"ошибок\" вы позв"
"олите себе совершить, тем быстрее вы научитесь и откроете ваш собственный уник"
"альный звук."

#: A.01-tips.md:18
#, fuzzy
msgid "2. Use the FX"
msgstr "2. Используйте Эффекты"

#: A.01-tips.md:20
#, fuzzy
msgid ""
"Say you've already mastered the Sonic Pi basics of making sounds with `sample`"
", `play`? What's next? Did you know that Sonic Pi supports over 27 studio FX t"
"o change the sound of your code? FX are like fancy image filters in drawing pr"
"ograms except that instead of blurring or making something black and white, yo"
"u can add things like reverb, distortion and echo to your sound. Think of it l"
"ike sticking the cable from your guitar to an effects pedal of your choice and"
" then into the amplifier. Luckily, Sonic Pi makes using FX really easy and req"
"uires no cables! All you need to do is to choose which section of your code yo"
"u'd like the FX added to and wrap it with the FX code. Let's look at an exampl"
"e. Say you had the following code:"
msgstr ""
"Допустим, вы уже освоили основы создания звука в Sonic Pi с помощью `sample` и"
" `play`. Что дальше? Знаете ли вы, что Sonic Pi поддерживает более 27 студийны"
"х эффектов для изменения звука вашего кода? Эффекты похожи на причудливые филь"
"тры изображений в графических редакторах, за исключением того, что вместо разм"
"ытия или замены чего-то цветного чёрно-белым, вы можете использовать в своём з"
"вуке такие вещи, как реверберация, искажения и эхо. Думайте об этом, как о под"
"ключении кабеля от вашей гитары к педали эффектов, которую вы выбрали, а затем"
" к усилителью. К счастью, Sonic Pi делает использование эффектов очень простым"
" и не требует никаких проводов! Всё что вам нужно сделать - это выбрать, какой"
" именно фрагмент кода вы бы обработали эффектом, и обернуть его в FX код. Дава"
"йте рассмотрим пример. Скажем, у вас есть следующий код:"

#: A.01-tips.md:32
#, no-wrap
#, fuzzy
msgid ""
"sample :loop_garzul\n"
"16.times do\n"
"  sample :bd_haus\n"
"  sleep 0.5\n"
"end"
msgstr ""
"sample :loop_garzul\n"
" \n"
"16.times do\n"
"  sample :bd_haus\n"
"  sleep 0.5\n"
"end"

#: A.01-tips.md:41
#, fuzzy
msgid ""
"If you wanted to add FX to the `:loop_garzul` sample, you'd just tuck it insid"
"e a `with_fx` block like this:"
msgstr ""
"Если вы хотите добавить эффект в `:loop_garzul` сэмпл, просто поместите его вн"
"утрь `with_fx` блока, как здесь:"

#: A.01-tips.md:44
#, no-wrap
#, fuzzy
msgid ""
"with_fx :flanger do\n"
"  sample :loop_garzul\n"
"end\n"
"16.times do\n"
"  sample :bd_haus\n"
"  sleep 0.5\n"
"end"
msgstr ""
"with_fx :flanger do\n"
"  sample :loop_garzul\n"
"end\n"
" \n"
"16.times do\n"
"  sample :bd_haus\n"
"  sleep 0.5\n"
"end"

#: A.01-tips.md:55
#, fuzzy
msgid ""
"Now, if you wanted to add FX to the bass drum, go and wrap that with `with_fx`"
" too:"
msgstr ""
"Теперь, если вы захотите добавить эффект к басовому барабану, оберните его `wi"
"th_fx` тоже:"

#: A.01-tips.md:58
#, no-wrap
#, fuzzy
msgid ""
"with_fx :flanger do\n"
"  sample :loop_garzul\n"
"end\n"
"with_fx :echo do\n"
"  16.times do\n"
"    sample :bd_haus\n"
"    sleep 0.5\n"
"  end\n"
"end"
msgstr ""
"with_fx :flanger do\n"
"  sample :loop_garzul\n"
"end\n"
" \n"
"with_fx :echo do\n"
"  16.times do\n"
"    sample :bd_haus\n"
"    sleep 0.5\n"
"  end\n"
"end"

#: A.01-tips.md:71
#, fuzzy
msgid ""
"Remember, you can wrap *any* code within `with_fx` and any sounds created will"
" pass through that FX."
msgstr ""
"Помните, вы можете обернуть *любой* код в `with_fx`, и любые созданные звуки б"
"удут проходить через выбранный эффект."

#: A.01-tips.md:75
#, fuzzy
msgid "3. Parameterise your synths"
msgstr "3. Параметризируйте Ваши Синтезаторы"

#: A.01-tips.md:77
#, fuzzy
msgid ""
"In order to really discover your coding sound you'll soon want to know how to "
"modify and control synths and FX. For example, you might want to change the du"
"ration of a note, add more reverb, or change the time between echoes. Luckily,"
" Sonic Pi gives you an amazing level of control to do exactly this with specia"
"l things called optional parameters or opts for short. Let's take a quick look"
". Copy this code into a workspace and hit run:"
msgstr ""
"Для того, чтобы создать действительно уникальный кодированный звук, вы, вероят"
"но, захотите узнать как модифицировать и контролировать синтезаторы и эффекты."
" Например, вы можете захотеть изменить длительность ноты, добавить больше реве"
"рберации, или изменить время между повторами эхо. К счастью, Sonic Pi даёт вам"
" удивительный уровень контроля с помощью специальных штук, называемых параметр"
"ы. Давайте окинем их беглым взглядом. Скопируйте этот код в свободный буфер и "
"нажмите \"Выполнить\":"

#: A.01-tips.md:85
#, no-wrap
msgid "sample :guit_em9"
msgstr "sample :guit_em9"

#: A.01-tips.md:89
#, fuzzy
msgid ""
"Ooh, a lovely guitar sound! Now, let's start playing with it. How about changi"
"ng its rate?"
msgstr ""
"О, прекрасный звук гитары! Теперь, давайте начнём играть с ним. Как насчёт изм"
"енения его скорости?"

#: A.01-tips.md:92 A.17-sample-stretching.md:25
#, no-wrap
msgid "sample :guit_em9, rate: 0.5"
msgstr "sample :guit_em9, rate: 0.5"

#: A.01-tips.md:96
#, fuzzy
msgid ""
"Hey, what's that `rate: 0.5` bit I just added at the end? That's called an opt"
". All of Sonic Pi's synths and FX support them and there's loads to play aroun"
"d with. They're also available for FX too. Try this:"
msgstr ""
"Эй, что это за `rate: 0.5` я добавил в конце? Это называется параметр. Все син"
"тезаторы и эффекты в Sonic Pi поддерживают их, и их тут множество. Они также д"
"оступны и для эффектов. Попробуйте это:"

#: A.01-tips.md:100
#, no-wrap
msgid ""
"with_fx :flanger, feedback: 0.6 do\n"
"  sample :guit_em9\n"
"end"
msgstr ""
"with_fx :flanger, feedback: 0.6 do\n"
"  sample :guit_em9\n"
"end"

#: A.01-tips.md:106
#, fuzzy
msgid ""
"Now, try increasing that feedback to 1 to hear some crazy sounds! Read the doc"
"s for full details on all the many opts available to you."
msgstr ""
"Теперь, попробуйте увеличить обратную связь до 1, чтобы услышать какие-то сума"
"сшедшие звуки! Читайте документацию для получения полной информации о всех мно"
"гочисленных параметрах, доступных для вас."

#: A.01-tips.md:110
#, fuzzy
msgid "5. Live Code"
msgstr "4. Лайвкодинг"

#: A.01-tips.md:112
#, fuzzy
msgid ""
"The best way to quickly experiment and explore Sonic Pi is to live code. This "
"allows you to start off some code and continually change and tweak it whilst i"
"t's still playing. For example, if you don't know what the cutoff parameter do"
"es to a sample, just play around. Let's have a try! Copy this code into one of"
" your Sonic Pi workspaces:"
msgstr ""
"Лучший способ быстро экспериментировать и исследовать Sonic Pi - кодирование в"
" реальном времени. Это позволяет вам начать выполнять какой-то код, постоянно "
"изменяя и подправляя его в то время, как он звучит. Например, если вы не знает"
"е, что делает с сэмплом параметр частоты среза фильтра, просто играйте его по "
"кругу и экспериментируйте. Давайте пробовать! Скопируйте этот код в буфер ваше"
"го Sonic Pi:"

#: A.01-tips.md:118
#, no-wrap
msgid ""
"live_loop :experiment do\n"
"  sample :loop_amen, cutoff: 70\n"
"  sleep 1.75\n"
"end"
msgstr ""
"live_loop :experiment do\n"
"  sample :loop_amen, cutoff: 70\n"
"  sleep 1.75\n"
"end"

#: A.01-tips.md:125
#, fuzzy
msgid ""
"Now, hit run and you'll hear a slightly muffled drum break. Now, change the `c"
"utoff:` value to `80` and hit run again. Can you hear the difference? Try `90`"
", `100`, `110`..."
msgstr ""
"Теперь, нажмите \"Выполнить\" и вы будете слышать чуть приглушенный барабанный б"
"рейк. Измените значение `cutoff:` на `80` и нажмите \"Выполнить\" снова. Слышите"
" разницу? Попробуйте `90`, `100`, `110`..."

#: A.01-tips.md:129
#, fuzzy
msgid ""
"Once you get the hang of using `live_loop`s you'll not turn back. Whenever I d"
"o a live coding gig I rely on `live_loop` as much as a drummer relies on their"
" sticks. For more information about live coding check out Section 9 of the bui"
"lt-in tutorial."
msgstr ""
"Как только вы зависните с `live_loop`, вы уже никогда не вернётесь обратно. Вс"
"який раз, когда я делаю лайвкодинг концерт, я завишу от `live_loop` так, как у"
"дарник зависит от своих палочек. Для получения дополнительной информации о лай"
"вкодинге, проверьте раздел 9, встроенного учебника."

#: A.01-tips.md:134
#, fuzzy
msgid "5. Surf the random streams"
msgstr "5. Поток Случайных Нот"

#: A.01-tips.md:136
#, fuzzy
msgid ""
"Finally, one thing I love doing is cheating by getting Sonic Pi to compose thi"
"ngs for me. A really great way to do this is using randomisation. It might sou"
"nd complicated but it really isn't. Let's take a look. Copy this into a spare "
"workspace:"
msgstr ""
"Наконец, ещё одна вещь, которую я люблю делать, это давать Sonic Pi сочинять з"
"а меня музыку. Действительно крутой способ сделать это - использовать рандомиз"
"ацию. Это может показаться сложным, но на самом деле это не так. Давайте прове"
"рим. Скопируйте это в свободное рабочее пространство:"

#: A.01-tips.md:141
#, no-wrap
msgid ""
"live_loop :rand_surfer do\n"
"  use_synth :dsaw\n"
"  notes = (scale :e2, :minor_pentatonic, num_octaves: 2)\n"
"  16.times do\n"
"    play notes.choose, release: 0.1, cutoff: rrand(70, 120)\n"
"    sleep 0.125\n"
"  end\n"
"end"
msgstr ""
"live_loop :rand_surfer do\n"
"  use_synth :dsaw\n"
"  notes = (scale :e2, :minor_pentatonic, num_octaves: 2)\n"
"  16.times do\n"
"    play notes.choose, release: 0.1, cutoff: rrand(70, 120)\n"
"    sleep 0.125\n"
"  end\n"
"end"

#: A.01-tips.md:152
#, fuzzy
msgid ""
"Now, when you play this, you'll hear a constant stream of random notes from th"
"e scale `:e2 :minor_pentatonic` played with the `:dsaw` synth. \"Wait, wait! Th"
"at's not a melody\", I hear you shout! Well, here's the first part of the magic"
" trick. Every time we go round the `live_loop` we can tell Sonic Pi to reset t"
"he random stream to a known point. This is a bit like going back in time in th"
"e TARDIS with the Doctor to a particular point in time and space. Let's try it"
" - add the line `use_random_seed 1` to the `live_loop`:"
msgstr ""
"Когда вы запустите это, вы услышите постоянный поток случайных нот гаммы `:Е2 "
":minor_pentatonic`, сыгранную `:dsaw` синтезатором. \"Подожди, подожди! Это не "
"мелодия\", слышу я ваш возглас! Ну, это первая часть магического трюка. Каждый "
"раз, когда мы проходим круг цикла `live_loop`, мы можем сказать Sonic Pi сброс"
"ить случайный поток к известной начальной точке. Это как будто возвращаться во"
" времени в ТАРДИС С ДОКТОРОМ к определённой точке во времени и пространстве. Д"
"авайте попробуем это - добавьте строку `use_random_seed 1` к `live_loop`:"

#: A.01-tips.md:161
#, no-wrap
msgid ""
"live_loop :rand_surfer do\n"
"  use_random_seed 1\n"
"  use_synth :dsaw\n"
"  notes = (scale :e2, :minor_pentatonic, num_octaves: 2)\n"
"  16.times do\n"
"    play notes.choose, release: 0.1, cutoff: rrand(70, 120)\n"
"    sleep 0.125\n"
"  end\n"
"end"
msgstr ""
"live_loop :rand_surfer do\n"
"  use_random_seed 1\n"
"  use_synth :dsaw\n"
"  notes = (scale :e2, :minor_pentatonic, num_octaves: 2)\n"
"  16.times do\n"
"    play notes.choose, release: 0.1, cutoff: rrand(70, 120)\n"
"    sleep 0.125\n"
"  end\n"
"end"

#: A.01-tips.md:173
#, fuzzy
msgid ""
"Now, every time the `live_loop` loops around, the random stream is reset. This"
" means it chooses the same 16 notes every time. Hey presto! An instant melody."
" Now, here's the really exciting bit. Change the seed value from `1` to anothe"
"r number. Say `4923`. Wow! Another melody! So, just by changing one number (th"
"e random seed), you can explore as many melodic combinations as you can imagin"
"e! Now, that's the magic of code."
msgstr ""
"Теперь каждый раз, как цикл `live_loop` повторяется, случайный поток будет сбр"
"ошен. Это значит, что он выбирает одни и те же 16 нот каждый раз. Мгновенная м"
"елодия. Теперь это действительно захватывающий бит. Изменитьте значение отправ"
"ной точки с `1` на другое число. Скажем, `4923`. Ого! Другая мелодия! Так, про"
"сто изменяя одну цифру (отправную точку), вы можете открыть столько мелодическ"
"их комбинаций, сколько сможете себе представить! Это и есть магия кода."

#: A.02-live-coding.md:1
msgid "A.2 Live Coding"
msgstr ""

#: A.02-live-coding.md:5
#, fuzzy
msgid ""
"The laser beams sliced through the wafts of smoke as the subwoofer pumped bass"
" deep into the bodies of the crowd. The atmosphere was ripe with a heady mix o"
"f synths and dancing. However something wasn't quite right in this nightclub. "
"Projected in bright colours above the DJ booth was futuristic text, moving, da"
"ncing, flashing. This wasn't fancy visuals, it was merely a projection of Soni"
"c Pi running on a Raspberry Pi. The occupant of the DJ booth wasn't spinning d"
"isks, he was writing, editing and evaluating code. Live. This is Live Coding."
msgstr ""
"Лазерные лучи прорезали дым так же глубоко, как сабвуфер прокачивал низами тан"
"цующие тела. В атмосфере царила пьянящая смесь синтезаторов и танца. Однако, ч"
"то-то в этом ночном клубе было не так... Яркими красками над кабиной диджея св"
"етился футуристический текст, движущийся, танцующий, вспыхивающий. Но это не б"
"ыли фантастические визуальные эффекты, это была лишь проекция Sonic Pi, запуще"
"нного на Raspberry Pi. Обитатель кабины диджея не крутил дисков, он писал, ред"
"актировал и запускал код. В реальном времени. Это был лайвкодинг."

#: A.02-live-coding.md:14
msgid ""
"![Sam Aaron Live Coding](../images/tutorial/articles/A.02-live-coding/sam-aaro"
"n-live-coding.png)"
msgstr ""

#: A.02-live-coding.md:16
#, fuzzy
msgid ""
"This may sound like a far fetched story from a futuristic night club but codin"
"g music like this is a growing trend and is often described as Live Coding (ht"
"tp://toplap.org). One of the recent directions this approach to music making h"
"as taken is the Algorave (http://algorave.com) - events where artists like mys"
"elf code music for people to dance to. However, you don't need to be in a nigh"
"tclub to Live Code - with Sonic Pi v2.6+ you can do it anywhere you can take y"
"our Raspberry Pi and a pair of headphones or some speakers. Once you reach the"
" end of this article, you'll be programming your own beats and modifying them "
"live. Where you go afterwards will only be constrained by your imagination."
msgstr ""
"Это может звучать как притянутая за уши история из футуристичного ночного клуб"
"а, но кодирование музыки - это развивающийся тренд, часто называемый Лайвкодин"
"г (http://toplap.org). Одним из новых направлений этого способа создания музык"
"и является Алгорэйв (http://algorave.com) - мероприятие, где такие артисты как"
" я, кодируют музыку для танцующих людей. Однако, вам не надо быть в ночном клу"
"бе, чтобы кодировать в реальном времени - с Sonic Pi v2.6+ вы можете делать эт"
"о в любом месте, в которое сможете взять ваш Raspberry Pi и пару наушников или"
" колонок. Как только вы дойдёте до конца этой статьи, вы будете программироват"
"ь свой собственный бит и изменять его вживую. То, где вы окажетесь после этого"
", может быть ограничено только вашим воображением."

#: A.02-live-coding.md:27
#, fuzzy
msgid "Live Loop"
msgstr "Живой Цикл"

#: A.02-live-coding.md:29
#, fuzzy
msgid ""
"The key to live coding with Sonic Pi is mastering the `live_loop`. Let's look "
"at one:"
msgstr ""
"Ключ к лайвкодингу с Sonic Pi - овладение циклами `live_loop`. Давайте посмотр"
"им на один из них:"

#: A.02-live-coding.md:32
#, no-wrap
msgid ""
"live_loop :beats do\n"
"  sample :bd_haus\n"
"  sleep 0.5\n"
"end"
msgstr ""
"live_loop :beats do\n"
"  sample :bd_haus\n"
"  sleep 0.5\n"
"end"

#: A.02-live-coding.md:39
#, fuzzy
msgid ""
"There are 4 core ingredients to a `live_loop`. The first is its name. Our `liv"
"e_loop` above is called `:beats`. You're free to call your `live_loop` anythin"
"g you want. Go crazy. Be creative. I often use names that communicate somethin"
"g about the music they're making to the audience. The second ingredient is the"
" `do` word which marks where the `live_loop` starts. The third is the `end` wo"
"rd which marks where the `live_loop` finishes, and finally there is the body o"
"f the `live_loop` which describes what the loop is going to repeat - that's th"
"e bit between the `do` and `end`. In this case we're repeatedly playing a bass"
" drum sample and waiting for half a beat. This produces a nice regular bass be"
"at. Go ahead, copy it into an empty Sonic Pi buffer and hit run. Boom, Boom, B"
"oom!."
msgstr ""
"Есть 4 основные составляющие циклов `live_loop`. Первая - это имя. Наш `live_l"
"oop` называется `:beats`. Вы вольны называть свой `live_loop` так, как вам уго"
"дно. С ума сойти. Подойдите к этому творчески. Обычно я использую имена циклов"
", что-то говорящие о музыке, которую они делают. Вторая состовляющая - это сло"
"во `do`, которое отмечает, где цикл начинается. Третья состовляющая - слово `e"
"nd`, которое отмечает, где цикл заканчивается, и, наконец, есть тело цикла `li"
"ve_loop`, которое описывает, что цикл повторяет - это часть кода между `do` и "
"`end`. В данном случае мы многократно воспроизводим сэмпл бас бочки и ждём пол"
" тактовой доли. Это производит приятный ровный ритм. Скопируйте этот код в пус"
"той Sonic Pi буфер и нажмите \"Выполнить\". Бум, Бум, Бум!."

#: A.02-live-coding.md:52
#, fuzzy
msgid "Redefining On-the-fly"
msgstr "Изменения На Лету"

#: A.02-live-coding.md:54
#, fuzzy
msgid ""
"Ok, so what's so special about the `live_loop`? So far it just seems like a gl"
"orified `loop`! Well, the beauty of `live_loop`s is that you can redefine them"
" on-the-fly. This means that whilst they're still running, you can change what"
" they do. This is the secret to live coding with Sonic Pi. Let's have a play:"
msgstr ""
"Итак, что такого особенного в цикле `live_loop`? Он отдалённо напоминает усове"
"ршенствованный цикл `loop`. Преимущество `live_loop` в том, что вы можете изме"
"нять его на лету. Это значит, что пока выполняется цикл, вы можете изменить то"
", что он делает. Это и есть секрет лайвкодинга с Sonic Pi. Давайте играть:"

#: A.02-live-coding.md:60
#, no-wrap
msgid ""
"live_loop :choral_drone do\n"
"  sample :ambi_choir, rate: 0.4\n"
"  sleep 1\n"
"end"
msgstr ""
"live_loop :choral_drone do\n"
"  sample :ambi_choir, rate: 0.4\n"
"  sleep 1\n"
"end"

#: A.02-live-coding.md:67
#, fuzzy
msgid ""
"Now press the Run button or hit `alt-r`. You're now listening to some gorgeous"
" choir sounds. Now, whilst it's still playing, change the rate from `0.4` to `"
"0.38`. Hit run again. Woah! Did you hear the choir change note? Change it back"
" up to `0.4` to return back to how it was. Now, drop it to `0.2`, down to `0.1"
"9` and then back up to `0.4`. See how changing just one parameter on the fly c"
"an give you real control of the music? Now play around with the rate yourself "
"- choose your own values. Try negative numbers, really small numbers and large"
" numbers. Have fun!"
msgstr ""
"Теперь, нажмите кнопку \"Выполнить\" или `Alt-r`. Вы услышите великолепный звук "
"хора. Теперь, пока он ещё играет, измените скорость с `0.4` на `0.38`. Нажмите"
" \"Выполнить\" снова. Ого! Вы слышите, как хор сменил ноту? Измените скорость об"
"ратно на `0.4`, чтобы вернуться к тому, что было раньше. Теперь, снизьте скоро"
"сть до `0.2`, потом до `0.19`, а затем обратно до `0.4`. Видите, как изменение"
" на лету одного лишь параметра, даёт вам реальный контроль над музыкой? Теперь"
" поиграйте со скоростью самостоятельно - выберите свои собственные значения. П"
"опробуйте отрицательные числа, попробуйте очень маленькие и очень большие числ"
"а. Повеселитесь!"

#: A.02-live-coding.md:77
#, fuzzy
msgid "Sleeping is important"
msgstr "Сон Важен"

#: A.02-live-coding.md:79
#, fuzzy
msgid ""
"One of the most important lessons about `live_loop`s is that they need rest. C"
"onsider the following `live_loop`:"
msgstr ""
"Один из самых важных аспектов цикла `live_loop` в том, что в нём должна быть з"
"адержка. Рассмотрим следующий код:"

#: A.02-live-coding.md:82
#, no-wrap
msgid ""
"live_loop :infinite_impossibilities do\n"
"  sample :ambi_choir\n"
"end"
msgstr ""
"live_loop :infinite_impossibilities do\n"
"  sample :ambi_choir\n"
"end"

#: A.02-live-coding.md:88
#, fuzzy
msgid ""
"If you try running this code, you'll immediately see Sonic Pi complaining that"
" the `live_loop` did not sleep. This is a safety system kicking in! Take a mom"
"ent to think about what this code is asking the computer to do. That's right, "
"it's asking the computer to play an infinite amount of choir samples in zero t"
"ime. Without the safety system the poor computer will try and do this and cras"
"h and burn in the process. So remember, your `live_loop`s must contain a `slee"
"p`."
msgstr ""
"Если вы попробуете запустить этот код, вы сразу увидите жалобу Sonic Pi на то,"
" что в `live_loop` нет `sleep`. Это ругается система безопасности! Воспользуйт"
"есь моментом, чтобы подумать о том, что этот код просит сделать компьютер. Пра"
"вильно, он просит компьютер играть бесконечное количество хоровых сэмплов за н"
"улевое время. Без системы безопасности бедный компьютер будет пытаться сделать"
" это, что приведёт к аварии. Поэтому помните, ваш `live_loop` должен содержать"
" `sleep`."

#: A.02-live-coding.md:97
#, fuzzy
msgid "Combining Sounds"
msgstr "Сочетание Звуков"

#: A.02-live-coding.md:99
#, fuzzy
msgid ""
"Music is full of things happening at the same time. Drums at the same time as "
"bass at the same time as vocals at the same time as guitars... In computing we"
" call this concurrency and Sonic Pi provides us with an amazingly simple way o"
"f playing things at the same time. Simply use more than one `live_loop`!"
msgstr ""
"Музыка полна вещей, происходящих одновременно. Барабаны звучат в то же самое в"
"ремя, что и бас, вокал, гитары... В информатике это называется параллелизм и S"
"onic Pi обеспечивает нам удивительно простой способ играть разные вещи в одно "
"и то же время. Просто используйте больше, чем один `live_loop`!"

#: A.02-live-coding.md:105
#, no-wrap
#, fuzzy
msgid ""
"live_loop :beats do\n"
"  sample :bd_tek\n"
"  with_fx :echo, phase: 0.125, mix: 0.4 do\n"
"    sample  :drum_cymbal_soft, sustain: 0, release: 0.1\n"
"    sleep 0.5\n"
"  end\n"
"end\n"
"live_loop :bass do\n"
"  use_synth :tb303\n"
"  synth :tb303, note: :e1, release: 4, cutoff: 120, cutoff_attack: 1\n"
"  sleep 4\n"
"end"
msgstr ""
"live_loop :beats do\n"
"  sample :bd_tek\n"
"  with_fx :echo, phase: 0.125, mix: 0.4 do\n"
"    sample  :drum_cymbal_soft, sustain: 0, release: 0.1\n"
"    sleep 0.5\n"
"  end\n"
"end\n"
"  \n"
"live_loop :bass do\n"
"  use_synth :tb303\n"
"  synth :tb303, note: :e1, release: 4, cutoff: 120, cutoff_attack: 1\n"
"  sleep 4\n"
"end"

#: A.02-live-coding.md:121
#, fuzzy
msgid ""
"Here, we have two `live_loop`s, one looping quickly making beats and another l"
"ooping slowly making a crazy bass sound."
msgstr ""
"Здесь у нас есть два цикла `live_loop`, один цикл делает быстрый ритм, а друго"
"й - медленный сумасшедший басовый звук."

#: A.02-live-coding.md:124
#, fuzzy
msgid ""
"One of the interesting things about using multiple `live_loop`s is that they e"
"ach manage their own time. This means it's really easy to create interesting p"
"olyrhythmical structures and even play with phasing Steve Reich style. Check t"
"his out:"
msgstr ""
"Одна из особенностей использования нескольких циклов `live_loop` состоит в том"
", что каждый из них обладает своим собственным независимым временем. Это значи"
"т, что с помощью этого легко создавать интересные полиритмические структуры и "
"даже поиграть с фазировкой в стиле Стива Рейха (Steve Reich). Зацени:"

#: A.02-live-coding.md:129
#, no-wrap
#, fuzzy
msgid ""
"# Steve Reich's Piano Phase\n"
"notes = (ring :E4, :Fs4, :B4, :Cs5, :D5, :Fs4, :E4, :Cs5, :B4, :Fs4, :D5, :Cs5"
")\n"
"live_loop :slow do\n"
"  play notes.tick, release: 0.1\n"
"  sleep 0.3\n"
"end\n"
"live_loop :faster do\n"
"  play notes.tick, release: 0.1\n"
"  sleep 0.295\n"
"end"
msgstr ""
"# Steve Reich's Piano Phase\n"
"  \n"
"notes = (ring :E4, :Fs4, :B4, :Cs5, :D5, :Fs4, :E4, :Cs5, :B4, :Fs4, :D5, :Cs5"
")\n"
"  \n"
"live_loop :slow do\n"
"  play notes.tick, release: 0.1\n"
"  sleep 0.3\n"
"end\n"
"  \n"
"live_loop :faster do\n"
"  play notes.tick, release: 0.1\n"
"  sleep 0.295\n"
"end"

#: A.02-live-coding.md:145 A.03-coded-beats.md:155 A.04-synth-riffs.md:166
#: A.05-acid-bass.md:147 A.06-minecraft.md:156 A.07-bizet.md:138
#: A.09-randomisation.md:145 A.10-controlling-your-sound.md:149
#: A.11-beat-tracking.md:176 A.12-sample-slicing.md:137
#: A.13-probabilistic-sequencer.md:137 A.14-amplitude-modulation.md:192
#: A.15-performance.md:152 A.16-practice.md:166 A.17-sample-stretching.md:147
#: A.18-additive-synthesis.md:115 A.19-subtractive-synthesis.md:137
#, fuzzy
msgid "Bringing it all together"
msgstr "Соединим Всё Вместе"

#: A.02-live-coding.md:147
#, fuzzy
msgid ""
"In each of these tutorials, we'll end with a final example in the form of a ne"
"w piece of music which draws from all of the ideas introduced. Read this code "
"and see if you can imagine what it's doing. Then, copy it into a fresh Sonic P"
"i buffer and hit Run and actually hear what it sounds like. Finally, change on"
"e of the numbers or comment and uncomment things out. See if you can use this "
"as a starting point for a new performance, and most of all have fun! See you n"
"ext time..."
msgstr ""
"Каждую из этих статей мы будем заканчивать примером в виде фрагмента музыкальн"
"ого произведения, который вырисовывается из всех представленных в статье идей."
" Прочтите этот код и посмотрите, сможете ли вы понять, что он делает. Затем ск"
"опируйте его в свежий буфер Sonic Pi, нажмите \"Выполнить\" и послушайте, как он"
" самом деле звучит. Наконец, измените одно из чисел или закомментируйте/раском"
"ментируйте какие-нибудь строки. Посмотрите, сможете ли вы использовать этот пр"
"имер в качестве отправной точки для нового выступления, и самое главное, весел"
"итесь! До встречи в следующий раз..."

#: A.02-live-coding.md:156
#, no-wrap
#, fuzzy
msgid ""
"with_fx :reverb, room: 1 do\n"
"  live_loop :time do\n"
"    synth :prophet, release: 8, note: :e1, cutoff: 90, amp: 3\n"
"    sleep 8\n"
"  end\n"
"end\n"
"live_loop :machine do\n"
"  sample :loop_garzul, rate: 0.5, finish: 0.25\n"
"  sample :loop_industrial, beat_stretch: 4, amp: 1\n"
"  sleep 4\n"
"end\n"
"live_loop :kik do\n"
"  sample :bd_haus, amp: 2\n"
"  sleep 0.5\n"
"end\n"
"with_fx :echo do\n"
"  live_loop :vortex do\n"
"    # use_random_seed 800\n"
"    notes = (scale :e3, :minor_pentatonic, num_octaves: 3)\n"
"    16.times do\n"
"      play notes.choose, release: 0.1, amp: 1.5\n"
"      sleep 0.125\n"
"    end\n"
"  end\n"
"end"
msgstr ""
"with_fx :reverb, room: 1 do\n"
"  live_loop :time do\n"
"    synth :prophet, release: 8, note: :e1, cutoff: 90, amp: 3\n"
"    sleep 8\n"
"  end\n"
"end\n"
"  \n"
"live_loop :machine do\n"
"  sample :loop_garzul, rate: 0.5, finish: 0.25\n"
"  sample :loop_industrial, beat_stretch: 4, amp: 1\n"
"  sleep 4\n"
"end\n"
"  \n"
"live_loop :kik do\n"
"  sample :bd_haus, amp: 2\n"
"  sleep 0.5\n"
"end\n"
"  \n"
"with_fx :echo do\n"
"  live_loop :vortex do\n"
"    # use_random_seed 800\n"
"    notes = (scale :e3, :minor_pentatonic, num_octaves: 3)\n"
"    16.times do\n"
"      play notes.choose, release: 0.1, amp: 1.5\n"
"      sleep 0.125\n"
"    end\n"
"  end\n"
"end"

#: A.03-coded-beats.md:1
msgid "A.3 Coded Beats"
msgstr ""

#: A.03-coded-beats.md:3
#, fuzzy
msgid "Coded Beats"
msgstr "Кодирование ритмов"

#: A.03-coded-beats.md:5
#, fuzzy
msgid ""
"One of the most exciting and disrupting technical developments in modern music"
" was the invention of samplers. These were boxes that allowed you to record an"
"y sound into them and then manipulate and play back those sounds in many inter"
"esting ways. For example, you could take an old record, find a drum solo (or b"
"reak), record it into your sampler and then play it back on repeat at half-spe"
"ed to provide the foundation for your latest beats. This is how early hip-hop "
"music was born and today it's almost impossible to find electronic music that "
"doesn't incorporate samples of some kind. Using samples is a really great way "
"of easily introducing new and interesting elements into your live coded perfor"
"mances."
msgstr ""
"Одной из самых захватывающих и разрушающих технических разработок современной "
"музыки, стало изобретение сэмплеров. Это были коробки, которые позволяли запис"
"ывать в них любой звук, а затем воспроизводить и управлять этим звуком множест"
"вом различных способов. Например, можно взять старую записать, найти барабанно"
"е соло (или брэйк), записать его в свой сэмплер и воспроизводить на половинной"
" скорости, обеспечивая основу для своих собственных ритмов. Так зарождался ран"
"ний хип-хоп, и сегодня практически невозможно найти электронную музыку, в сост"
"аве которой нет сэмплов в том или ином виде. Использование сэмплов - это дейст"
"вительно отличный способ легко внедрять новые интересные элементы в ваше лайвк"
"одинг выступление."

#: A.03-coded-beats.md:17
#, fuzzy
msgid ""
"So where can you get a sampler? Well you already have one - it's your Raspberr"
"y Pi! The built-in live coding app Sonic Pi has an extremely powerful sampler "
"built into its core. Let's play with it!"
msgstr ""
"Так где же можно получить сэмплер? Ну, у вас уже есть один - это ваш Raspberry"
" Pi! Идущее в комплекте приложение для лайвкодинга Sonic Pi имеет чрезвычайно "
"мощный сэмплер, встроенный в его ядро. Давайте с ним поиграем!"

#: A.03-coded-beats.md:21
#, fuzzy
msgid "The Amen Break"
msgstr "Амен-брейк"

#: A.03-coded-beats.md:23
#, fuzzy
msgid ""
"One of the most classic and recognisable drum break samples is called the Amen"
" Break. It was first performed in 1969 in the song \"Amen Brother\" by the Winst"
"ons as part of a drum break. However, it was when it was discovered by early h"
"ip-hop musicians in the 80s and used in samplers that it started being heavily"
" used in a wide variety of other styles such as drum and bass, breakbeat, hard"
"core techno and breakcore."
msgstr ""
"Один из самых узнаваемых сэмплов классических барабанных брейков называется Ам"
"ен-брейк. Он впервые прозвучал в 1969 году в песне \"Аминь, Брат\", исполнителя "
"\"Winstons\", как часть барабанного брейка. Тем не менее, когда он был обнаружен"
" ранними хип-хоп музыкантами в 80-х годах и начал использоваться в сэмплерах, "
"он стал активно внедряться и в другие стили, такие как драм-эн-бэйс, брейкбит,"
" хардкор, техно и брейк-кор."

#: A.03-coded-beats.md:30
#, fuzzy
msgid ""
"I'm sure you're excited to hear that it's also built right into Sonic Pi. Clea"
"r up a buffer and throw in the following code:"
msgstr ""
"Я уверен, что вы будете взволнованы, узнав, что он также входит в состав Sonic"
" Pi. Очистите буфер и поместите в него следующий код:"

#: A.03-coded-beats.md:37
#, fuzzy
msgid ""
"Hit *Run* and boom! You're listening to one of the most influential drum break"
"s in the history of dance music. However, this sample wasn't famous for being "
"played as a one-shot, it was built for being looped."
msgstr ""
"Нажмите *Выполнить* и бум! Вы слушаете один из самых влиятельных барабанных бр"
"ейков в истории танцевальной музыки. Однако, этот сэмпл не стал бы известен, б"
"удучи сыгран сам по себе, он был выбран для того, чтобы стать петлёй."

#: A.03-coded-beats.md:42
#, fuzzy
msgid "Beat Stretching"
msgstr "Растяжение Ритмов"

#: A.03-coded-beats.md:44
#, fuzzy
msgid ""
"Let's loop the Amen Break by using our old friend the `live_loop` introduced i"
"n this tutorial last month:"
msgstr ""
"Давайте зациклим амен-брейк, используя наш старый добрый цикл `live_loop`, пре"
"дставленный в прошлом выпуске этого журнала:"

#: A.03-coded-beats.md:47
#, no-wrap
msgid ""
"live_loop :amen_break do\n"
"  sample :loop_amen\n"
"  sleep 2\n"
"end"
msgstr ""
"live_loop :amen_break do\n"
"  sample :loop_amen\n"
"  sleep 2\n"
"end"

#: A.03-coded-beats.md:54
#, fuzzy
msgid ""
"OK, so it is looping, but there's an annoying pause every time round. That is "
"because we asked it to sleep for `2` beats and with the default BPM of 60 the "
"`:loop_amen` sample only lasts for `1.753` beats. We therefore have a silence "
"of `2 - 1.753 = 0.247` beats. Even though it's short, it's still noticeable."
msgstr ""
"ОК, мы его зациклили, но при каждом повторе есть неприятная пауза. Это потому,"
" что мы сказали Sonic Pi ждать `2` тактовые доли, а с учётом того, что по умол"
"чанию BPM (ударов в минуту) равно 60, сэмпл `:loop_amen` длится только `1.753`"
" удара. Поэтому мы имеем тишину `2 - 1.753 = 0.247` удара. Даже не смотря на т"
"о, что она довольно короткая, она всё равно заметна."

#: A.03-coded-beats.md:60
#, fuzzy
msgid ""
"To fix this issue we can use the `beat_stretch:` opt to ask Sonic Pi to stretc"
"h (or shrink) the sample to match the specified number of beats."
msgstr ""
"Чтобы устранить эту проблему, мы можем воспользоваться параметром `beat_stretc"
"h:`, чтобы сказать Sonic Pi растянуть (или сжать) сэмпл согласно установленнму"
" количеству ударов."

#: A.03-coded-beats.md:63
#, fuzzy
msgid ""
"Sonic Pi's `sample` and `synth` fns give you a lot of control via optional par"
"ameters such as `amp:`, `cutoff:` and `release:`. However, the term optional p"
"arameter is a real mouthful so we just call them *opts* to keep things nice an"
"d simple."
msgstr ""
"Функции Sonic Pi `sample` и `synth` дают вам контроль через необязательные пар"
"аметры, такие как `amp:`, `cutoff:` и `release:`. Однако, термин \"необязательн"
"ый параметр\" - это слишком длинное название, поэтому для простоты будем называ"
"ть их просто *параметры*."

#: A.03-coded-beats.md:68
#, no-wrap
#, fuzzy
msgid ""
"live_loop :amen_break do\n"
"  sample :loop_amen, beat_stretch: 2\n"
"  sleep 2\n"
"end  "
msgstr ""
"live_loop :amen_break do\n"
"  sample :loop_amen, beat_stretch: 2\n"
"  sleep 2\n"
"end"

#: A.03-coded-beats.md:75
#, fuzzy
msgid ""
"Now we're dancing! Although, perhaps we want to speed it up or slow it down to"
" suit the mood."
msgstr ""
"Теперь мы танцуем! Хотя, возможно, вы захотите ускорить или замедлить его, что"
"бы придать звуку иной характер."

#: A.03-coded-beats.md:78
#, fuzzy
msgid "Playing with Time"
msgstr "Играем Со Временем"

#: A.03-coded-beats.md:80
#, fuzzy
msgid ""
"OK, so what if we want to change styles to old school hip hop or breakcore? On"
"e simple way of doing this is to play with time - or in other words mess with "
"the tempo. This is super easy in Sonic Pi - just throw in a `use_bpm` into you"
"r live loop:"
msgstr ""
"ОК, но что, если мы хотим изменить стиль на олдскульный хип-хоп или брейк-кор?"
" Один из простейших способов сделать это - играть со временем - или, другими с"
"ловами, сдвинуть темп. В Sonic Pi это супер просто - добавьте `use_bpm` в живо"
"й цикл:"

#: A.03-coded-beats.md:85
#, no-wrap
msgid ""
"live_loop :amen_break do\n"
"  use_bpm 30\n"
"  sample :loop_amen, beat_stretch: 2\n"
"  sleep 2\n"
"end "
msgstr ""
"live_loop :amen_break do\n"
"  use_bpm 30\n"
"  sample :loop_amen, beat_stretch: 2\n"
"  sleep 2\n"
"end "

#: A.03-coded-beats.md:93
#, fuzzy
msgid ""
"Whilst you're rapping over those slow beats, notice that we're still sleeping "
"for 2 and our BPM is 30, yet everything is in time. The `beat_stretch` opt wor"
"ks with the current BPM to make sure everything just works."
msgstr ""
"Пока вы будете читать рэп под этот медленный ритм, обратите внимание, что мы д"
"о сих пор ждём 2 удара, и хотя наш BPM 30, всё продолжает звучать пропорционал"
"ьно. Параметр `beat_stretch` работает с текущим BPM, чтобы быть уверенным, что"
" всё будет работать исправно."

#: A.03-coded-beats.md:97
#, fuzzy
msgid ""
"Now, here's the fun part. Whilst the loop is still live, change the `30` in th"
"e `use_bpm 30` line to `50`. Woah, everything just got faster yet *kept in tim"
"e*! Try going faster - up to 80, to 120, now go crazy and punch in 200!"
msgstr ""
"Теперь самое интересное. Пока цикл всё ещё исполняется, изменми `30` в строке "
"`use_bpm 30` на`50`. Ого, всё ускорилось, но продолжает звучать *равномерно во"
" времени*! Попытайтесь разогнаться ещё быстрее - до 80, до 120, или, сойдите с"
" ума, и дайте 200!"

#: A.03-coded-beats.md:103
#, fuzzy
msgid "Filtering"
msgstr "Фильтрация"

#: A.03-coded-beats.md:105
#, fuzzy
msgid ""
"Now we can live loop samples, let's look at some of the most fun opts provided"
" by the `sample` synth. First up is `cutoff:` which controls the cutoff filter"
" of the sampler. By default this is disabled but you can easily turn it on:"
msgstr ""
"Теперь, когда мы можем зацикливать сэмплы в реальном времени, давайте взглянем"
" на некоторые из самых забавных параметров, предоставляемых сэмплером. Первый "
"- `cutoff:`, который контролирует частоту среза фильтра. По умолчанию эта возм"
"ожность отключена, но вы можете легко её включить:"

#: A.03-coded-beats.md:110
#, no-wrap
#, fuzzy
msgid ""
"live_loop :amen_break do\n"
"  use_bpm 50\n"
"  sample :loop_amen, beat_stretch: 2, cutoff: 70\n"
"  sleep 2\n"
"end  "
msgstr ""
"live_loop :amen_break do\n"
"  use_bpm 50\n"
"  sample :loop_amen, beat_stretch: 2, cutoff: 70\n"
"  sleep 2\n"
"end"

#: A.03-coded-beats.md:118
#, fuzzy
msgid ""
"Go ahead and change the `cutoff:` opt. For example, increase it to 100, hit *R"
"un* and wait for the loop to cycle round to hear the change in the sound. Noti"
"ce that low values like 50 sound mellow and bassy and high values like 100 and"
" 120 are more full-sounding and raspy. This is because the `cutoff:` opt will "
"chop out the high frequency parts of the sound just like a lawn-mower chops of"
"f the top of the grass. The `cutoff:` opt is like the length setting - determi"
"ning how much grass is left over."
msgstr ""
"Давайте изменим параметр `cutoff:`. Например, увеличте его до 100, нажмите *Вы"
"полнить* и ждите, пока круг цикла завершится, чтобы услышать изменения в звуке"
". Обратите внимание, что низкие значения, такие как 50, дают сочный звук и бас"
"ы, а высокие значения, типа 100 и 120, дают более полное звучание и больше выс"
"окочастотных составляющих. Это происходит потому, что параметр `cutoff:` сруба"
"ет высокочастотную область звука так же, как газонокосилка срезает верхнюю час"
"ть травы. Параметр `cutoff:` определяет сколько \"травы\" оставлять."

#: A.03-coded-beats.md:128
#, fuzzy
msgid "Slicing"
msgstr "Нарезка"

#: A.03-coded-beats.md:130
#, fuzzy
msgid ""
"Another great tool to play with is the slicer FX. This will chop (slice) the s"
"ound up. Wrap the `sample` line with the FX code like this:"
msgstr ""
"Еще один отличный инструмент, с которым можно поиграть - это эффект `slicer`. "
"Он позволяет \"нарезать\" звук сэмпла. Оберните строку `sample` кодом эффекта, к"
"ак здесь:"

#: A.03-coded-beats.md:133
#, no-wrap
msgid ""
"live_loop :amen_break do\n"
"  use_bpm 50\n"
"  with_fx :slicer, phase: 0.25, wave: 0, mix: 1 do\n"
"    sample :loop_amen, beat_stretch: 2, cutoff: 100\n"
"  end\n"
"  sleep 2\n"
"end"
msgstr ""
"live_loop :amen_break do\n"
"  use_bpm 50\n"
"  with_fx :slicer, phase: 0.25, wave: 0, mix: 1 do\n"
"    sample :loop_amen, beat_stretch: 2, cutoff: 100\n"
"  end\n"
"  sleep 2\n"
"end"

#: A.03-coded-beats.md:143
#, fuzzy
msgid ""
"Notice how the sound bounces up and down a little more. (You can hear the orig"
"inal sound without the FX by changing the `mix:` opt to `0`.) Now, try playing"
" around with the `phase:` opt. This is the rate (in beats) of the slicing effe"
"ct. A smaller value like `0.125` will slice faster and larger values like `0.5"
"` will slice more slowly. Notice that successively halving or doubling the `ph"
"ase:` opts val tends to always sound good. Finally, change the `wave:` opt to "
"one of 0, 1, or 2 and hear how it changes the sound. These are the various wav"
"e shapes. 0 is a saw wave, (hard in, fade out) 1 is a square wave (hard in, ha"
"rd out) and 2 is a triangle wave (fade in, fade out)."
msgstr ""
"Обратите внимание, как звук стал более упругим (вы можете услышать оригинально"
"е звучание сэмпла без эффекта, установив параметр `mix:` в `0`.) Теперь поигра"
"йтесь с параметром `phase:`. Это размер (в ударах) нарезки. Меньшее значение, "
"такое как `0.125`, нарежет сэмпл более короткими кусками и в большем количеств"
"е, чем значение `0.5`, при котором нарезка будет реже и толще. Обратите вниман"
"ие, что удвоения значений `phase`, как правило, всегда звучат хорошо. Наконец,"
" измените параметр `wave:`, выбрав из 0, 1 или 2, и послушайте, как меняется з"
"вук. Это три разные формы волны. 0 - это пилообразная волна, (резко начинается"
", плавно затухает), 1 - прямоугольная волна (резко начинается, резко обрываетс"
"я), и 2 - треугольная волна (плавно нарастает, плавно затухает)."

#: A.03-coded-beats.md:157
#, fuzzy
msgid ""
"Finally, let's go back in time and revisit the early Bristol drum and bass sce"
"ne with this month's example. Don't worry too much about what all this means, "
"just type it in, hit Run, then start live coding it by changing opt numbers an"
"d see where you can take it. Please do share what you create! See you next tim"
"e..."
msgstr ""
"Наконец, давайте вернёмся назад во времени, и вновь посетим раннюю Бристольску"
"ю драм-эн-бэйс сцену. Не волнуйтесь о том, что всё это значит, просто введите "
"этот код в пустой буфер, нажмите \"Выполнить\", и начинайте лайвкодинг. Изменяйт"
"е значения параметров и подумайте, где бы вы смогли применить это. Пожалуйста,"
" поделитесь тем, что у вас получилось! Увидимся в следующий раз..."

#: A.03-coded-beats.md:163
#, no-wrap
#, fuzzy
msgid ""
"use_bpm 100\n"
"live_loop :amen_break do\n"
"  p = [0.125, 0.25, 0.5].choose\n"
"  with_fx :slicer, phase: p, wave: 0, mix: rrand(0.7, 1) do\n"
"    r = [1, 1, 1, -1].choose\n"
"    sample :loop_amen, beat_stretch: 2, rate: r, amp: 2\n"
"  end\n"
"  sleep 2\n"
"end\n"
"live_loop :bass_drum do\n"
"  sample :bd_haus, cutoff: 70, amp: 1.5\n"
"  sleep 0.5\n"
"end\n"
"live_loop :landing do\n"
"  bass_line = (knit :e1, 3, [:c1, :c2].choose, 1)\n"
"  with_fx :slicer, phase: [0.25, 0.5].choose, invert_wave: 1, wave: 0 do\n"
"    s = synth :square, note: bass_line.tick, sustain: 4, cutoff: 60\n"
"    control s, cutoff_slide: 4, cutoff: 120\n"
"  end\n"
"  sleep 4\n"
"end"
msgstr ""
"use_bpm 100\n"
"  \n"
"live_loop :amen_break do\n"
"  p = [0.125, 0.25, 0.5].choose\n"
"  with_fx :slicer, phase: p, wave: 0, mix: rrand(0.7, 1) do\n"
"    r = [1, 1, 1, -1].choose\n"
"    sample :loop_amen, beat_stretch: 2, rate: r, amp: 2\n"
"  end\n"
"  sleep 2\n"
"end\n"
"  \n"
"live_loop :bass_drum do\n"
"  sample :bd_haus, cutoff: 70, amp: 1.5\n"
"  sleep 0.5\n"
"end\n"
"  \n"
"live_loop :landing do\n"
"  bass_line = (knit :e1, 3, [:c1, :c2].choose, 1)\n"
"  with_fx :slicer, phase: [0.25, 0.5].choose, invert_wave: 1, wave: 0 do\n"
"    s = synth :square, note: bass_line.tick, sustain: 4, cutoff: 60\n"
"    control s, cutoff_slide: 4, cutoff: 120\n"
"  end\n"
"  sleep 4\n"
"end"

#: A.04-synth-riffs.md:1
msgid "A.4 Synth Riffs"
msgstr ""

#: A.04-synth-riffs.md:3
#, fuzzy
msgid "Synth Riffs"
msgstr "Синтезаторные Риффы"

#: A.04-synth-riffs.md:5
#, fuzzy
msgid ""
"Whether it's the haunting drift of rumbling oscillators or the detuned punch o"
"f saw waves piercing through the mix, the lead synth plays an essential role o"
"n any electronic track. In last month's edition of this tutorial series we cov"
"ered how to code our beats. In this tutorial we'll cover how to code up the th"
"ree core components of a synth riff - the timbre, melody and rhythm."
msgstr ""
"Какой бы звук вы не использовали, солирующий синтезатор всегда играет главную "
"роль в любом электронном треке. В статье из прошлого номера мы рассматривали, "
"как кодировать барабанные биты. В этой статье мы узнаем, как кодировать три ос"
"новных компонента синтезаторных риффов - тембр, мелодию и ритм."

#: A.04-synth-riffs.md:12
#, fuzzy
msgid ""
"OK, so power up your Raspberry Pi, crack open Sonic Pi v2.6+ and let's make so"
"me noise!"
msgstr ""
"Итак, подключите ваш Paspberry Pi, откройте Sonic Pi версии v2.6+ и давайте по"
"шумим!"

#: A.04-synth-riffs.md:16
#, fuzzy
msgid "Timbral Possibilities"
msgstr "Тембральные Возможности"

#: A.04-synth-riffs.md:18
#, fuzzy
msgid ""
"An essential part of any synth riff is changing and playing with the timbre of"
" the sounds. We can control the timbre in Sonic Pi in two ways - choosing diff"
"erent synths for a dramatic change and setting the various synth opts for more"
" subtle modifications. We can also use FX, but that's for another tutorial..."
msgstr ""
"Неотъемлемой частью любого синтезаторного риффа является его тембр. Мы можем и"
"зменять тембр в Sonic Pi двумя способами - выбирая различные синты для резкой "
"смены тембра, и изменяя различные синтовые параметры для более тонкой настройк"
"и. Мы также можем использовать эффекты, но об этом в другой раз..."

#: A.04-synth-riffs.md:24
#, fuzzy
msgid "Let's create a simple live loop where we continually change the current synth:"
msgstr ""
"Давайте создадим простой живой цикл, в котором будет постоянно изменяться теку"
"щий синт:"

#: A.04-synth-riffs.md:27
#, no-wrap
msgid ""
"live_loop :timbre do\n"
"  use_synth (ring :tb303, :blade, :prophet, :saw, :beep, :tri).tick\n"
"  play :e2, attack: 0, release: 0.5, cutoff: 100\n"
"  sleep 0.5\n"
"end"
msgstr ""
"live_loop :timbre do\n"
"  use_synth (ring :tb303, :blade, :prophet, :saw, :beep, :tri).tick\n"
"  play :e2, attack: 0, release: 0.5, cutoff: 100\n"
"  sleep 0.5\n"
"end"

#: A.04-synth-riffs.md:35
#, fuzzy
msgid ""
"Take a look at the code. We're simply ticking through a ring of synth names (t"
"his will cycle through each of these in turn repeating the list over and over)"
". We pass this synth name to the `use_synth` fn (function) which will change t"
"he `live_loop`'s current synth. We also play note `:e2` (E at the second octav"
"e), with a release time of 0.5 beats (half a second at the default BPM of 60) "
"and with the `cutoff:` opt set to 100."
msgstr ""
"Взгляните на код. Мы просто перебираем по кругу элементы кольцевого списка, со"
"держащего имена синтов (цикл переключает синт на следующий в списке снова и сн"
"ова). Мы передаём имена этих синтов функции `use_synth`, которая и переключает"
" текущий синтезатор цикла `live_loop`. Ещё мы играем ноту `:Е2` (ми второй окт"
"авы), со временем затухания 0.5 удара (пол секунды с ВРМ по умолчанию 60) и с "
"параметром `cutoff:`, равным 100."

#: A.04-synth-riffs.md:42
#, fuzzy
msgid ""
"Hear how the different synths have very different sounds even though they're a"
"ll playing the same note. Now experiment and have a play. Change the release t"
"ime to bigger and smaller values. For example, change the `attack:` and `relea"
"se:` opts to see how different fade in/out times have a huge impact on the sou"
"nd. Finally change the `cutoff:` opt to see how different cutoff values also m"
"assively influence the timbre (values between 60 and 130 are good). See how ma"
"ny different sounds you can create by just changing a few values. Once you've "
"mastered that, just head to the Synths tab in the Help system for a full list "
"of all the synths and all the available opts each individual synth supports to"
" see just how much power you have under your coding fingertips."
msgstr ""
"Слышите, разные синтезаторы звучат совершенно по-разному, хотя играют одну и т"
"у же ноту? Теперь давайте поэкспериментируем. Измените время затухания на боль"
"шее или меньшее значение. Изменяйте оба параметра - `attack:` и `release:`, чт"
"обы посмотреть, как сильно разные их значения изменяют звук. Наконец, измените"
" параметр `cutoff:`, чтобы услышать, что разные значения среза фильтра также р"
"адикально изменяют тембр синта (значения между 60 и 130 обычно звучат хорошо)."
" Посмотрите, сколько разнообразных звуков можно создать, изменяя всего лишь не"
"сколько параметров. Как только вы это освоите, откройте вкладку \"Синтезаторы\" "
"справочной системы, и взгляните на полный список синтезаторов и их параметров,"
" чтобы увидеть, какую мощь вы держите в руках."

#: A.04-synth-riffs.md:55
#, fuzzy
msgid "Timbre"
msgstr "Тембр"

#: A.04-synth-riffs.md:57
#, fuzzy
msgid ""
"Timbre is just a fancy word describing the sound of a sound. If you play the s"
"ame note with different instruments such as a violin, guitar, or piano, the pi"
"tch (how high or low it sounds) would be the same, but the sound quality would"
" be different. That sound quality - the thing which allows you to tell the dif"
"ference between a piano and a guitar is the timbre."
msgstr ""
"Тембр - это просто слово, описывающее звук. Если вы сыграете одну и ту же ноту"
" на разных инструментах, таких как скрипка, гитара, или пианино, высота звука "
"будет одинаковой, но качество звуков будет разным. Это качество звука - то, чт"
"о позволяет вам слышать разницу между пианино и гитарой - и есть тембр."

#: A.04-synth-riffs.md:65
#, fuzzy
msgid "Melodic Composition"
msgstr "Мелодическая Структура"

#: A.04-synth-riffs.md:67
#, fuzzy
msgid ""
"Another important aspect to our lead synth is the choice of notes we want to p"
"lay. If you already have a good idea, then you can simply create a ring with y"
"our notes in and tick through them:"
msgstr ""
"Ещё одним важным аспектом нашего солирующего синтезатора является выбор нот, к"
"оторые он будет играть. Если у вас уже есть хорошая мелодическая идея, то вы м"
"ожете просто создать кольцо с вашими нотами, и воспроизводить его по кругу:"

#: A.04-synth-riffs.md:71
#, no-wrap
msgid ""
"live_loop :riff do\n"
"  use_synth :prophet\n"
"  riff = (ring :e3, :e3, :r, :g3, :r, :r, :r, :a3)\n"
"  play riff.tick, release: 0.5, cutoff: 80\n"
"  sleep 0.25\n"
"end"
msgstr ""
"live_loop :riff do\n"
"  use_synth :prophet\n"
"  riff = (ring :e3, :e3, :r, :g3, :r, :r, :r, :a3)\n"
"  play riff.tick, release: 0.5, cutoff: 80\n"
"  sleep 0.25\n"
"end"

#: A.04-synth-riffs.md:80
#, fuzzy
msgid ""
"Here, we've defined our melody with a ring which includes both notes such as `"
":e3` and rests represented by `:r`. We're then using `.tick` to cycle through "
"each note to give us a repeating riff."
msgstr ""
"Здесь мы поместили нашу мелодию в кольцевой список, содержащий ноты, такие как"
" `:е3` и паузы, обозначенные `:r`. Затем, мы использовали `.tick`, чтобы получ"
"ить повторяющийся рифф."

#: A.04-synth-riffs.md:84
#, fuzzy
msgid "Auto Melody"
msgstr "Автомелодия"

#: A.04-synth-riffs.md:86
#, fuzzy
msgid ""
"It's not always easy to come up with a nice riff from scratch. Instead it's of"
"ten easier to ask Sonic Pi for a selection of random riffs and to choose the o"
"ne you like the best. To do that we need to combine three things: rings, rando"
"misation and random seeds. Let's look at an example:"
msgstr ""
"Не всегда бывает легко придумать хороший рифф с нуля. Вместо этого, иногда про"
"ще сказать Sonic Pi играть случайный рифф, и выбрать тот, который понравится в"
"ам больше всего. Для этого нам необходимо объединить три вещи: кольца, рандоми"
"зацю и отправную точку (зерно) рандомизаци. Взгляните на пример:"

#: A.04-synth-riffs.md:91
#, no-wrap
msgid ""
"live_loop :random_riff do\n"
"  use_synth :dsaw\n"
"  use_random_seed 3\n"
"  notes = (scale :e3, :minor_pentatonic).shuffle\n"
"  play notes.tick, release: 0.25, cutoff: 80\n"
"  sleep 0.25\n"
"end"
msgstr ""
"live_loop :random_riff do\n"
"  use_synth :dsaw\n"
"  use_random_seed 3\n"
"  notes = (scale :e3, :minor_pentatonic).shuffle\n"
"  play notes.tick, release: 0.25, cutoff: 80\n"
"  sleep 0.25\n"
"end"

#: A.04-synth-riffs.md:101
#, fuzzy
msgid ""
"There's a few things going on - let's look at them in turn. First, we specify "
"that we're using random seed 3. What does this mean? Well, the useful thing is"
" that when we set the seed, we can predict what the next random value is going"
" to be - it's the same as it was last time we set the seed to 3! Another usefu"
"l thing to know is that shuffling a ring of notes works in the same way. In th"
"e example above we're essentially asking for the 'third shuffle' in the standa"
"rd list of shuffles - which is also the same every time as we're always settin"
"g the random seed to the same value right before the shuffle. Finally we're ju"
"st ticking through our shuffled notes to play the riff."
msgstr ""
"Здесь происходит несколько вещей - давайте рассмотрим их по очереди. Во-первых"
", мы указли, что используем зерно рандомизаци 3. Что это значит? Ну, смысл в т"
"ом, что когда мы устанавливаем зерно, мы можем предсказать, какой будет рандом"
"изаця в следующий раз. Той же самой, что и в тот раз, когда мы устанавливали з"
"ерно в 3! Ещё одна вещь, которую полезно знать, что перемешивание нот кольца б"
"удет произведено тем же способом. В примере выше, мы, по сути, вызываем \"треть"
"е перемешивание\" из стандартного списка перемешиваний, который остаётся неизме"
"нным всякий раз, когда мы устанавливаем зерно в то же значение перед перемешив"
"анием. Наконец, мы просто вызываем по кругу наши перемешанные ноты, чтобы полу"
"чить рифф."

#: A.04-synth-riffs.md:112
#, fuzzy
msgid ""
"Now, here's where the fun starts. If we change the random seed value to anothe"
"r number, say 3000, we get an entirely different shuffling of the notes. So no"
"w it's extremely easy to explore new melodies. Simply choose the list of notes"
" we want to shuffle (scales are a great starting point) and then choose the se"
"ed we want to shuffle with. If we don't like the melody, just change one of th"
"ose two things and try again. Repeat until you like what you hear!"
msgstr ""
"Вот где начинается веселье. Если мы меняем значение зерно рандомизаци на друго"
"е, скажем 3000, мы получаем совершенно другое перемешивание нот. Так что тепер"
"ь очень легко исследовать новые мелодии. Просто выберите список нот, которые в"
"ы хотите перемешать (гаммы представляют собой отличную отправную точку), а зат"
"ем выберите зерно рандомизаци, с которого вы хотите начать перемешивание. Если"
" вам не нравится мелодия, просто измените одну из этих двух вещей и попробуйте"
" снова. Повторяйте до тех пор, пока вам понравится то, что вы слышите!"

#: A.04-synth-riffs.md:121
#, fuzzy
msgid "Pseudo Randomisation"
msgstr "Псевдо Рандомизация"

#: A.04-synth-riffs.md:123
#, fuzzy
msgid ""
"Sonic Pi's randomisation is not actually random it's what's called pseudo rand"
"om. Imagine if you were to roll a dice 100 times and write down the result of "
"each roll onto a piece of paper. Sonic Pi has the equivalent of this list of r"
"esults which it uses when you ask for a random value. Instead of rolling an ac"
"tual dice, it just picks the next value from the list. Setting the random seed"
" is just jumping to a specific point in that list."
msgstr ""
"Случайный выбор в Sonic Pi на самом деле не является случайным, это то, что об"
"ычно называется псевдо рандомизация. Представьте, что вы бросали игральные кос"
"ти 100 раз и записывали результат каждого броска на лист бумаги. Sonic Pi имее"
"т эквивалент этого списка результатов, которые он использует, когда вы запраши"
"ваете случайные значения. Только вместо бросков настоящих костей, он выбирает "
"следующее значение из списка. Настройка зерна рандомизаци - это просто прыжок "
"в определённое место этого списка."

#: A.04-synth-riffs.md:131
#, fuzzy
msgid "Finding your Rhythm"
msgstr "Поиск Ритма"

#: A.04-synth-riffs.md:133
#, fuzzy
msgid ""
"Another important aspect to our riff is the rhythm - when to play a note and w"
"hen not to. As we saw above we can use `:r` in our rings to insert rests. Anot"
"her very powerful way is to use spreads which we'll cover in a future tutorial"
". Today we'll use randomisation to help us find our rhythm. Instead of playing"
" every note we can use a conditional to play a note with a given probability. "
"Let's take a look:"
msgstr ""
"Ещё один важный аспект нашго риффа, это ритм - т.е. последовательность нот и п"
"ауз. Как мы видели раньше, мы можем использовать `:r` в наших кольцах, чтобы в"
"ставить паузу. Ещё один очень мощный способ - использовать методы колец, но о "
"них мы поговорим в следующий раз. Сегодня мы будем использовать рандомизацию, "
"чтобы помочь нам найти подходящий ритм. Вместо того, чтобы играть каждую ноту,"
" мы можем играть ноту с заданной вероятностью. Давайте посмотрим:"

#: A.04-synth-riffs.md:140
#, no-wrap
msgid ""
"live_loop :random_riff do\n"
"  use_synth :dsaw\n"
"  use_random_seed 30\n"
"  notes = (scale :e3, :minor_pentatonic).shuffle\n"
"  16.times do\n"
"    play notes.tick, release: 0.2, cutoff: 90 if one_in(2)\n"
"    sleep 0.125\n"
"  end\n"
"end"
msgstr ""
"live_loop :random_riff do\n"
"  use_synth :dsaw\n"
"  use_random_seed 30\n"
"  notes = (scale :e3, :minor_pentatonic).shuffle\n"
"  16.times do\n"
"    play notes.tick, release: 0.2, cutoff: 90 if one_in(2)\n"
"    sleep 0.125\n"
"  end\n"
"end"

#: A.04-synth-riffs.md:152
#, fuzzy
msgid ""
"A really useful fn to know is `one_in` which will give us a `true` or `false` "
"value with the specified probability. Here, we're using a value of 2 so on ave"
"rage one time every two calls to `one_in` it will return `true`. In other word"
"s, 50% of the time it will return `true`. Using higher values will make it ret"
"urn `false` more often introducing more space into the riff."
msgstr ""
"Очень полезно знать функцию `one_in`, которая возвращает нам `true` или `false"
"` с заданной вероятностью. Здесь мы используем значение 2, поэтому в среднем о"
"дин раз каждые два вызова, `one_in` возвратит `true`. Другими словами, она буд"
"ет возвращать `true` в 50% случаев. Если использовать более высокие значения, "
"`false`будет возвращаться чаще, добавляя в рифф больше пауз."

#: A.04-synth-riffs.md:159
#, fuzzy
msgid ""
"Notice that we've added some iteration in here with `16.times`. This is becaus"
"e we only want to reset our random seed value every 16 notes so our rhythm rep"
"eats every 16 times. This doesn't affect the shuffling as that is still done i"
"mmediately after the seed is set. We can use the iteration size to alter the l"
"ength of the riff. Try changing the 16 to 8 or even 4 or 3 and see how it affe"
"cts the rhythm of the riff."
msgstr ""
"Заметим, что мы добавили повторы `16.times`. Это потому, что мы хотим сбрасыва"
"ть наше зерно рандомизаци каждые 16 нот. Так наш ритм будет повторяться каждые"
" 16 ударов. Это не влияет на перемешивание, т.к. оно выполняется сразу после т"
"ого, как установлено зерно рандомизаци. Мы можем использовать разное количеств"
"о повторов для изменения длины риффа. Попробуйте изменить 16 на 8 или даже на "
"4 или 3 и посмотрите, как это повлияет на ритм."

#: A.04-synth-riffs.md:168
#, fuzzy
msgid ""
"OK, so let's combine everything we've learned together into one final example."
" See you next time!"
msgstr ""
"ОК, теперь давайте совместим всё, чему мы научились, в один финальный пример. "
"Увидимся в следующий раз!"

#: A.04-synth-riffs.md:171
#, no-wrap
msgid ""
"live_loop :random_riff do\n"
"  #  uncomment to bring in:\n"
"  #  synth :blade, note: :e4, release: 4, cutoff: 100, amp: 1.5\n"
"  use_synth :dsaw\n"
"  use_random_seed 43\n"
"  notes = (scale :e3, :minor_pentatonic, num_octaves: 2).shuffle.take(8)\n"
"  8.times do\n"
"    play notes.tick, release: rand(0.5), cutoff: rrand(60, 130) if one_in(2)\n"
"    sleep 0.125\n"
"  end\n"
"end\n"
" \n"
"live_loop :drums do\n"
"  use_random_seed 500\n"
"  16.times do\n"
"    sample :bd_haus, rate: 2, cutoff: 110 if rand < 0.35\n"
"    sleep 0.125\n"
"  end\n"
"end\n"
" \n"
"live_loop :bd do\n"
"  sample :bd_haus, cutoff: 100, amp: 3\n"
"  sleep 0.5\n"
"end"
msgstr ""
"live_loop :random_riff do\n"
"  #  uncomment to bring in:\n"
"  #  synth :blade, note: :e4, release: 4, cutoff: 100, amp: 1.5\n"
"  use_synth :dsaw\n"
"  use_random_seed 43\n"
"  notes = (scale :e3, :minor_pentatonic, num_octaves: 2).shuffle.take(8)\n"
"  8.times do\n"
"    play notes.tick, release: rand(0.5), cutoff: rrand(60, 130) if one_in(2)\n"
"    sleep 0.125\n"
"  end\n"
"end\n"
" \n"
"live_loop :drums do\n"
"  use_random_seed 500\n"
"  16.times do\n"
"    sample :bd_haus, rate: 2, cutoff: 110 if rand < 0.35\n"
"    sleep 0.125\n"
"  end\n"
"end\n"
" \n"
"live_loop :bd do\n"
"  sample :bd_haus, cutoff: 100, amp: 3\n"
"  sleep 0.5\n"
"end"

#: A.05-acid-bass.md:1
msgid "A.5 Acid Bass"
msgstr ""

#: A.05-acid-bass.md:3
#, fuzzy
msgid "Acid Bass"
msgstr "Кислотный Бас"

#: A.05-acid-bass.md:5
#, fuzzy
msgid ""
"It's impossible to look through the history of electronic dance music without "
"seeing the enormous impact of the tiny Roland TB-303 synthesiser. It's the sec"
"ret sauce behind the original acid bass sound. Those classic squealing and squ"
"elching TB-303 bass riffs can be heard from the early Chicago House scene thro"
"ugh to more recent electronic artists such as Plastikman, Squarepusher and Aph"
"ex Twin."
msgstr ""
"Невозможно исследовать историю электронной танцевальной музыки, и не заметить "
"огромного влияния крошечного синтезатора Roland TB-303. Это секретный ингридие"
"нт оригинального кислотного баса. Классическое визжание и чавканье басовых риф"
"фов TB-303 можно услышать в ранней чикагской хаус сцене благодаря таким музыка"
"нтам, как Plastikman, Squarepusher и Aphex Twin."

#: A.05-acid-bass.md:12
#, fuzzy
msgid ""
"Interestingly, Roland never intended for the TB-303 to be used in dance music."
" It was originally created as a practice aid for guitarists. They imagined tha"
"t people would program them to play bass lines to jam along to. Unfortunately "
"there were a number of problems: they were a little fiddly to program, didn't "
"sound particularly good as a bass-guitar replacement and were pretty expensive"
" to buy. Deciding to cut their losses, Roland stopped making them after 10,000"
" units were sold and after a number of years sitting on guitarist's shelves, t"
"hey soon could be found in the windows of second hand shops. These lonely disc"
"arded TB-303s were waiting to be discovered by a new generation of experimente"
"rs who started using them in ways that Roland didn't imagine to create new cra"
"zy sounds. Acid House was born."
msgstr ""
"Интересно, что инженеры Roland никогда не предполагали, что TB-303 будет испол"
"ьзоваться в танцевальной музыке. Он изначально создавался для гитаристов. Они "
"расчитывали, что гитаристы будут программировать TB-303 играть басовые линии в"
" джемах. К сожалению, существовал ряд проблем: они были немного неудобными для"
" программирования, не очень хорошо звучали в качестве замены бас-гитары и были"
" довольно дорогими. Решив сократить убытки, Roland прекратили их выпуск после "
"продажи 10 000 экземпляров, и после нескольких лет лежания на полках, эи синте"
"заторы можно было найти только в магазинах \"секонд хенд\". Эти одинокие, отверг"
"нутые TB-303 ждали, когда их обнаружит новое поколение экспериментаторов, кото"
"рые начали применять их способом, который в Roland и представить не могли, соз"
"давая новые сумасшедшие звуки. Так зародился эйсид хаус."

#: A.05-acid-bass.md:25
#, fuzzy
msgid ""
"Although getting your hands on an original TB-303 is not so easy you will be p"
"leased to know that you can turn your Raspberry Pi into one using the power of"
" Sonic Pi. Behold, fire up Sonic Pi and throw this code into an empty buffer a"
"nd hit Run:"
msgstr ""
"Хотя получить на руки оригинал TB-303 не так уж и просто, вам будет приятно уз"
"нать, что вы можете превратить ваш Raspberry Pi в один из них, используя мощь "
"Sonic Pi. Узрите свет Sonic Pi, забросив этот код в пустой буфер и нажав \"Выпо"
"лнить\":"

#: A.05-acid-bass.md:30
#, no-wrap
msgid ""
"use_synth :tb303\n"
"play :e1"
msgstr ""
"use_synth :tb303\n"
"play :e1"

#: A.05-acid-bass.md:35
#, fuzzy
msgid "Instant acid bass! Let's play around..."
msgstr "Мгновенный кислотный бас! Давайте с ним поиграем..."

#: A.05-acid-bass.md:37
#, fuzzy
msgid "Squelch that Bass"
msgstr "Изменяем Бас"

#: A.05-acid-bass.md:39
#, fuzzy
msgid ""
"First, let's build a live arpeggiator to make things fun. In the last tutorial"
" we looked at how riffs can just be a ring of notes that we tick through one a"
"fter another, repeating when we get to the end. Let's create a live loop that "
"does exactly that:"
msgstr ""
"Во-первых, построим живой арпеджиатор, чтобы играть было веселей. В прошлой ст"
"атье мы узнали, что риффы могут быть простыми кольцами нот, извлекающимися одн"
"а за другой. Давайте создадим живой цикл, который сделает для нас это:"

#: A.05-acid-bass.md:44
#, no-wrap
msgid ""
"use_synth :tb303\n"
"live_loop :squelch do\n"
"  n = (ring :e1, :e2, :e3).tick\n"
"  play n, release: 0.125, cutoff: 100, res: 0.8, wave: 0\n"
"  sleep 0.125\n"
"end"
msgstr ""
"use_synth :tb303\n"
"live_loop :squelch do\n"
"  n = (ring :e1, :e2, :e3).tick\n"
"  play n, release: 0.125, cutoff: 100, res: 0.8, wave: 0\n"
"  sleep 0.125\n"
"end"

#: A.05-acid-bass.md:53
#, fuzzy
msgid "Take a look at each line."
msgstr "Для начала рассмотрим код построчно:"

#: A.05-acid-bass.md:55
#, fuzzy
msgid ""
"On the first line we set the default synth to be `tb303` with the `use_synth` "
"fn."
msgstr ""
"В первой строке мы задаём синтезатор по умолчанию `tb303` с помощью функции `u"
"se_synth`."

#: A.05-acid-bass.md:58
#, fuzzy
msgid ""
"On line two we create a live loop called `:squelch` which will just loop round"
" and round."
msgstr ""
"Во второй строке мы создаем живой цикл `:squelch`, который будет просто повтор"
"яться снова и снова."

#: A.05-acid-bass.md:61
#, fuzzy
msgid ""
"Line three is where we create our riff - a ring of notes (E in octaves 1, 2, a"
"nd 3) which we simply tick through with `.tick`. We define `n` to represent th"
"e current note in the riff. The equals sign just means to assign the value on "
"the right to the name on the left. This will be different every time round the"
" loop. The first time round, `n` will be set to `:e1`. The second time round i"
"t will be `:e2`, followed by `:e3`, and then back to `:e1`, cycling round fore"
"ver."
msgstr ""
"Третья строка - та, где мы создаём наш рифф - кольцо нот (ми в октавах 1, 2 и "
"3), которые мы извлекаем по кругу с помощью `.tick`. Мы определяем `n` для пре"
"дставления текущей ноты в риффе. Знак равенства присваивает значение справа, и"
"мени, находящемуся слева. Это значение будет отличаться каждый круг цикла. Пер"
"вый круг `n` будет иметь значение `:е1`. Второй круг - `:е2`, затем `:е3`, пот"
"ом снова `:е1` и так круг за кругом."

#: A.05-acid-bass.md:70
#, fuzzy
msgid ""
"Line four is where we actually trigger our `:tb303` synth. We're passing a few"
" interesting opts here: `release:`, `cutoff:`, `res:` and `wave:` which we'll "
"discuss below."
msgstr ""
"Четвёртая строка - место, где мы включаем наш `:tb303`. У нас здесь есть неско"
"лько интересных параметров: `release:`, `cutoff:`, `res:` и `wave:`, которые м"
"ы обсудим чуть позже."

#: A.05-acid-bass.md:74
#, fuzzy
msgid ""
"Line five is our `sleep` - we're asking the live loop to loop round every `0.1"
"25`s or 8 times a second at the default BPM of 60."
msgstr ""
"В пятой строке появляется `sleep` - мы просим цикл замыкать круг каждые `0.125"
"` удара, или 8 раз в секунду с BPM по умолчанию 60."

#: A.05-acid-bass.md:77
#, fuzzy
msgid ""
"Line six is the `end` to the live loop. This just tells Sonic Pi where the end"
" of the live loop is."
msgstr ""
"Строка шесть - это `end` живого цикла. Мы просто говорим Sonic Pi, что здесь к"
"онец живого цикла."

#: A.05-acid-bass.md:80
#, fuzzy
msgid ""
"Whilst you're still figuring out what's going on, type in the code above and h"
"it the Run button. You should hear the `:tb303` kick into action. Now, this is"
" where the action is: let's start live coding."
msgstr ""
"В то время, как вы всё ещё пытаетесь понять, что здесь происходит, поместите э"
"тот код в пустой буфер, и нажмите кнопку \"Выполнить\". Вы должны услышать `:tb3"
"03` в действии. Теперь пора начинать лайвкодинг."

#: A.05-acid-bass.md:84
#, fuzzy
msgid ""
"Whilst the loop is still live, change the `cutoff:` opt to `110`. Now hit the "
"Run button again. You should hear the sound become a little harsher and more s"
"quelchy. Dial in `120` and hit run. Now `130`. Listen how higher cutoff values"
" make it sound more piercing and intense. Finally, drop it down to `80` when y"
"ou feel like a rest. Then repeat as many times as you want. Don't worry, I'll "
"still be here..."
msgstr ""
"В то время, как цикл исполняется, измените параметр `cutoff:` на `110`. Затем "
"нажмите кнопку \"Выполнить\" снова. Вы должны услышать, что звук стал немного жё"
"стче и более \"хлюпающим\". Наберите `120` и нажмите \"Выполнить\". Затем `130`. С"
"лушайте, как более высокие значения делают звук более пронзительным и интенсив"
"ным. Наконец, понизьте значение до `80`, если захотите отдохнуть. Затем повтор"
"ите это столько раз, сколько захотите. Не волнуйтесь, я всё ещё буду здесь..."

#: A.05-acid-bass.md:91
#, fuzzy
msgid ""
"Another opt worth playing with is `res:`. This controls the level of resonance"
" of the filter. A high resonance is characteristic of acid bass sounds. We cur"
"rently have our `res:` set to `0.8`. Try cranking it up to `0.85`, then `0.9`,"
" and finally `0.95`. You might find that a cutoff such as `110` or higher will"
" make the differences easier to hear. Finally go crazy and dial in `0.999` for"
" some insane sounds. At a `res` this high, you're hearing the cutoff filter re"
"sonate so much it starts to make sounds of its own!"
msgstr ""
"Ещё один параметр, с которым стоит поиграть, это `res:`. Он контролирует урове"
"нь резонанса фильтра. Для кислотных басовых партий характерен высокий резонанс"
". В настоящее время наш `res:` установлен в `0.8`. Попробуйте изменить его на "
"`0.85`, затем на `0.9`, и наконец, на `0.95`. Вы можете обнаружить, что предел"
"ьные значения `cutoff:`, такие как `110` или выше, помагают легче услышать раз"
"личия. Наконец, сойдите с ума и установите `0.999`, чтобы получить действитель"
"но безумный звук. С этим значением `res:` вы слышите так много резонанса, что "
"он начинает звучать сам по себе!"

#: A.05-acid-bass.md:100
#, fuzzy
msgid ""
"Finally, for a big impact on the timbre try changing the `wave:` opt to `1`. T"
"his is the choice of source oscillator. The default is `0` which is a sawtooth"
" wave. `1` is a pulse wave and `2` is a triangle wave."
msgstr ""
"Наконец, для резкого изменения тембра попробуйте изменить параметр `wawe:` на "
"`1`. Это выбор формы волны исходного генератора. Значение по умолчанию - `0` -"
" пилообразная волна, `1` - прямоугольная волна, и `2` - треугольная форма волн"
"ы."

#: A.05-acid-bass.md:104
#, fuzzy
msgid ""
"Of course, try different riffs by changing the notes in the ring or even picki"
"ng notes from scales or chords. Have fun with your first acid bass synth."
msgstr ""
"Конечно, пробуйте разные риффы, изменяя ноты в кольце, или же выбирая ноты из "
"гамм, или аккордов. Веселитесь с вашим первым кислотным басовым синтезатором."

#: A.05-acid-bass.md:108
#, fuzzy
msgid "Deconstructing the TB-303"
msgstr "Деконструирование TB-303"

#: A.05-acid-bass.md:110
#, fuzzy
msgid ""
"The design of the original TB-303 is actually pretty simple. As you can see fr"
"om the following diagram there's only 4 core parts."
msgstr ""
"Конструкция оригинальных TB-303 на самом деле довольно проста. Как вы можете в"
"идеть из следующей диаграммы, главных составляющих всего 4."

#: A.05-acid-bass.md:113
msgid "![TB-303 Design](../images/tutorial/articles/A.05-acid-bass/tb303-design.png)"
msgstr ""

#: A.05-acid-bass.md:115
#, fuzzy
msgid ""
"First is the oscillator wave - the raw ingredients of the sound. In this case "
"we have a square wave. Next there's the oscillator's amplitude envelope which "
"controls the amp of the square wave through time. These are accessed in Sonic "
"Pi by the `attack:`, `decay:`, `sustain:` and `release:` opts along with their"
" level counterparts. For more information read Section 2.4 'Duration with Enve"
"lopes' in the built-in tutorial. We then pass our enveloped square wave throug"
"h a resonant low pass filter. This chops off the higher frequencies as well as"
" having that nice resonance effect. Now this is where the fun starts. The cuto"
"ff value of this filter is also controlled by its own envelope! This means we "
"have amazing control over the timbre of the sound by playing with both of thes"
"e envelopes. Let's take a look:"
msgstr ""
"Первой является волновой герератор - сырая основа звука. В этом примере у нас "
"прямоугольная волна. Дальше идёт генератор амплитудной огибающей, который конт"
"ролирует амплитуду прямоугольной волны во времени. Он доступен в Sonic Pi в ви"
"де параметров `attack:`, `decay:`, `sustain:` и `release:`. Для получения боле"
"е подробной информации об этих параметрах читайте раздел 2.4 \"Длительность с п"
"омощью огибающих\" встроенного учебника. Затем, мы пропускаем наш амплитудно мо"
"дулированный сигнал через резонансный низкочастотный фильтр. Это срубает высок"
"очастотную составляющую, а также добавляет этот приятный резонансный эффект. Т"
"еперь начинается самое весёлое. Значение среза этого фильтра может управляться"
" своей собственной огибающей! Это значит, что мы имеем удивительный контроль н"
"ад тембром звука, играя двумя этими огибающими. Давайте приступим:"

#: A.05-acid-bass.md:128
#, no-wrap
msgid ""
"use_synth :tb303\n"
"with_fx :reverb, room: 1 do\n"
"  live_loop :space_scanner do\n"
"    play :e1, cutoff: 100, release: 7, attack: 1, cutoff_attack: 4, cutoff_rel"
"ease: 4\n"
"    sleep 8\n"
"  end\n"
"end"
msgstr ""
"use_synth :tb303\n"
"with_fx :reverb, room: 1 do\n"
"  live_loop :space_scanner do\n"
"    play :e1, cutoff: 100, release: 7, attack: 1, cutoff_attack: 4, cutoff_rel"
"ease: 4\n"
"    sleep 8\n"
"  end\n"
"end"

#: A.05-acid-bass.md:138
#, fuzzy
msgid ""
"For each standard envelope opt, there's a `cutoff_` equivalent opt in the `:tb"
"303` synth. So, to change the cutoff attack time we can use the `cutoff_attack"
":` opt. Copy the code above into an empty buffer and hit Run. You'll hear a cr"
"azy sound warble in and out. Now start to play. Try changing the `cutoff_attac"
"k:` time to `1` and then `0.5`. Now try `8`."
msgstr ""
"В синтезаторе `:tb303`, для каждого стандартного параметра огибающей есть `cut"
"off_` эквивалент. Так, для изменения времени атаки фильтра, мы можем использов"
"ать параметр `cutoff_attack:`. Скопируйте приведенный выше код в пустой буфер,"
" и нажмите \"Выполнить\". Вы услышите безумный плавающий звук. Теперь поиграем. "
"Попробуйте изменять время `cutoff_attack:` на `1`, а затем на `0.5`. Потом поп"
"робуйте `8`."

#: A.05-acid-bass.md:144
#, fuzzy
msgid ""
"Notice that I've passed everything through a `:reverb` FX for extra atmosphere"
" - try other FX to see what works!"
msgstr ""
"Заметьте, что я пропустил звук через `:reverb` эффект для создания дополнитель"
"ной атмосферы - попробуйте другие эффекты, чтобы посмотреть, как это работает!"

#: A.05-acid-bass.md:149
#, fuzzy
msgid ""
"Finally, here's a piece I composed using the ideas in this tutorial. Copy it i"
"nto an empty buffer, listen for a while and then start live coding your own ch"
"anges. See what crazy sounds you can make with it! See you next time..."
msgstr ""
"Наконец, ниже расположен фрагмент кода, который я сочинил, используя идеи этой"
" статьи. Скопируйте его в свой буфер, послушайте, а потом начните лайвкодинг, "
"внося свои собственные изменения. Посмотрим, какие безумные звуки вы сможете с"
"оздать с помощью этого! Увидимся в следующий раз..."

#: A.05-acid-bass.md:154
#, no-wrap
msgid ""
"use_synth :tb303\n"
"use_debug false\n"
" \n"
"with_fx :reverb, room: 0.8 do\n"
"  live_loop :space_scanner do\n"
"    with_fx :slicer, phase: 0.25, amp: 1.5 do\n"
"      co = (line 70, 130, steps: 8).tick\n"
"      play :e1, cutoff: co, release: 7, attack: 1, cutoff_attack: 4, cutoff_re"
"lease: 4\n"
"      sleep 8\n"
"    end\n"
"  end\n"
" \n"
"  live_loop :squelch do\n"
"    use_random_seed 3000\n"
"    16.times do\n"
"      n = (ring :e1, :e2, :e3).tick\n"
"      play n, release: 0.125, cutoff: rrand(70, 130), res: 0.9, wave: 1, amp: "
"0.8\n"
"      sleep 0.125\n"
"    end\n"
"  end\n"
"end"
msgstr ""
"use_synth :tb303\n"
"use_debug false\n"
" \n"
"with_fx :reverb, room: 0.8 do\n"
"  live_loop :space_scanner do\n"
"    with_fx :slicer, phase: 0.25, amp: 1.5 do\n"
"      co = (line 70, 130, steps: 8).tick\n"
"      play :e1, cutoff: co, release: 7, attack: 1, cutoff_attack: 4, cutoff_re"
"lease: 4\n"
"      sleep 8\n"
"    end\n"
"  end\n"
" \n"
"  live_loop :squelch do\n"
"    use_random_seed 3000\n"
"    16.times do\n"
"      n = (ring :e1, :e2, :e3).tick\n"
"      play n, release: 0.125, cutoff: rrand(70, 130), res: 0.9, wave: 1, amp: "
"0.8\n"
"      sleep 0.125\n"
"    end\n"
"  end\n"
"end"

#: A.06-minecraft.md:1
msgid "A.6 Musical Minecraft"
msgstr ""

#: A.06-minecraft.md:3
#, fuzzy
msgid "Musical Minecraft"
msgstr "Музыкальный Minecraft"

#: A.06-minecraft.md:7
#, fuzzy
msgid ""
"Hello and welcome back! In the previous tutorials we've focussed purely on the"
" music possibilities of Sonic Pi - (turning your Raspberry Pi into a performan"
"ce ready musical instrument). So far we've learned how to:"
msgstr ""
"Привет, и с возвращением! В предыдущих упражнениях мы сосредотачивались исключ"
"ительно на музыкальных возможностях Sonic Pi - (превращая ваш Raspberry Pi в г"
"отовый к выступлению музыкальный инструмент). К этому моменту мы научились:"

#: A.06-minecraft.md:11
#, fuzzy
msgid "Live Code - changing the sounds on-the-fly,"
msgstr "Кодировать в реальном времени,"

#: A.06-minecraft.md:12
#, fuzzy
msgid "Code some huge beats,"
msgstr "Создавать различные ритмы,"

#: A.06-minecraft.md:13
#, fuzzy
msgid "Generate powerful synth leads,"
msgstr "Генерировать мощные солирующие синты,"

#: A.06-minecraft.md:14
#, fuzzy
msgid "Re-create the famous TB-303 acid-bass sound."
msgstr "Воссоздавать знаменитые кислотные басы TB-303."

#: A.06-minecraft.md:16
#, fuzzy
msgid ""
"There's so much more to show you (which we will explore in future editions). H"
"owever, this month, let's look at something Sonic Pi can do that you probably "
"didn't realise: control Minecraft."
msgstr ""
"Однако, есть ещё множество аспектов создания музыки, которые нужно показать ва"
"м (что я и сделаю в будущем). Но в этом месяце мы рассмотрим особенность Sonic"
" Pi, о наличии которой вы, наверное, даже и не подозревали: управлять Minecraf"
"t."

#: A.06-minecraft.md:20
#, fuzzy
msgid "Hello Minecraft World"
msgstr "Привет, Мир Minecraft"

#: A.06-minecraft.md:22
#, fuzzy
msgid ""
"OK, let's get started. Boot up your Raspberry Pi, fire up Minecraft Pi and cre"
"ate a new world. Now start up Sonic Pi and re-size and move your windows so yo"
"u can see both Sonic Pi and Minecraft Pi at the same time."
msgstr ""
"ОК, давайте начнём. Подключите ваш Raspberry Pi, запустите Minecraft Pi и созд"
"айте новый мир. Теперь запустите Sonic Pi, измените размеры окон и разместите "
"их так, чтобы вы могли видеть одновременно и Minecraft Pi, и Sonic Pi."

#: A.06-minecraft.md:26
#, fuzzy
msgid "In a fresh buffer type the following:"
msgstr "В пустом буфере наберите следующее:"

#: A.06-minecraft.md:28
#, no-wrap
msgid "mc_message \"Hello Minecraft from Sonic Pi!\""
msgstr "mc_message \"Hello Minecraft from Sonic Pi!\""

#: A.06-minecraft.md:32
#, fuzzy
msgid ""
"Now, hit Run. Boom! Your message appeared in Minecraft! How easy was that? Now"
", stop reading this for a moment and play about with your own messages. Have f"
"un!"
msgstr ""
"Теперь, нажмите \"Выполнить\". Бум! Ваше сообщение появилось в Minecraft! Ну как"
", это было легко? Теперь, прекратите на мгновение чтение этой статьи и поиграй"
"те с вашими собственными сообщениями. Веселитесь!"

#: A.06-minecraft.md:36
msgid ""
"![Screen 0](../images/tutorial/articles/A.06-minecraft/Musical-Minecraft-0-sma"
"ll.png)"
msgstr ""

#: A.06-minecraft.md:38
#, fuzzy
msgid "Sonic Teleporter"
msgstr "Sonic Телепортатор"

#: A.06-minecraft.md:40
#, fuzzy
msgid ""
"Now let's do some exploring. The standard option is to reach for the mouse and"
" keyboard and start walking around. That works, but it's pretty slow and borin"
"g. It would be far better if we had some sort of teleport machine. Well, thank"
"s to Sonic Pi, we have one. Try this:"
msgstr ""
"Теперь давайте исследовать мир Minecraft. Стандартный вариант - дотянуться до "
"мыши и клавиатуры и начать перемещаться в мире Minecraft. Это работает, но это"
" довольно медленно и скучно. Было бы гораздо интереснее, если бы у нас было чт"
"о-то вроде телепортатора. Благодаря Sonic Pi, мы имеем один. Попробуйте это:"

#: A.06-minecraft.md:45
#, no-wrap
msgid "mc_teleport 80, 40, 100"
msgstr "mc_teleport 80, 40, 100"

#: A.06-minecraft.md:49
#, fuzzy
msgid ""
"Crikey! That was a long way up. If you weren't in flying-mode then you would h"
"ave fallen back down all the way to the ground. If you double-tap space to ent"
"er flying-mode and teleport again, you'll stay hovering at the location you za"
"p to."
msgstr ""
"Боже мой! Это был долгий путь вверх. Если вы не находились в режиме полёта, то"
" должны были упасть обратно на землю. Если вы дважды нажмёте пробел для входа "
"в режим полёта и телепортируетесь снова, вы останетесь висеть на том месте, ку"
"да вы в телепортировались."

#: A.06-minecraft.md:54
#, fuzzy
msgid ""
"Now, what do those numbers mean? We have three numbers which describe the coor"
"dinates of where in the world we want to go. We give each number a name - x, y"
" and z:"
msgstr ""
"Итак, что же означают эти цифры? У нас есть три числа, которые описывают коорд"
"инаты места, куда мы хотим переместиться. Мы даём каждой цифре имя - х, y и z:"

#: A.06-minecraft.md:58
#, fuzzy
msgid "x - how far left and right (80 in our example)"
msgstr "x - как далеко от левого края (в нашем примере - 80)"

#: A.06-minecraft.md:59
#, fuzzy
msgid "y - how high we want to be (40 in our example)"
msgstr "y - как высоко (в нашем примере - 40)"

#: A.06-minecraft.md:60
#, fuzzy
msgid "z - how far forward and back (100 in our example)"
msgstr "z - как далеко вглубь мира (в нашем примере - 100)"

#: A.06-minecraft.md:62
#, fuzzy
msgid ""
"By choosing different values for x, y and z we can teleport *anywhere* in our "
"world. Try it! Choose different numbers and see where you can end up. If the s"
"creen goes black it's because you've teleported yourself under the ground or i"
"nto a mountain. Just choose a higher y value to get back out above land. Keep "
"on exploring until you find somewhere you like..."
msgstr ""
"Выбирая различные значения для x, y и z, мы можем телепортироваться *куда угод"
"но*. Попробуйте! Выбирайте различные цифры и смотрите, где вы окажетесь. Если "
"экран стал чёрным, это произошло потому, что вы телепортировали себя под землю"
" или внутрь скалы. Просто выбирите значение `y` выше, чтобы оказаться снова на"
"д землёй. Продолжайте исследования, пока не найдёте место, которое вам понрави"
"тся..."

#: A.06-minecraft.md:69
#, fuzzy
msgid ""
"Using the ideas so far, let's build a Sonic Teleporter which makes a fun telep"
"ort sound whilst it whizzes us across the Minecraft world:"
msgstr ""
"Используя эти идеи, построим телепортатор, который издаёт весёлый звук телепор"
"тации, пока переносит нас сквозь мир Minecraft:"

#: A.06-minecraft.md:72
#, no-wrap
msgid ""
"mc_message \"Preparing to teleport....\"\n"
"sample :ambi_lunar_land, rate: -1\n"
"sleep 1\n"
"mc_message \"3\"\n"
"sleep 1\n"
"mc_message \"2\"\n"
"sleep 1\n"
"mc_message \"1\"\n"
"sleep 1\n"
"mc_teleport 90, 20, 10\n"
"mc_message \"Whoooosh!\""
msgstr ""
"mc_message \"Preparing to teleport....\"\n"
"sample :ambi_lunar_land, rate: -1\n"
"sleep 1\n"
"mc_message \"3\"\n"
"sleep 1\n"
"mc_message \"2\"\n"
"sleep 1\n"
"mc_message \"1\"\n"
"sleep 1\n"
"mc_teleport 90, 20, 10\n"
"mc_message \"Whoooosh!\""

#: A.06-minecraft.md:86
msgid ""
"![Screen 1](../images/tutorial/articles/A.06-minecraft/Musical-Minecraft-1-sma"
"ll.png)"
msgstr ""

#: A.06-minecraft.md:88
#, fuzzy
msgid "Magic Blocks"
msgstr "Магические Блоки"

#: A.06-minecraft.md:90
#, fuzzy
msgid ""
"Now you've found a nice spot, let's start building. You could do what you're u"
"sed to and start clicking the mouse furiously to place blocks under the cursor"
". Or you could use the magic of Sonic Pi. Try this:"
msgstr ""
"Сейчас, когда вы нашли хорошее место, начнём строительство. Вы могли бы делать"
" то, к чему привыкли, и начать яростно кликать мышкой, распологая блоки под ку"
"рсором. Или вы могли бы использовать магию Sonic Pi. Попробуйте это:"

#: A.06-minecraft.md:94
#, no-wrap
msgid ""
"x, y, z = mc_location\n"
"mc_set_block :melon, x, y + 5, z"
msgstr ""
"x, y, z = mc_location\n"
"mc_set_block :melon, x, y + 5, z"

#: A.06-minecraft.md:99
#, fuzzy
msgid ""
"Now look up! There's a melon in the sky! Take a moment to look at the code. Wh"
"at did we do? On line one we grabbed the current location of Steve as the vari"
"ables x, y and z. These correspond to our coordinates described above. We use "
"these coordinates in the fn `mc_set_block` which will place the block of your "
"choosing at the specified coordinates. In order to make something higher up in"
" the sky we just need to increase the y value which is why we add 5 to it. Let"
"'s make a long trail of them:"
msgstr ""
"Теперь посмотри вверх! В небе дынный блок! Найдите минутку, чтобы посмотреть н"
"а код. Что он делает? На первой строке мы определили текущее местоположение ка"
"к переменные x, y и z. Они соответствуют нашим координатам, описанным выше. Мы"
" использовали эти координаты в функции `mc_set_block`, которая поместила блок,"
" который мы выбрали, по указанным координатам. Чтобы указать сделать что-то вы"
"ше в небе, нам просто нужно увеличить значение `y`, вот почему мы добавляем 5 "
"к нему. Сделаем длинный след из этих блоков:"

#: A.06-minecraft.md:107
#, no-wrap
msgid ""
"live_loop :melon_trail do\n"
"  x, y, z = mc_location\n"
"  mc_set_block :melon, x, y-1, z\n"
"  sleep 0.125\n"
"end"
msgstr ""
"live_loop :melon_trail do\n"
"  x, y, z = mc_location\n"
"  mc_set_block :melon, x, y-1, z\n"
"  sleep 0.125\n"
"end"

#: A.06-minecraft.md:115
#, fuzzy
msgid ""
"Now, jump over to Minecraft, make sure you're in flying-mode (double tap space"
" if not) and fly all around the world. Look behind you to see a pretty trail o"
"f melon blocks! See what kind of twisty patterns you can make in the sky."
msgstr ""
"Теперь переключитесь на Minecraft, убедитесь что вы находитесь в режиме полёта"
" (двойное нажатие на пробел, если нет) и летайте по всему миру. Обернитесь, чт"
"обы увидеть длинный след дынных блоков! Посмотрите, какие извилистые структуры"
" вы можете сделать в небе."

#: A.06-minecraft.md:120
#, fuzzy
msgid "Live Coding Minecraft"
msgstr "Лайвкодинг Minecraft"

#: A.06-minecraft.md:122
#, fuzzy
msgid ""
"Those of you that have been following this tutorial over the last few months w"
"ill probably have your minds blown at this point. The trail of melons is prett"
"y cool, but the most exciting part of the previous example is that you can use"
" `live_loop` with Minecraft! For those that don't know, `live_loop` is Sonic P"
"i's special magic ability that no other programming language has. It lets you "
"run multiple loops at the same time and allows you to change them whilst they "
"run. They are incredibly powerful and amazing fun. I use `live_loop`s to perfo"
"rm music in nightclubs with Sonic Pi - DJs use discs and I use `live_loop`s :-"
") However, today we're going to live code both music and Minecraft."
msgstr ""
"Тем из вас, кто следит за этими статьями в течение последних нескольких месяце"
"в, наверное снесёт крышу к этому моменту. След дынных блоков это очень здорово"
", но самая захватывающая часть предыдущего пример заключается в том, что вы мо"
"жете использовать `live_loop` с Minecraft! Для тех, кто не знает, цикл `live_l"
"oop` в Sonic Pi - особая магическая способность, которой нет других языках про"
"граммирования. Он позволяет запускать несколько циклов в одно и то же время и "
"изменять их, пока они выполняются. Они невероятно мощные и удивительно весёлые"
". Я использую `live_loop`, чтобы исполнять музыку в ночных клубах с Sonic Pi -"
" диджеи используют диски, а я циклы `live_loop`:-) Тем не менее, сегодня мы со"
"бираемся кодировать в реальном времени и музыку, и Minecraft."

#: A.06-minecraft.md:133
#, fuzzy
msgid ""
"Let's get started. Run the code above and start making your melon trail again."
" Now, without stopping the code, just simply change `:melon` to `:brick` and h"
"it run. Hey presto, you're now making a brick trail. How simple was that! Fanc"
"y some music to go with it? Easy. Try this:"
msgstr ""
"Давайте начнём. Запустите приведенный выше код и начните делать свой дынный сл"
"ед снова. Теперь, не останавливая код, просто измените `:melon` на `:brick` и "
"нажмите \"Выполнить\". Вуаля, вы теперь делаете кирпичную дорогу. Это было прост"
"о! Добавим немного музыки в это? Легко. Попробуйте это:"

#: A.06-minecraft.md:138
#, no-wrap
#, fuzzy
msgid ""
"live_loop :bass_trail do\n"
"  tick\n"
"  x, y, z = mc_location\n"
"  b = (ring :melon, :brick, :glass).look\n"
"  mc_set_block b, x, y -1, z\n"
"  note = (ring :e1, :e2, :e3).look\n"
"  use_synth :tb303\n"
"  play note, release: 0.1, cutoff: 70\n"
"  sleep 0.125\n"
"end"
msgstr ""
"live_loop :bass_trail\n"
"  tick\n"
"  x, y, z = mc_location\n"
"  b = (ring :melon, :brick, :glass).look\n"
"  mc_set_block b, x, y -1, z\n"
"  note = (ring :e1, :e2, :e3).look\n"
"  use_synth :tb303\n"
"  play note, release: 0.1, cutoff: 70\n"
"  sleep 0.125\n"
"end"

#: A.06-minecraft.md:151
#, fuzzy
msgid ""
"Now, whilst that's playing start changing the code. Change the block types - t"
"ry `:water`, `:grass` or your favourite block type. Also, try changing the cut"
"off value from `70` to `80` and then up to `100`. Isn't this fun?"
msgstr ""
"Теперь, пока это играет, начнём вносить изменения в наш код. Измените тип блок"
"а. Попробуйте `:water`, `:grass` или другой ваш любимый тип блока. Также, попр"
"обуйте изменть значение отсечки фильтра с `70` до `80` и затем до `100`. Разве"
" это не весело?"

#: A.06-minecraft.md:158
msgid ""
"![Screen 2](../images/tutorial/articles/A.06-minecraft/Musical-Minecraft-2-sma"
"ll.png)"
msgstr ""

#: A.06-minecraft.md:160
#, fuzzy
msgid ""
"Let's combine everything we've seen so far with a little extra magic. Let's co"
"mbine our teleportation ability with block placing and music to make a Minecra"
"ft Music Video. Don't worry if you don't understand it all, just type it in an"
"d have a play by changing some of the values whilst it's running live. Have fu"
"n and see you next time..."
msgstr ""
"Давайте объединим всё, что мы видели до сих пор, с небольшой дополнительной ма"
"гией. Совместим наши способности к телепортации с размещением блоков и музыкой"
", сделав музыкальное видео Minecraft. Не волнуйтесь, если вы не всё здесь пони"
"маете, просто введите код в буфер и играйте, изменяя значения, пока код выполн"
"яется. Повеселитесь и увидимся в следующий раз..."

#: A.06-minecraft.md:166
#, no-wrap
msgid ""
"live_loop :note_blocks do\n"
"  mc_message \"This is Sonic Minecraft\"\n"
"  with_fx :reverb do\n"
"    with_fx :echo, phase: 0.125, reps: 32 do\n"
"      tick\n"
"      x = (range 30, 90, step: 0.1).look\n"
"      y = 20\n"
"      z = -10\n"
"      mc_teleport x, y, z\n"
"      ns = (scale :e3, :minor_pentatonic)\n"
"      n = ns.shuffle.choose\n"
"      bs = (knit :glass, 3, :sand, 1)\n"
"      b = bs.look\n"
"      synth :beep, note: n, release: 0.1\n"
"      mc_set_block b, x+20, n-60+y, z+10\n"
"      mc_set_block b, x+20, n-60+y, z-10\n"
"      sleep 0.25\n"
"    end\n"
"  end\n"
"end\n"
"live_loop :beats do\n"
"  sample :bd_haus, cutoff: 100\n"
"  sleep 0.5\n"
"end"
msgstr ""
"live_loop :note_blocks do\n"
"  mc_message \"This is Sonic Minecraft\"\n"
"  with_fx :reverb do\n"
"    with_fx :echo, phase: 0.125, reps: 32 do\n"
"      tick\n"
"      x = (range 30, 90, step: 0.1).look\n"
"      y = 20\n"
"      z = -10\n"
"      mc_teleport x, y, z\n"
"      ns = (scale :e3, :minor_pentatonic)\n"
"      n = ns.shuffle.choose\n"
"      bs = (knit :glass, 3, :sand, 1)\n"
"      b = bs.look\n"
"      synth :beep, note: n, release: 0.1\n"
"      mc_set_block b, x+20, n-60+y, z+10\n"
"      mc_set_block b, x+20, n-60+y, z-10\n"
"      sleep 0.25\n"
"    end\n"
"  end\n"
"end\n"
"live_loop :beats do\n"
"  sample :bd_haus, cutoff: 100\n"
"  sleep 0.5\n"
"end"

#: A.07-bizet.md:1
msgid "A.7 Bizet Beats"
msgstr ""

#: A.07-bizet.md:3
#, fuzzy
msgid "Bizet Beats"
msgstr "Ритмы Бизе"

#: A.07-bizet.md:5
#, fuzzy
msgid ""
"After our brief excursion to the fantastic world of coding Minecraft with Soni"
"c Pi last month, let's get musical again. Today we're going to bring a classic"
"al operatic dance piece straight into the 21st century using the awesome power"
" of code."
msgstr ""
"После нашего краткого экскурса в сказочный мир кодинга Minecraft в прошлом мес"
"яце, давайте снова помузицируем. Сегодня мы собираемся перенести классический "
"оперный танцевальный ритм в 21-й век, используя грандиозную силу кода."

#: A.07-bizet.md:10
#, fuzzy
msgid "Outrageous and Disruptive"
msgstr "Возмутительно И Дерзко"

#: A.07-bizet.md:12
#, fuzzy
msgid ""
"Let's jump into a time machine back to the year 1875. A composer called Bizet "
"had just finished his latest opera Carmen. Unfortunately like many exciting an"
"d disruptive new pieces of music people initially didn't like it at all becaus"
"e it was too outrageous and different. Sadly Bizet died ten years before the o"
"pera gained huge international success and became one of the most famous and f"
"requently performed operas of all time. In sympathy with this tragedy let's ta"
"ke one of the main themes from Carmen and convert it to a modern format of mus"
"ic that is also too outrageous and different for most people in our time - liv"
"e coded music!"
msgstr ""
"Переместимся на машине времени в 1875 год. Композитор Бизе как раз закончил св"
"ою последнюю оперу \"Кармен\". К сожалению, как и множество других прогрессивных"
", ломающих стереотипы музыкальных произведений, публика поначалу её не приняла"
", ведь она была слишком дерзкой и непохожей на другие оперы того времени. Печа"
"льно, но Бизе умер за десять лет до того, как эта опера заработала ошеломляющи"
"й международный успех и стала одной из самых известных и часто исполняемых опе"
"р всех времён. Из сочувствия к этой трагедии, возьмем одну из главных тем опер"
"ы \"Кармен\", и преобразуем её в современный формат музыки, который также слишко"
"м возмутителен и чужд большинству людей нашего времени - кодированную музыку!"

#: A.07-bizet.md:23
#, fuzzy
msgid "Decoding the Habanera"
msgstr "Расшифровка Хабанеры"

#: A.07-bizet.md:25
#, fuzzy
msgid ""
"Trying to live code the whole opera would be a bit of a challenge for this tut"
"orial, so let's focus on one of the most famous parts - the bass line to the H"
"abanera:"
msgstr ""
"Пытаться кодировать всю оперу было бы сложноватой задачей для одной статьи, та"
"к что давайте сосредоточимся на одной из самых известных её частей - басовой п"
"артии Хабанеры:"

#: A.07-bizet.md:29
msgid "![Habanera Riff](../images/tutorial/articles/A.07-bizet/habanera.png)"
msgstr ""

#: A.07-bizet.md:31
#, fuzzy
msgid ""
"This may look extremely unreadable to you if you haven't yet studied music not"
"ation. However, as programmers we see music notation as just another form of c"
"ode - only it represents instructions to a musician instead of a computer. We "
"therefore need to figure out a way of decoding it."
msgstr ""
"Если вы ещё не изучали нотной записи, это будет выглядеть крайне непонятным дл"
"я вас. Однако, как программисты, мы видим нотную запись просто как другую форм"
"у кода, содержащего инструкции не для компьютера, а для музыканта. Поэтому нам"
" нужно найти способ декодировать его."

#: A.07-bizet.md:36
#, fuzzy
msgid "Notes"
msgstr "Ноты"

#: A.07-bizet.md:38
#, fuzzy
msgid ""
"The notes are arranged from left to right like the words in this magazine but "
"also have different heights. *The height on the score represents the pitch of "
"the note.* The higher the note on the score, the higher the pitch of the note."
msgstr ""
"Ноты упорядочиваются слева направо, как слова в этой статьи, но имеют разную в"
"ысоту. *Высота относительно нотной партитуры обозначает высоту тона.* Чем выше"
" нота находится в партитуре, тем выше высоты тона."

#: A.07-bizet.md:43
#, fuzzy
msgid ""
"In Sonic Pi we already know how to change the pitch of a note - we either use "
"high or low numbers such as `play 75` and `play 80` or we use the note names: "
"`play :E` and `play :F`. Luckily each of the vertical positions of the musical"
" score represents a specific note name. Take a look at this handy look up tabl"
"e:"
msgstr ""
"Мы уже знаем, как изменить высоту ноты в Sonic Pi - либо используя цифры, таки"
"е как `play 75` и `play 80`, либо используя названия нот: `play :Е` и `play :F"
"`. К счастью, каждой вертикальной позиции музыкальной партитуры соответствует "
"определенная нота. Взгляните на эту удобную таблицу:"

#: A.07-bizet.md:49
msgid "![Notes](../images/tutorial/articles/A.07-bizet/notes.png)"
msgstr ""

#: A.07-bizet.md:51
#, fuzzy
msgid "Rests"
msgstr "Паузы"

#: A.07-bizet.md:53
#, fuzzy
msgid ""
"Music scores are an extremely rich and expressive kind of code capable of comm"
"unicating many things. It therefore shouldn't come as much of a surprise that "
"musical scores can not only tell you what notes to play but also when *not* to"
" play notes. In programming this is pretty much equivalent to the idea of `nil"
"` or `null` - the absence of a value. In other words not playing a note is lik"
"e the absence of a note."
msgstr ""
"Ноты представляют собой чрезвычайно богатый и выразительный вид кода, способно"
"го объединить сразу множество вещей. Поэтому дя вас не должно стать большим уд"
"ивлением, что партитура может не только сказать вам, какие ноты играть, но так"
"же когда ноты играть *не* нужно . В программировании это эквивалентно `nil` ил"
"и `null` - отсутствию значения. Другими словами, пауза - это отсутствие ноты."

#: A.07-bizet.md:60
#, fuzzy
msgid ""
"If you look closely at the score you'll see that it's actually a combination o"
"f black dots with lines which represent notes to play and squiggly things whic"
"h represent the rests. Luckily Sonic Pi has a very handy representation for a "
"rest: `:r`, so if we run: `play :r` it actually plays silence! We could also w"
"rite `play :rest`, `play nil` or `play false` which are all equivalent ways of"
" representing rests."
msgstr ""
"Если вы внимательно посмотрите на партитуру, вы увидите, что это на самом деле"
" сочетание горизонтальных линий с черными точками, которые представляют собой "
"ноты, коротые нужно играть, и волнистых штук, которые представляют собой паузы"
". К счастью, Sonic Pi имеет очень удобное представление для пауз: `:r`, так, е"
"сли мы выполним: `play :r`, он на самом деле сыграет тишину! Мы могли бы также"
" написать `play :rest`, `play nil` или `play false` - это всё эквивалентные сп"
"особы представления пауз."

#: A.07-bizet.md:67
#, fuzzy
msgid "Rhythm"
msgstr "Ритм"

#: A.07-bizet.md:69
#, fuzzy
msgid ""
"Finally, there's one last thing to learn how to decode in the notation - the t"
"imings of the notes. In the original notation you'll see that the notes are co"
"nnected with thick lines called beams. The second note has two of these beams "
"which means it lasts for a 16th of a beat. The other notes have a single beam "
"which means they last for an 8th of a beat. The rest has two squiggly beams wh"
"ich means it also represents a 16th of the beat."
msgstr ""
"Наконец, нужно узнать ещё одну вещь - как расшифровывать в партитуре длительно"
"сти нот. В оригинальной партитуре мы видим, что ноты связаны толстыми линиями,"
" называемыми рёбрами. Вторая нота имеет два таких ребра, что означает, что она"
" длится 16-ю часть такта. Другие ноты имеют одно ребро, которое означает, что "
"они дляться 8-ю часть такта. Паузы имеют два волнистых флажка, которые означаю"
"т, что они также длятся 16-ю часть такта."

#: A.07-bizet.md:77
#, fuzzy
msgid ""
"When we attempt to decode and explore new things a very handy trick is to make"
" everything as similar as possible to try and see any relationships or pattern"
"s. For example, when we re-write our notation purely in 16ths you can see that"
" our notation just turns into a nice sequence of notes and rests."
msgstr ""
"Когда мы пытаемся расшифровать и изучить новые вещи, очень удобный приём - сде"
"лать всё как можно более однородным, чтобы увидеть соотношения и структуры. На"
"пример, если мы перепишем нашу партитуру одними только 16-ми длительностями, в"
"ы сможете увидеть, что она превращается в простую последовательность нот и пау"
"з."

#: A.07-bizet.md:83
msgid "![Habanera Riff 2](../images/tutorial/articles/A.07-bizet/habanera2.png)"
msgstr ""

#: A.07-bizet.md:85
#, fuzzy
msgid "Re-coding the Habanera"
msgstr "Повторное кодирование Хабанеры"

#: A.07-bizet.md:87
#, fuzzy
msgid ""
"We're now in a position to start translating this bass line to Sonic Pi. Let's"
" encode these notes and rests in a ring:"
msgstr ""
"Теперь мы в состоянии начать переводить эту басовую партию для Sonic Pi. Давай"
"те закодируем эти ноты и паузы в кольцо:"

#: A.07-bizet.md:90
#, no-wrap
msgid "(ring :d, :r, :r, :a, :f5, :r, :a, :r)"
msgstr "(ring :d, :r, :r, :a, :f5, :r, :a, :r)"

#: A.07-bizet.md:94
#, fuzzy
msgid "Let's see what this sounds like. Throw it in a live loop and tick through it:"
msgstr ""
"Теперь посмотрим, как это звучит. Закиньте это кольцо в живой цикл, чтобы можн"
"о было последовательно извлекать элементы кольца:"

#: A.07-bizet.md:97
#, no-wrap
msgid ""
"live_loop :habanera do\n"
"  play (ring :d, :r, :r, :a, :f5, :r, :a, :r).tick\n"
"  sleep 0.25\n"
"end"
msgstr ""
"live_loop :habanera do\n"
"  play (ring :d, :r, :r, :a, :f5, :r, :a, :r).tick\n"
"  sleep 0.25\n"
"end"

#: A.07-bizet.md:104
#, fuzzy
msgid ""
"Fabulous, that instantly recognisable riff springs to life through your speake"
"rs. It took a lot of effort to get here, but it was worth it - high five!"
msgstr ""
"Легендарный, мгновенно узнаваемый рифф возвращается к жизни сквозь ваши колонк"
"и. Потребовалось немало усилий, чтобы добраться сюда, но это того стоило!"

#: A.07-bizet.md:108
#, fuzzy
msgid "Moody Synths"
msgstr "Мрачные Синты"

#: A.07-bizet.md:110
#, fuzzy
msgid ""
"Now we have the bass line, let's re-create some of the ambience of the operati"
"c scene. One synth to try out is `:blade` which is a moody 80s style synth lea"
"d. Let's try it with the starting note `:d` passed through a slicer and reverb"
":"
msgstr ""
"Теперь у нас есть басовая партия. Давайте воссоздадим атмосферу оперной сцены."
" Попробуем осуществить это с `:blade`, мрачным солирующим синтом в стиле 80-х."
" Давайте испробуем его, извлекая ноту `:d`, пропущенную через эффекты нарезки "
"и реверберации:"

#: A.07-bizet.md:115
#, no-wrap
msgid ""
"live_loop :habanera do\n"
"  use_synth :fm\n"
"  use_transpose -12\n"
"  play (ring :d, :r, :r, :a, :f5, :r, :a, :r).tick\n"
"  sleep 0.25\n"
"end\n"
"with_fx :reverb do\n"
"  live_loop :space_light do\n"
"    with_fx :slicer, phase: 0.25 do\n"
"      synth :blade, note: :d, release: 8, cutoff: 100, amp: 2\n"
"    end\n"
"    sleep 8\n"
"  end\n"
"end"
msgstr ""
"live_loop :habanera do\n"
"  use_synth :fm\n"
"  use_transpose -12\n"
"  play (ring :d, :r, :r, :a, :f5, :r, :a, :r).tick\n"
"  sleep 0.25\n"
"end\n"
"with_fx :reverb do\n"
"  live_loop :space_light do\n"
"    with_fx :slicer, phase: 0.25 do\n"
"      synth :blade, note: :d, release: 8, cutoff: 100, amp: 2\n"
"    end\n"
"    sleep 8\n"
"  end\n"
"end"

#: A.07-bizet.md:133
#, fuzzy
msgid ""
"Now, try the other notes in the bass line: `:a` and `:f5`. Remember, you don't"
" need to hit stop, just modify the code whilst the music is playing and hit ru"
"n again. Also, try different values for the slicer's `phase:` opt such as `0.5"
"`, `0.75` and `1`."
msgstr ""
"Теперь, попробуйте подставить туда другие ноты басовой партии:`:a` и `:f5`. По"
"мните, вам не надо нажимать кнопку \"Остановить\", просто измените код в то врем"
"я, как музыка играет, и нажмите \"Выполнить\" снова. Также, попробуйте разные зн"
"ачения параметра `phase:` нарезки, такие как `0.5`, `0.75` и `1`."

#: A.07-bizet.md:140
#, fuzzy
msgid ""
"Finally, let's combine all the ideas so far into a new remix of the Habanera. "
"You might notice that I've included another part of the bass line as a comment"
". Once you've typed it all into a fresh buffer hit Run to hear the composition"
". Now, without hitting stop, *uncomment* the second line by removing the `#` a"
"nd hit run again - how marvellous is that! Now, start mashing it around yourse"
"lf and have fun."
msgstr ""
"Наконец, давайте объединим все идеи этой статьи в новый ремикс Хабанеры. Вы мо"
"жете заметить, что я включил ещё одну часть басовой партии как комментарий. Ка"
"к только вы набрали всё это в буфере, нажмите \"Выполнить\", чтобы прослушать ко"
"мпозицию. Затем, не нажимая кнопку \"Остановить\", *раскомментируйте* вторую стр"
"оку, удалив знак `#`, и нажмите \"Выполнить\" снова - как это удивительно! Итак,"
" начинайте лайвкодинг и веселитесь!"

#: A.07-bizet.md:147
#, no-wrap
msgid ""
"use_debug false\n"
"bizet_bass = (ring :d, :r, :r, :a, :f5, :r, :a, :r)\n"
"#bizet_bass = (ring :d, :r, :r, :Bb, :g5, :r, :Bb, :r)\n"
" \n"
"with_fx :reverb, room: 1, mix: 0.3 do\n"
"  live_loop :bizet do\n"
"    with_fx :slicer, phase: 0.125 do\n"
"      synth :blade, note: :d4, release: 8,\n"
"        cutoff: 100, amp: 1.5\n"
"    end\n"
"    16.times do\n"
"      tick\n"
"      play bizet_bass.look, release: 0.1\n"
"      play bizet_bass.look - 12, release: 0.3\n"
"      sleep 0.125\n"
"    end\n"
"  end\n"
"end\n"
" \n"
"live_loop :ind do\n"
"  sample :loop_industrial, beat_stretch: 1,\n"
"    cutoff: 100, rate: 1\n"
"  sleep 1\n"
"end\n"
" \n"
"live_loop :drums do\n"
"  sample :bd_haus, cutoff: 110\n"
"  synth :beep, note: 49, attack: 0,\n"
"    release: 0.1\n"
"  sleep 0.5\n"
"end"
msgstr ""
"use_debug false\n"
"bizet_bass = (ring :d, :r, :r, :a, :f5, :r, :a, :r)\n"
"#bizet_bass = (ring :d, :r, :r, :Bb, :g5, :r, :Bb, :r)\n"
" \n"
"with_fx :reverb, room: 1, mix: 0.3 do\n"
"  live_loop :bizet do\n"
"    with_fx :slicer, phase: 0.125 do\n"
"      synth :blade, note: :d4, release: 8,\n"
"        cutoff: 100, amp: 1.5\n"
"    end\n"
"    16.times do\n"
"      tick\n"
"      play bizet_bass.look, release: 0.1\n"
"      play bizet_bass.look - 12, release: 0.3\n"
"      sleep 0.125\n"
"    end\n"
"  end\n"
"end\n"
" \n"
"live_loop :ind do\n"
"  sample :loop_industrial, beat_stretch: 1,\n"
"    cutoff: 100, rate: 1\n"
"  sleep 1\n"
"end\n"
" \n"
"live_loop :drums do\n"
"  sample :bd_haus, cutoff: 110\n"
"  synth :beep, note: 49, attack: 0,\n"
"    release: 0.1\n"
"  sleep 0.5\n"
"end"

#: A.08-minecraft-vj.md:1
msgid "A.8 Become a Minecraft VJ"
msgstr ""

#: A.08-minecraft-vj.md:3
#, fuzzy
msgid "Become a Minecraft VJ"
msgstr "Становимся Minecraft Виджеями"

#: A.08-minecraft-vj.md:5
msgid ""
"![Screen 0](../images/tutorial/articles/A.08-minecraft-vj/minecraft-vj-0-small"
".png)"
msgstr ""

#: A.08-minecraft-vj.md:7
#, fuzzy
msgid ""
"Everyone has played Minecraft. You will all have built amazing structures, des"
"igned cunning traps and even created elaborate cart lines controlled by redsto"
"ne switches. How many of you have performed with Minecraft? We bet you didn't "
"know that you could use Minecraft to create amazing visuals just like a profes"
"sional VJ."
msgstr ""
"Все вы играли в Minecraft. Все строили удивительные сооружения, конструировали"
" хитрые ловушки и даже создавали контролируемые транспортные линии. Но, держу "
"пари, вы не догадывались, что могли бы использовать Minecraft для создания уди"
"вительных визуальных эффектов как профессиональный виджей."

#: A.08-minecraft-vj.md:13
#, fuzzy
msgid ""
"If your only way of modifying Minecraft was with the mouse, you'd have a tough"
" time changing things fast enough. Luckily for you your Raspberry Pi comes wit"
"h a version of Minecraft that can be controlled with code. It also comes with "
"an app called Sonic Pi which makes coding Minecraft not only easy but also inc"
"redibly fun."
msgstr ""
"Если вашим единственным способом игры с Minecraft была модификация игрового ми"
"ра с помощью мышки, вам наверняка было бы трудно изменять его достаточно быстр"
"о. К счастью, ваш Raspberry Pi поставляется с версией Minecraft, управляемой с"
" помощью кода. Он также содержит приложение Sonic Pi, которое делает кодирован"
"ие Minecraft не только лёгким, но и невероятно весёлым."

#: A.08-minecraft-vj.md:19
#, fuzzy
msgid ""
"In today's article we'll be showing you some of the tips and tricks that we've"
" used to create performances in night clubs and music venues around the world."
msgstr ""
"В этой статье я покажу вам некоторые советы и трюки, использующиеся в выступле"
"ниях в ночных клубах и концертных площадках по всему миру."

#: A.08-minecraft-vj.md:23
#, fuzzy
msgid "Let's get started..."
msgstr "Итак, начнём..."

#: A.08-minecraft-vj.md:25
#, fuzzy
msgid "Getting Started"
msgstr "Приступая К Работе"

#: A.08-minecraft-vj.md:27
#, fuzzy
msgid ""
"Let's start with a simple warm up exercise to refresh ourselves with the basic"
"s. First up, crack open your Raspberry Pi and then fire up both Minecraft and "
"Sonic Pi. In Minecraft, create a new world, and in Sonic Pi choose a fresh buf"
"fer and write in this code:"
msgstr ""
"Давайте начнём с простого разминочного упражнения, дабы освежить в памяти осно"
"вы. Во-первых, подключите ваш Raspberry Pi и запустите Sonic Pi вместе с Minec"
"raft. В Minecraft создайте новый мир, а в Sonic Pi выберите пустой буфер и наб"
"ерите там этот код:"

#: A.08-minecraft-vj.md:32
#, no-wrap
msgid "mc_message \"Let's get started...\""
msgstr "mc_message \"Let's get started...\""

#: A.08-minecraft-vj.md:36
#, fuzzy
msgid ""
"Hit the Run button and you'll see the message over in the Minecraft window. OK"
", we're ready to start, let's have some fun......"
msgstr ""
"Нажмите кнопку \"Выполнить\", и вы увидите сообщение в окне Minecraft. Хорошо, м"
"ы готовы начать, давайте повеселимся......"

#: A.08-minecraft-vj.md:39
#, fuzzy
msgid "Sand Storms"
msgstr "Песчаные Бури"

#: A.08-minecraft-vj.md:41
#, fuzzy
msgid ""
"When we're using Minecraft to create visuals we try and think about what will "
"both look interesting and also be easy to generate from code. One nice trick i"
"s to create a sand storm by dropping sand blocks from the sky. For that all we"
" need are a few basic fns:"
msgstr ""
"Когда мы используем Minecraft для создания визуальных эффектов, мы стараемся д"
"умать о том, чтобы это одновременно выглядело интересно и легко генерировалось"
" с помощью кода. Интересный трюк - создать песчаную бурю, сбрасывая песчаные б"
"локи с неба. Для этого нам необходимы несколько базовых функций:"

#: A.08-minecraft-vj.md:46
msgid "`sleep` - for inserting a delay between actions"
msgstr "`sleep` - для того, чтобы вставить задержку между действиями"

#: A.08-minecraft-vj.md:47
msgid "`mc_location` - to find our current location"
msgstr "`mc_location` - для нахождения нашего текущего местоположения"

#: A.08-minecraft-vj.md:48
msgid "`mc_set_block`- to place sand blocks at a specific location"
msgstr "`mc_set_block`- чтобы поместить песчаный блок в заданное место"

#: A.08-minecraft-vj.md:49
msgid "`rrand` - to allow us to generate random values within a range"
msgstr "`rrand` - для генерации случайных чисел в заданном диапазоне"

#: A.08-minecraft-vj.md:50
#, fuzzy
msgid "`live_loop` - to allow us to continually make it rain sand"
msgstr "`live_loop` - позволяет сделать дождь из песка непрерывным"

#: A.08-minecraft-vj.md:52
#, fuzzy
msgid ""
"If you're unfamiliar with any of the built-in fns such as `rrand`, just type t"
"he word into your buffer, click on it and then hit the keyboard combo `Control"
"-i` to bring up the built-in documentation. Alternatively you can navigate to "
"the *lang* tab in the Help system and then look up the fns directly along with"
" all the other exciting things you can do."
msgstr ""
"Если вы не знакомы с какой-либо из встроенных функций, например `rrand`, прост"
"о введите её название в свой буфер, кликните на нём, а затем используйте клави"
"атурное сочетание `Ctrl-i`, вызвающее встроенную документацию. В качестве альт"
"ернативы вы можете переместиться к вкладке *язык* справочной системы, и найти "
"нужную функцию прямо там, как и другие интересные вещи."

#: A.08-minecraft-vj.md:58
#, fuzzy
msgid ""
"Let's make it rain a little first before unleashing the full power of the stor"
"m. Grab your current location and use it to create a few sand blocks up in the"
" sky nearby:"
msgstr ""
"Прежде чем высвободить всю мощь бури, сделаем небольшой дождь. Возьмём ваше те"
"кущее местоположение и используем его для создания нескольких песчаных блоков "
"в небе неподалеку:"

#: A.08-minecraft-vj.md:62
#, no-wrap
msgid ""
"x, y, z = mc_location\n"
"mc_set_block :sand, x, y + 20, z + 5\n"
"sleep 2\n"
"mc_set_block :sand, x, y + 20, z + 6\n"
"sleep 2\n"
"mc_set_block :sand, x, y + 20, z + 7\n"
"sleep 2\n"
"mc_set_block :sand, x, y + 20, z + 8"
msgstr ""
"x, y, z = mc_location\n"
"mc_set_block :sand, x, y + 20, z + 5\n"
"sleep 2\n"
"mc_set_block :sand, x, y + 20, z + 6\n"
"sleep 2\n"
"mc_set_block :sand, x, y + 20, z + 7\n"
"sleep 2\n"
"mc_set_block :sand, x, y + 20, z + 8"

#: A.08-minecraft-vj.md:73
#, fuzzy
msgid ""
"When you hit Run, you might have to look around a little as the blocks may sta"
"rt falling down behind you depending on which direction you're currently facin"
"g. Don't worry, if you missed them just hit Run again for another batch of san"
"d rain - just make sure you're looking the right way!"
msgstr ""
"Когда вы нажмете \"Выполнить\", вам, возможно, придется немного осмотреться, так"
" как блоки могут начать падать позади вас в зависимости от того, в каком напра"
"влении вы в настоящее время смотрите. Не волнуйтесь, если вы пропустили их, пр"
"осто нажмите \"Выполнить\" снова, и вы получите ещё одну порцию песчаного дождя "
"- просто убедитесь, что вы смотрите в правильном направлении!"

#: A.08-minecraft-vj.md:79
#, fuzzy
msgid ""
"Let's quickly review what's going on here. On the first line we grabbed Steve'"
"s location as coordinates with the fn `mc_location` and placed them into the v"
"ars `x`, `y`, and `z`. Then on the next lines we used the `mc_set_block` fn to"
" place some sand at the same coordinates as Steve but with some modifications."
" We chose the same x coordinate, a y coordinate 20 blocks higher and then succ"
"essively larger z coordinates so the sand dropped in a line away from Steve."
msgstr ""
"Давайте быстро посмотрим, что тут у нас происходит. На первой строке мы получи"
"ли местоположение Стива в виде координат с помощью функции `mc_location` и при"
"своили их переменным `х`, `у`, и `z`. На последующих строках мы использовали ф"
"ункциию `mc_set_block`, чтобы поместить немного песка в тех же координатах, чт"
"о и Стив но с некоторыми изменениями. Мы выбрали ту же координату `x`, но коор"
"дината `y` стала на 20 блоков выше, а затем последовательно увеличивали `z`, ч"
"тобы песок падал в линию, удаляющуюся от Стива."

#: A.08-minecraft-vj.md:87
#, fuzzy
msgid ""
"Why don't you take that code and start playing around with it yourself? Try ad"
"ding more lines, changing the sleep times, try mixing `:sand` with `:gravel` a"
"nd choose different coordinates. Just experiment and have fun!"
msgstr ""
"Почему бы вам самим не поиграть с этим кодом? Попробуйте добавить больше линий"
", изменените время задержки, попробуйте смешать `:sand` с `:gravel` и выбирать"
" разные координаты. Просто экспериментируйте и веселитесь!"

#: A.08-minecraft-vj.md:91
#, fuzzy
msgid "Live Loops Unleashed"
msgstr "Раскручиваем Живые Циклы"

#: A.08-minecraft-vj.md:93
#, fuzzy
msgid ""
"OK, it's time to get the storm raging by unleashing the full power of the `liv"
"e_loop` - Sonic Pi's magical ability which unleashes the full power of live co"
"ding - changing code on-the-fly whilst it's running!"
msgstr ""
"Хорошо, пришло время получить бушующую бурю, высвободив мощь `live_loop` - маг"
"ической способности Sonic Pi, раскрывающей всю силу лайвкодинга - изменения ко"
"да в реальном времени!"

#: A.08-minecraft-vj.md:97
#, no-wrap
#, fuzzy
msgid ""
"live_loop :sand_storm do\n"
"  x, y, z = mc_location\n"
"  xd = rrand(-10, 10)\n"
"  zd = rrand(-10, 10)\n"
"  co = rrand(70, 130)\n"
"  synth :cnoise, attack: 0, release: 0.125, cutoff: co\n"
"  mc_set_block :sand, x + xd, y+20, z+zd\n"
"  sleep 0.125\n"
"end"
msgstr ""
"live_loop :sand_storm do\n"
"  x, y, z = mc_location\n"
"  xd = rrand(-10, 10)\n"
"  zd = rrand(-10, 10)\n"
"  co = rrand(70, 130)\n"
"  synth :cnoise, attack: 0, release: 0.125, cutoff: co\n"
"  mc_set_block :sand, x + xd, y + 20, z + zd\n"
"  sleep 0.125\n"
"end"

#: A.08-minecraft-vj.md:109
#, fuzzy
msgid ""
"What fun! We're looping round pretty quickly (8 times a second) and during eac"
"h loop we're finding Steve's location like before but then generating 3 random"
" values:"
msgstr ""
"Это весело! Мы выполняем круг цикла довольно быстро (8 раз в секунду), и во вр"
"емя каждого круга мы находим местоположение Стива также, как и раньше, но в эт"
"от раз генерируем 3 случайных значения:"

#: A.08-minecraft-vj.md:113
#, fuzzy
msgid "`xd` - the difference for x which will be between -10 and 10"
msgstr "`xd` - разница для `x`, которая будет находиться между -10 и 10"

#: A.08-minecraft-vj.md:114
#, fuzzy
msgid "`zd` - the difference for z also between -10 and 10"
msgstr "`zd` - разница для `z`, которая также будет между -10 и 10"

#: A.08-minecraft-vj.md:115
#, fuzzy
msgid "`co` - a cutoff value for the low pass filter between 70 and 130"
msgstr "`co` - значение среза фильтра низких частот между 70 и 130"

#: A.08-minecraft-vj.md:117
#, fuzzy
msgid ""
"We then use those random values in the fns `synth` and `mc_set_block` giving u"
"s sand falling in random locations around Steve along with a percussive rain-l"
"ike sound from the `:cnoise` synth."
msgstr ""
"Затем мы используем эти случайные значения в функциях `synth` и `mc_set_block`"
", что даёт нам песок, падающий случайным образом вокруг Стива вместе с перкусс"
"ионным звуком, похожим на дождь, от синтезатора `:cnoise`."

#: A.08-minecraft-vj.md:121
#, fuzzy
msgid ""
"For those of you new to live loops - this is where the fun really starts with "
"Sonic Pi. Whilst the code is running and the sand is pouring down, try changin"
"g one of the values, perhaps the sleep time to `0.25` or the `:sand` block typ"
"e to `:gravel`. Now hit run *again*. Hey Presto! Things changed without the co"
"de stopping. This is your gateway to performing like a real VJ. Keep practisin"
"g and changing things around. How different can you make the visuals without s"
"topping the code?"
msgstr ""
"Для тех из вас, кто ещё новичок в живых циклах - именно здесь и начинается сам"
"ое интересное. Пока код выполняется и песок сыплется вниз, попробуйте изменить"
" одно из значений. Например, время задержки на `0.25`, или тип блока с `:sand`"
" на `:gravel`. Теперь нажмите \"Выполнить\" *снова*. Эй! Всё изменилось без оста"
"новки кода. Это и есть та самая дверь к выступлениям в роли виджея. Продолжайт"
"е тренироваться и что-нибудь изменять. Насколько разнообразными можно сделать "
"визуальные эффекты, не останавливая кода?"

#: A.08-minecraft-vj.md:129
#, fuzzy
msgid "Epic Block Patterns"
msgstr "Эпические Блочные Структуры"

#: A.08-minecraft-vj.md:131
msgid ""
"![Screen 1](../images/tutorial/articles/A.08-minecraft-vj/minecraft-vj-1-small"
".png)"
msgstr ""

#: A.08-minecraft-vj.md:133
#, fuzzy
msgid ""
"Finally, another great way of generating interesting visuals is to generate hu"
"ge patterned walls to fly towards and close by. For this effect we'll need to "
"move from placing the blocks randomly to placing them in an ordered manner. We"
" can do this by nesting two sets of iteration (hit the Help button and navigat"
"e to section 5.2 of the tutorial \"Iteration and Loops\" for more background on "
"iteration). The funny `|xd|` after the do means that `xd` will be set for each"
" value of the iteration. So the first time it will be 0, then 1, then 2... etc"
". By nesting two lots of iteration together like this we can generate all the "
"coordinates for a square. We can then randomly choose block types from a ring "
"of blocks for an interesting effect:"
msgstr ""
"Наконец, еще один отличный способ создания интересных визуальных эффектов - ге"
"нерировать огромные повторяющиеся стены, парящие рядом. Для этого эффекта нам "
"нужно перейти от размещения блоков случайным образом, к размещению их в упоряд"
"оченном виде. Мы можем сделать это с помощью двух вложеных итераций (нажмите к"
"нопку \"Помощь\", чтобы перейти в раздел 5.2 учебника \"Итерации И Циклы\", чтобы "
"узнать больше об итерациях). Аргумент `|xd|` после `do` означает, что `xd` буд"
"ет соответствовать номеру итерации. Поэтому сначала это будет 0, потом 1, пото"
"м 2... и т. д. Совмещая две итерации вместе, мы можем сгенерировать любые коор"
"динаты. Затем мы произвольно выбираем типы блоков из кольцевого списка для соз"
"дания интересного эффекта:"

#: A.08-minecraft-vj.md:145
#, no-wrap
msgid ""
"x, y, z = mc_location\n"
"bs = (ring :gold, :diamond, :glass)\n"
"10.times do |xd|\n"
"  10.times do |yd|\n"
"    mc_set_block bs.choose, x + xd, y + yd, z\n"
"  end\n"
"end"
msgstr ""
"x, y, z = mc_location\n"
"bs = (ring :gold, :diamond, :glass)\n"
"10.times do |xd|\n"
"  10.times do |yd|\n"
"    mc_set_block bs.choose, x + xd, y + yd, z\n"
"  end\n"
"end"

#: A.08-minecraft-vj.md:155
#, fuzzy
msgid ""
"Pretty neat. Whilst we're having fun here, try changing `bs.choose` to `bs.tic"
"k` to move from a random pattern to a more regular one. Try changing the block"
" types and the more adventurous of you might want to try sticking this within "
"a `live_loop` so that the patterns keep changing automatically."
msgstr ""
"Довольно аккуратно. В то время как мы здесь веселимся, попробуйте изменить `bs"
".choose`, на `bs.tick`, чтобы перейти от случайного выбора к последовательному"
". Попробуйте изменять типы блоков более радикально. Вы можете захотеть делать "
"это с `live_loop`, чтобы узоры продолжали изменяться автоматически."

#: A.08-minecraft-vj.md:161
#, fuzzy
msgid ""
"Now, for the VJ finale - change the two `10.times` to `100.times` and hit Run."
" Kaboom! A Huge gigantic wall of randomly placed bricks. Imagine how long it w"
"ould take you to build that manually with your mouse! Double-tap space to ente"
"r fly-mode and start swooping by for some great visual effects. Don't stop her"
"e though - use your imagination to conjure up some cool ideas and then use the"
" coding power of Sonic Pi to make it real. When you've practised enough dim th"
"e lights and put on a VJ show for your friends!"
msgstr ""
"Теперь, измените обе итерации с `10.times` на `100.times` и нажмите \"Выполнить"
"\". Бабах! Огромные исполинские стены с хаотично расположенными кирпичами. Пред"
"ставьте сколько времени потребуется вам, чтобы построить их вручную с помощью "
"мыши! Дважды нажмите пробел, чтобы переключиться в режим полёта и начните пари"
"ть для создания замечательных визуальных эффектов. Не останавливайтесь на этом"
", используйте своё воображение, чтобы придумать интересные идеи, а затем, испо"
"льзовав силу кода Sonic Pi, сделайте это реальностью. Когда вы достаточно попр"
"актикуетесь, приглушите свет и покажите шоу своим друзьям!"

#: A.09-randomisation.md:1
msgid "A.9 Randomisation"
msgstr ""

#: A.09-randomisation.md:3
msgid "Surfing Random Streams"
msgstr ""

#: A.09-randomisation.md:5
msgid ""
"Back in episode 4 of this tutorial series we took a brief look at randomisatio"
"n whilst coding up some sizzling synth riffs. Given that randomisation is such"
" an important part of my live coding DJ sets I thought it would be useful to c"
"over the fundamentals in much greater detail. So, get your lucky hat on and le"
"t's surf some random streams!"
msgstr ""

#: A.09-randomisation.md:11
msgid "There is no random"
msgstr ""

#: A.09-randomisation.md:13
msgid ""
"The first thing to learn which might really surprise you when playing with Son"
"ic Pi's randomisation functions is that they're not actually really random. Wh"
"at does this actually mean? Well, let's try a couple of tests. First, imagine "
"a number in your head between 0 and 1. Keep it there and don't tell me. Now le"
"t me guess... was it `0.321567`? No? Bah, I'm clearly no good at this. Let me "
"have another go, but let's ask Sonic Pi to choose a number this time. Fire up "
"Sonic Pi v2.7+ and ask it for a random number but again don't tell me:"
msgstr ""

#: A.09-randomisation.md:22
#, no-wrap
msgid "print rand"
msgstr "print rand"

#: A.09-randomisation.md:26
msgid ""
"Now for the reveal... was it `0.75006103515625`? Yes! Ha, I can see you're a l"
"ittle sceptical. Perhaps it was just a lucky guess. Let's try again. Press the"
" Run button again and see what we get... What? `0.75006103515625` again? This "
"clearly can't be random! You're right, it's not."
msgstr ""

#: A.09-randomisation.md:32
msgid ""
"What's going on here? The fancy computer science word here is determinism. Thi"
"s just means that nothing is by chance and everything is destined to be. Your "
"version of Sonic Pi is destined to always return `0.75006103515625` in the pro"
"gram above. This might sound pretty useless, but let me assure you that it's o"
"ne of the most powerful parts of Sonic Pi. If you stick at it you'll learn how"
" to rely on the deterministic nature of Sonic Pi's randomisation as a fundamen"
"tal building block for your compositions and live coded DJ sets."
msgstr ""

#: A.09-randomisation.md:41
msgid "A Random Melody"
msgstr ""

#: A.09-randomisation.md:43
msgid ""
"When Sonic Pi boots it actually loads into memory a sequence of 441,000 pre-ge"
"nerated random values. When you call a random function such as `rand` or `rran"
"d`, this random stream is used to generate your result. Each call to a random "
"function consumes a value from this stream. Therefore the 10th call to a rando"
"m function will use the 10th value from the stream. Also, every time you press"
" the Run button, the stream is reset for that run. This is why I could predict"
" the result to `rand` and why the 'random' melody was the same every time. Eve"
"rybody's version of Sonic Pi uses the exact same random stream which is very i"
"mportant when we start sharing our pieces with each other."
msgstr ""

#: A.09-randomisation.md:54
msgid "Let's use this knowledge to generate a repeatable random melody:"
msgstr ""

#: A.09-randomisation.md:56
#, no-wrap
msgid ""
"8.times do\n"
" play rrand_i(50, 95)\n"
" sleep 0.125\n"
"end"
msgstr ""
"8.times do\n"
" play rrand_i(50, 95)\n"
" sleep 0.125\n"
"end"

#: A.09-randomisation.md:63
msgid ""
"Type this into a spare buffer and hit Run. You'll hear a melody consisting of "
"'random' notes between 50 and 95. When it's finished, hit Run again to hear ex"
"actly the same melody again."
msgstr ""

#: A.09-randomisation.md:67
msgid "Handy Randomisation Functions"
msgstr ""

#: A.09-randomisation.md:69
msgid ""
"Sonic Pi comes with a number of useful functions for working with the random s"
"tream. Here's a list of some of the most useful:"
msgstr ""

#: A.09-randomisation.md:72
msgid "`rand` - Simply returns the next value in the random stream"
msgstr ""

#: A.09-randomisation.md:73
msgid "`rrand` - Returns a random value within a range"
msgstr ""

#: A.09-randomisation.md:74
msgid "`rrand_i` - Returns a random whole number within a range"
msgstr ""

#: A.09-randomisation.md:75
msgid "`one_in` - Returns true or false with the given probability"
msgstr ""

#: A.09-randomisation.md:76
msgid "`dice` - Imitates rolling a dice and returns a value between 1 and 6"
msgstr ""

#: A.09-randomisation.md:77
msgid "`choose` - Chooses a random value from a list"
msgstr ""

#: A.09-randomisation.md:79
msgid ""
"Check out their documentation in the Help system for detailed information and "
"examples."
msgstr ""

#: A.09-randomisation.md:82
msgid "Resetting the Stream"
msgstr ""

#: A.09-randomisation.md:84
msgid ""
"Whilst the ability to repeat a sequence of chosen notes is essential to allow "
"you to replay a riff on the dance floor, it might not be exactly the riff you "
"want. Wouldn't it be great if we could try a number of different riffs and cho"
"ose the one we liked best? This is where the real magic starts."
msgstr ""

#: A.09-randomisation.md:90
msgid ""
"We can manually set the stream with the fn `use_random_seed`. In Computer Scie"
"nce, a random seed is the starting point from which a new stream of random val"
"ues can sprout out and blossom. Let's try it:"
msgstr ""

#: A.09-randomisation.md:94
#, no-wrap
msgid ""
"use_random_seed 0\n"
"3.times do\n"
"  play rrand_i(50, 95)\n"
"  sleep 0.125\n"
"end"
msgstr ""
"use_random_seed 0\n"
"3.times do\n"
"  play rrand_i(50, 95)\n"
"  sleep 0.125\n"
"end"

#: A.09-randomisation.md:102
msgid ""
"Great, we get the first three notes of our random melody above: `84`, `83` and"
" `71`. However, we can now change the seed to something else. How about this:"
msgstr ""

#: A.09-randomisation.md:106
#, no-wrap
msgid ""
"use_random_seed 1\n"
"3.times do\n"
"  play rrand_i(50, 95)\n"
"  sleep 0.125\n"
"end"
msgstr ""
"use_random_seed 1\n"
"3.times do\n"
"  play rrand_i(50, 95)\n"
"  sleep 0.125\n"
"end"

#: A.09-randomisation.md:114
msgid ""
"Interesting, we get `83`, `71` and `61` . You might notice that the first two "
"numbers here are the same as the last two numbers before - this isn't a coinci"
"dence."
msgstr ""

#: A.09-randomisation.md:118
msgid ""
"Remember that the random stream is just a giant list of 'pre-rolled' values. U"
"sing a random seed simply jumps us to a point in that list. Another way of thi"
"nking about it is to imagine a huge deck of pre-shuffled cards. Using a random"
" seed is cutting the deck at a particular point. The fabulous part of this is "
"that it's precisely this ability to jump around the random stream which gives "
"us huge power when making music."
msgstr ""

#: A.09-randomisation.md:126
msgid ""
"Let's revisit our random melody of 8 notes with this new stream resetting powe"
"r, but let's also throw in a live loop so we can experiment live whilst it's p"
"laying:"
msgstr ""

#: A.09-randomisation.md:130
#, no-wrap
msgid ""
"live_loop :random_riff do    \n"
"  use_random_seed 0\n"
"  8.times do\n"
"    play rrand_i(50, 95), release: 0.1\n"
"    sleep 0.125\n"
"  end\n"
"end"
msgstr ""
"live_loop :random_riff do    \n"
"  use_random_seed 0\n"
"  8.times do\n"
"    play rrand_i(50, 95), release: 0.1\n"
"    sleep 0.125\n"
"  end\n"
"end"

#: A.09-randomisation.md:140
msgid ""
"Now, whilst it's still playing, change the seed value from `0` to something el"
"se. Try `100`, what about `999`. Try your own values, experiment and play arou"
"nd - see which seed generates the riff you like best."
msgstr ""

#: A.09-randomisation.md:147
msgid ""
"This month's tutorial has been quite a technical dive into the workings of Son"
"ic Pi's randomisation functionality. Hopefully it has given you some insight i"
"nto how it works and how you can start using randomisation in a reliable way t"
"o create repeatable patterns within your music. It's important to stress that "
"you can use repeatable randomisation *anywhere* you want. For example, you can"
" randomise the amplitude of notes, the timing of the rhythm, the amount of rev"
"erb, the current synth, the mix of an FX, etc. etc. In the future we'll take a"
" close look at some of these applications, but for now let me leave you with a"
" short example."
msgstr ""

#: A.09-randomisation.md:157
msgid ""
"Type the following into a spare buffer, hit Run, and then start changing the s"
"eeds around, hit Run again (whilst it's still playing) and explore the differe"
"nt sounds, rhythms and melodies you can make. When you find a nice one, rememb"
"er the seed number so you can get back to it. Finally, when you've found a few"
" seeds you like, put on a live coded performance for your friends by simply sw"
"itching between your favourite seeds to create a full piece."
msgstr ""

#: A.09-randomisation.md:165
#, no-wrap
msgid ""
"live_loop :random_riff do\n"
"  use_random_seed 10300\n"
"  use_synth :prophet\n"
"  s = [0.125, 0.25, 0.5].choose\n"
"  8.times do\n"
"    r = [0.125, 0.25, 1, 2].choose\n"
"    n = (scale :e3, :minor).choose\n"
"    co = rrand(30, 100)\n"
"    play n, release: r, cutoff: co\n"
"    sleep s\n"
"  end\n"
"end\n"
"live_loop :drums do\n"
"  use_random_seed 2001\n"
"  16.times do\n"
"    r = rrand(0.5, 10)\n"
"    sample :drum_bass_hard, rate: r, amp: rand\n"
"    sleep 0.125\n"
"  end\n"
"end"
msgstr ""
"live_loop :random_riff do\n"
"  use_random_seed 10300\n"
"  use_synth :prophet\n"
"  s = [0.125, 0.25, 0.5].choose\n"
"  8.times do\n"
"    r = [0.125, 0.25, 1, 2].choose\n"
"    n = (scale :e3, :minor).choose\n"
"    co = rrand(30, 100)\n"
"    play n, release: r, cutoff: co\n"
"    sleep s\n"
"  end\n"
"end\n"
"live_loop :drums do\n"
"  use_random_seed 2001\n"
"  16.times do\n"
"    r = rrand(0.5, 10)\n"
"    sample :drum_bass_hard, rate: r, amp: rand\n"
"    sleep 0.125\n"
"  end\n"
"end"

#: A.10-controlling-your-sound.md:1
msgid "A.10 Control"
msgstr ""

#: A.10-controlling-your-sound.md:3
msgid "Controlling Your Sound"
msgstr ""

#: A.10-controlling-your-sound.md:5
msgid ""
"So far during this series we've focussed on triggering sounds. We've discovere"
"d that we can trigger the many synths built into Sonic Pi with `play` or `synt"
"h` and how to trigger pre-recorded samples with `sample`. We've also looked at"
" how we can wrap these triggered sounds within studio FX such as reverb and di"
"stortion using the `with_fx` command. Combine this with Sonic Pi's incredibly "
"accurate timing system and you can produce a vast array of sounds, beats and r"
"iffs. However, once you've carefully selected a particular sound's options and"
" triggered it, there's no ability to mess with it whilst it's playing right? W"
"rong! Today you're going to learn something very powerful - how to control run"
"ning synths."
msgstr ""

#: A.10-controlling-your-sound.md:17
msgid "A Basic Sound"
msgstr ""

#: A.10-controlling-your-sound.md:19
msgid ""
"Let's create a nice simple sound. Fire up Sonic Pi and in a fresh buffer type "
"the following:"
msgstr ""

#: A.10-controlling-your-sound.md:22
#, no-wrap
msgid "synth :prophet, note: :e1, release: 8, cutoff: 100"
msgstr "synth :prophet, note: :e1, release: 8, cutoff: 100"

#: A.10-controlling-your-sound.md:26
msgid ""
"Now press the Run button at the top left to hear a lovely rumbling synth sound"
". Go ahead, press it again a few times to get a feel for it. OK, done? Let's s"
"tart controlling it!"
msgstr ""

#: A.10-controlling-your-sound.md:30
msgid "Synth Nodes"
msgstr ""

#: A.10-controlling-your-sound.md:32
msgid ""
"A little known feature in Sonic Pi is that the fns `play`, `synth` and `sample"
"`, return something called a `SynthNode` which represents a running sound. You"
" can capture one of these `SynthNode`s using a standard variable and then **co"
"ntrol** it at a later point in time. For example, let's change the value of th"
"e `cutoff:` opt after 1 beat:"
msgstr ""

#: A.10-controlling-your-sound.md:38
#, no-wrap
msgid ""
"sn = synth :prophet, note: :e1, release: 8, cutoff: 100\n"
"sleep 1\n"
"control sn, cutoff: 130"
msgstr ""
"sn = synth :prophet, note: :e1, release: 8, cutoff: 100\n"
"sleep 1\n"
"control sn, cutoff: 130"

#: A.10-controlling-your-sound.md:44
msgid "Let's look at each line in turn:"
msgstr ""

#: A.10-controlling-your-sound.md:46
msgid ""
"Firstly we trigger the `:prophet` synth using the `synth` fn as normal. Howeve"
"r we also capture the result in a variable called `sn`. We could have called t"
"his variable something completely different such as `synth_node` or `jane` - t"
"he name doesn't matter. However, it's important to choose a name that's meanin"
"gful to you for your performances and for people reading your code. I chose `s"
"n` as it's a nice short mnemonic for synth node."
msgstr ""

#: A.10-controlling-your-sound.md:54
msgid ""
"On line 2 we have a standard `sleep` command. This does nothing special - it j"
"ust asks the computer to wait for 1 beat before moving onto the next line."
msgstr ""

#: A.10-controlling-your-sound.md:58
msgid ""
"Line 3 is where the control fun starts. Here, we use the `control` fn to tell "
"our running `SynthNode` to change the cutoff value to `130`. If you hit the **"
"Run** button, you'll hear the `:prophet` synth start playing as before, but af"
"ter 1 beat it will shift to sound a lot brighter."
msgstr ""

#: A.10-controlling-your-sound.md:63
msgid "Modulatable Options"
msgstr ""

#: A.10-controlling-your-sound.md:65
msgid ""
"Most of Sonic Pi's synths and FX opts may be changed after being triggered. Ho"
"wever, this isn't the case for all of them. For example, the envelope opts `at"
"tack:`, `decay:`, `sustain:` and `release:` can only be set when triggering th"
"e synth. Figuring out which opts can and can't be changed is simple - just hea"
"d to the documentation for a given synth or FX and then scroll down to the ind"
"ividual option documentation and look for the phrases \"May be changed whilst p"
"laying\" or \"Can not be changed once set\". For example, the documentation for t"
"he `:beep` synth's `attack:` opt makes it clear that it's not possible to chan"
"ge it:"
msgstr ""

#: A.10-controlling-your-sound.md:76
msgid "Default: 0"
msgstr ""

#: A.10-controlling-your-sound.md:77
msgid "Must be zero or greater"
msgstr ""

#: A.10-controlling-your-sound.md:78
msgid "Can not be changed once set"
msgstr ""

#: A.10-controlling-your-sound.md:79
msgid "Scaled with current BPM value"
msgstr ""

#: A.10-controlling-your-sound.md:81
msgid "Multiple Changes"
msgstr ""

#: A.10-controlling-your-sound.md:83
msgid ""
"Whilst a synth is running you're not limited to changing it only once - you're"
" free to change it as many times as you like. For example, we can turn our `:p"
"rophet` into a mini arpeggiator with the following:"
msgstr ""

#: A.10-controlling-your-sound.md:87
#, no-wrap
msgid ""
"notes = (scale :e3, :minor_pentatonic)\n"
"sn = synth :prophet, note: :e1, release: 8, cutoff: 100\n"
"sleep 1\n"
"16.times do\n"
"  control sn, note: notes.tick\n"
"  sleep 0.125\n"
"end"
msgstr ""
"notes = (scale :e3, :minor_pentatonic)\n"
"sn = synth :prophet, note: :e1, release: 8, cutoff: 100\n"
"sleep 1\n"
"16.times do\n"
"  control sn, note: notes.tick\n"
"  sleep 0.125\n"
"end"

#: A.10-controlling-your-sound.md:97
msgid ""
"In this snippet of code we just added a couple of extra things. First we defin"
"ed a new variable called `notes` which contains the notes we'd like to cycle t"
"hrough (an arpeggiator is just a fancy name for something that cycles through "
"a list of notes in order). Secondly we replaced our single call to `control` w"
"ith an iteration calling it 16 times. In each call to `control` we `.tick` thr"
"ough our ring of `notes` which will automatically repeat once we get to the en"
"d (thanks to the fabulous power of Sonic Pi's rings). For a bit of variety try"
" replacing `.tick` with `.choose` and see if you can hear the difference."
msgstr ""

#: A.10-controlling-your-sound.md:107
msgid ""
"Note that we can change multiple opts simultaneously. Try changing the control"
" line to the following and listen for the difference:"
msgstr ""

#: A.10-controlling-your-sound.md:110
#, no-wrap
msgid "control sn, note: notes.tick, cutoff: rrand(70, 130)"
msgstr "control sn, note: notes.tick, cutoff: rrand(70, 130)"

#: A.10-controlling-your-sound.md:114
msgid "Sliding"
msgstr ""

#: A.10-controlling-your-sound.md:116
msgid ""
"When we control a `SynthNode`, it responds exactly on time and instantly chang"
"es the value of the opt to the new one as if you'd pressed a button or flicked"
" a switch requesting the change. This can sound rhythmical and percussive - es"
"pecially if the opt controls an aspect of the timbre such as `cutoff:`. Howeve"
"r, sometimes you don't want the change to happen instantaneously. Instead, you"
" might want to smoothly move from the current value to the new one as if you'd"
" moved a slider or dial. Of course, Sonic Pi can also do this too using the `_"
"slide:` opts."
msgstr ""

#: A.10-controlling-your-sound.md:125
msgid ""
"Each opt that can be modified also has a special corresponding `_slide:` opt t"
"hat allows you to specify a slide time. For example, `amp:` has `amp_slide:` a"
"nd `cutoff:` has `cutoff_slide:`. These slide opts work slightly differently t"
"han all the other opts in that they tell the synth note how to behave **next t"
"ime they are controlled**. Let's take a look:"
msgstr ""

#: A.10-controlling-your-sound.md:131
#, no-wrap
msgid ""
"sn = synth :prophet, note: :e1, release: 8, cutoff: 70, cutoff_slide: 2\n"
"sleep 1\n"
"control sn, cutoff: 130"
msgstr ""
"sn = synth :prophet, note: :e1, release: 8, cutoff: 70, cutoff_slide: 2\n"
"sleep 1\n"
"control sn, cutoff: 130"

#: A.10-controlling-your-sound.md:137
msgid ""
"Notice how this example is exactly the same as before except with the addition"
" of `cutoff_slide:`. This is saying that next time this synth has its `cutoff:"
"` opt controlled, it will take 2 beats to slide from the current value to the "
"new one. Therefore, when we use `control` you can hear the cutoff slide from 7"
"0 to 130. It creates an interesting dynamic feel to the sound. Now, try changi"
"ng the `cutoff_slide:` time to a shorter value such as 0.5 or a longer value s"
"uch as 4 to see how it changes the sound. Remember, you can slide any of the m"
"odifiable opts in exactly this way and each `_slide:` value can be totally dif"
"ferent so you can have the cutoff sliding slowly, the amp sliding fast and the"
" pan sliding somewhere in between if that's what you're looking to create..."
msgstr ""

#: A.10-controlling-your-sound.md:151
msgid ""
"Let's look at a short example which demonstrates the power of controlling synt"
"hs after they've been triggered. Notice that you can also slide FX just like s"
"ynths although with a slightly different syntax. Check out section 7.2 of the "
"built-in tutorial for more information on controlling FX."
msgstr ""

#: A.10-controlling-your-sound.md:157
msgid ""
"Copy the code into a spare buffer and take a listen. Don't stop there though -"
" play around with the code. Change the slide times, change the notes, the synt"
"h, the FX and the sleep times and see if you can turn it into something comple"
"tely different!"
msgstr ""

#: A.10-controlling-your-sound.md:162
#, no-wrap
msgid ""
"live_loop :moon_rise do\n"
"  with_fx :echo, mix: 0, mix_slide: 8 do |fx|\n"
"    control fx, mix: 1\n"
"    notes = (scale :e3, :minor_pentatonic, num_octaves: 2).shuffle\n"
"    sn = synth :prophet , sustain: 8, note: :e1, cutoff: 70, cutoff_slide: 8\n"
"    control sn, cutoff: 130\n"
"    sleep 2\n"
"    32.times do\n"
"      control sn, note: notes.tick, pan: rrand(-1, 1)\n"
"      sleep 0.125\n"
"    end\n"
"  end\n"
"end"
msgstr ""
"live_loop :moon_rise do\n"
"  with_fx :echo, mix: 0, mix_slide: 8 do |fx|\n"
"    control fx, mix: 1\n"
"    notes = (scale :e3, :minor_pentatonic, num_octaves: 2).shuffle\n"
"    sn = synth :prophet , sustain: 8, note: :e1, cutoff: 70, cutoff_slide: 8\n"
"    control sn, cutoff: 130\n"
"    sleep 2\n"
"    32.times do\n"
"      control sn, note: notes.tick, pan: rrand(-1, 1)\n"
"      sleep 0.125\n"
"    end\n"
"  end\n"
"end"

#: A.11-beat-tracking.md:1
msgid "A.11 Tick Tock"
msgstr ""

#: A.11-beat-tracking.md:3
msgid "Tracking the Beat"
msgstr ""

#: A.11-beat-tracking.md:5
msgid ""
"Last month in this series we took a deep technical dive into the randomisation"
" system underpinning Sonic Pi. We explored how we can use it to deterministica"
"lly add new levels of dynamic control over our code. This month we're going to"
" continue our technical dive and turn our attention to Sonic Pi's unique tick "
"system. By the end of this article you'll be ticking your way through rhythms "
"and riffs on your way to being a live coding DJ."
msgstr ""

#: A.11-beat-tracking.md:13
msgid "Beat Counting"
msgstr ""

#: A.11-beat-tracking.md:15
msgid ""
"When making music we often want to do a different thing depending on which bea"
"t it is. Sonic Pi has a special beat counting system called `tick` to give you"
" precise control over when a beat actually occurs and even supports multiple b"
"eats with their own tempos."
msgstr ""

#: A.11-beat-tracking.md:20
msgid ""
"Let's have a play - to advance the beat we just need to call `tick`. Open up a"
" fresh buffer, type in the following and hit Run:"
msgstr ""

#: A.11-beat-tracking.md:23
#, no-wrap
msgid "puts tick #=> 0"
msgstr "puts tick #=> 0"

#: A.11-beat-tracking.md:27
msgid ""
"This will return the current beat: `0`. Notice that even if you press the Run "
"button a few times it will always return `0`. This is because each run starts "
"a fresh beat counting from 0. However, whilst the run is still active, we can "
"advance the beat as many times as we want:"
msgstr ""

#: A.11-beat-tracking.md:32
#, no-wrap
msgid ""
"puts tick #=> 0\n"
"puts tick #=> 1\n"
"puts tick #=> 2"
msgstr ""
"puts tick #=> 0\n"
"puts tick #=> 1\n"
"puts tick #=> 2"

#: A.11-beat-tracking.md:38
msgid ""
"Whenever you see the symbol `#=>` at the end of a line of code it means that t"
"hat line will log the text on the right-hand-side. For example, `puts foo #=> "
"0` means the code `puts foo` prints `0` to the log at that point in the progra"
"m."
msgstr ""

#: A.11-beat-tracking.md:43
msgid "Checking the Beat"
msgstr ""

#: A.11-beat-tracking.md:45
msgid ""
"We've seen that `tick` does two things. It increments (adds one) and returns t"
"he current beat. Sometimes we just want to look at the current beat without ha"
"ving to increment it which we can do via `look`:"
msgstr ""

#: A.11-beat-tracking.md:49
#, no-wrap
msgid ""
"puts tick #=> 0\n"
"puts tick #=> 1\n"
"puts look #=> 1\n"
"puts look #=> 1"
msgstr ""
"puts tick #=> 0\n"
"puts tick #=> 1\n"
"puts look #=> 1\n"
"puts look #=> 1"

#: A.11-beat-tracking.md:56
msgid ""
"In this code we tick the beat up twice and then call `look` twice. We'll see t"
"he following values in the log: `0`, `1`, `1`, `1`. The first two `tick`s retu"
"rned `0`, then `1` as expected, then the two `look`s just returned the last be"
"at value twice which was `1`."
msgstr ""

#: A.11-beat-tracking.md:64
msgid ""
"So now we can advance the beat with `tick` and check the beat with `look`. Wha"
"t next? We need something to tick over. Sonic Pi uses rings for representing r"
"iffs, melodies and rhythms and the tick system has been specifically designed "
"to work very closely with them. In fact, rings have their own dot version of `"
"tick` which does two things. Firstly, it acts like a regular tick and incremen"
"ts the beat. Secondly it looks up the ring value using the beat as the index. "
"Let's take a look:"
msgstr ""

#: A.11-beat-tracking.md:72
#, no-wrap
msgid "puts (ring :a, :b, :c).tick #=> :a"
msgstr "puts (ring :a, :b, :c).tick #=> :a"

#: A.11-beat-tracking.md:76
msgid ""
"`.tick` is a special dot version of `tick` which will return the first value o"
"f the ring `:a`. We can grab each of the values in the ring by calling `.tick`"
" multiple times:"
msgstr ""

#: A.11-beat-tracking.md:80
#, no-wrap
msgid ""
"puts (ring :a, :b, :c).tick #=> :a\n"
"puts (ring :a, :b, :c).tick #=> :b\n"
"puts (ring :a, :b, :c).tick #=> :c\n"
"puts (ring :a, :b, :c).tick #=> :a\n"
"puts look                   #=> 3"
msgstr ""
"puts (ring :a, :b, :c).tick #=> :a\n"
"puts (ring :a, :b, :c).tick #=> :b\n"
"puts (ring :a, :b, :c).tick #=> :c\n"
"puts (ring :a, :b, :c).tick #=> :a\n"
"puts look                   #=> 3"

#: A.11-beat-tracking.md:88
msgid ""
"Take a look at the log and you'll see `:a`, `:b`, `:c` and then `:a` again. No"
"tice that `look` returns `3`. Calls to `.tick` act just like they are regular "
"calls to `tick` - they increment the local beat."
msgstr ""

#: A.11-beat-tracking.md:93
msgid "A Live Loop Arpeggiator"
msgstr ""

#: A.11-beat-tracking.md:95
msgid ""
"The real power comes when you mix `tick` with rings and `live_loop`s. When com"
"bined we have all the tools we need to both build and understand a simple arpe"
"giator. We need just four things:"
msgstr ""

#: A.11-beat-tracking.md:99
msgid "A ring containing the notes we want to loop over."
msgstr ""

#: A.11-beat-tracking.md:100
msgid "A means of incrementing and obtaining the beat."
msgstr ""

#: A.11-beat-tracking.md:101
msgid "The ability to play a note based on the current beat."
msgstr ""

#: A.11-beat-tracking.md:102
msgid "A loop structure to keep the arpegiator repeating."
msgstr ""

#: A.11-beat-tracking.md:104
msgid "These concepts can all be found in the following code:"
msgstr ""

#: A.11-beat-tracking.md:106
#, no-wrap
msgid ""
"notes = (ring 57, 62, 55, 59, 64)\n"
"live_loop :arp do\n"
"  use_synth :dpulse\n"
"  play notes.tick, release: 0.2\n"
"  sleep 0.125\n"
"end"
msgstr ""
"notes = (ring 57, 62, 55, 59, 64)\n"
"live_loop :arp do\n"
"  use_synth :dpulse\n"
"  play notes.tick, release: 0.2\n"
"  sleep 0.125\n"
"end"

#: A.11-beat-tracking.md:116
msgid ""
"Let's look at each of these lines. First we define our ring of notes which we'"
"ll continually play. We then create a `live_loop` called `:arp` which loops ro"
"und for us. Each time round the `live_loop` we set our synth to `:dpulse` and "
"then play the next note in our ring using `.tick`. Remember that this will inc"
"rement our beat counter and use the latest beat value as an index into our not"
"es ring. Finally, we wait for an eighth of a beat before looping round again."
msgstr ""

#: A.11-beat-tracking.md:124
msgid "Multiple Simultaneous Beats"
msgstr ""

#: A.11-beat-tracking.md:126
msgid ""
"A really important thing to know is that `tick`s are local to the `live_loop`."
" This means that each `live_loop` has its own independent beat counter. This i"
"s much more powerful than having a global metronome and beat. Let's take a loo"
"k at this in action:"
msgstr ""

#: A.11-beat-tracking.md:131
#, no-wrap
msgid ""
"notes = (ring 57, 62, 55, 59, 64)\n"
"with_fx :reverb do\n"
"  live_loop :arp do\n"
"    use_synth :dpulse\n"
"    play notes.tick + 12, release: 0.1\n"
"    sleep 0.125\n"
"  end\n"
"end\n"
"live_loop :arp2 do\n"
"  use_synth :dsaw\n"
"  play notes.tick - 12, release: 0.2\n"
"  sleep 0.75\n"
"end"
msgstr ""
"notes = (ring 57, 62, 55, 59, 64)\n"
"with_fx :reverb do\n"
"  live_loop :arp do\n"
"    use_synth :dpulse\n"
"    play notes.tick + 12, release: 0.1\n"
"    sleep 0.125\n"
"  end\n"
"end\n"
"live_loop :arp2 do\n"
"  use_synth :dsaw\n"
"  play notes.tick - 12, release: 0.2\n"
"  sleep 0.75\n"
"end"

#: A.11-beat-tracking.md:149
msgid "Clashing Beats"
msgstr ""

#: A.11-beat-tracking.md:151
msgid ""
"A big cause of confusion with Sonic Pi's tick system is when people want to ti"
"ck over multiple rings in the same `live_loop`:"
msgstr ""

#: A.11-beat-tracking.md:154
#, no-wrap
msgid ""
"use_bpm 300\n"
"use_synth :blade\n"
"live_loop :foo do\n"
"  play (ring :e1, :e2, :e3).tick\n"
"  play (scale :e3, :minor_pentatonic).tick\n"
"  sleep 1\n"
"end"
msgstr ""
"use_bpm 300\n"
"use_synth :blade\n"
"live_loop :foo do\n"
"  play (ring :e1, :e2, :e3).tick\n"
"  play (scale :e3, :minor_pentatonic).tick\n"
"  sleep 1\n"
"end"

#: A.11-beat-tracking.md:164
msgid ""
"Even though each `live_loop` has its own independent beat counter, we're calli"
"ng `.tick` twice within the same `live_loop`. This means that the beat will be"
" incremented twice every time round. This can produce some interesting polyrhy"
"thms but is often not what you want. There are two solutions to this problem. "
"One option is to manually call `tick` at the start of the `live_loop` and then"
" use `.look` to look up the current beat in each `live_loop`. The second solut"
"ion is to pass a unique name to each call to `.tick` such as `.tick(:foo)`. So"
"nic Pi will then create and track a separate beat counter for each named tick "
"you use. That way you can work with as many beats as you need! See the section"
" on named ticks in 9.4 of the built-in tutorial for more information."
msgstr ""

#: A.11-beat-tracking.md:178
msgid ""
"Let's bring all this knowledge of `tick`s, `ring`s and `live_loop`s together f"
"or a final fun example. As usual, don't treat this as a finished piece. Start "
"changing things and play around with it and see what you can turn it into. See"
" you next time..."
msgstr ""

#: A.11-beat-tracking.md:183
#, no-wrap
msgid ""
"use_bpm 240\n"
"notes = (scale :e3, :minor_pentatonic).shuffle\n"
"live_loop :foo do\n"
"  use_synth :blade\n"
"  with_fx :reverb, reps: 8, room: 1 do\n"
"    tick\n"
"    co = (line 70, 130, steps: 32).tick(:cutoff)\n"
"    play (octs :e3, 3).look, cutoff: co, amp: 2\n"
"    play notes.look, amp: 4\n"
"    sleep 1\n"
"  end\n"
"end\n"
"live_loop :bar do\n"
"  tick\n"
"  sample :bd_ada if (spread 1, 4).look\n"
"  use_synth :tb303\n"
"  co = (line 70, 130, steps: 16).look\n"
"  r = (line 0.1, 0.5, steps: 64).mirror.look\n"
"  play notes.look, release: r, cutoff: co\n"
"  sleep 0.5\n"
"end"
msgstr ""
"use_bpm 240\n"
"notes = (scale :e3, :minor_pentatonic).shuffle\n"
"live_loop :foo do\n"
"  use_synth :blade\n"
"  with_fx :reverb, reps: 8, room: 1 do\n"
"    tick\n"
"    co = (line 70, 130, steps: 32).tick(:cutoff)\n"
"    play (octs :e3, 3).look, cutoff: co, amp: 2\n"
"    play notes.look, amp: 4\n"
"    sleep 1\n"
"  end\n"
"end\n"
"live_loop :bar do\n"
"  tick\n"
"  sample :bd_ada if (spread 1, 4).look\n"
"  use_synth :tb303\n"
"  co = (line 70, 130, steps: 16).look\n"
"  r = (line 0.1, 0.5, steps: 64).mirror.look\n"
"  play notes.look, release: r, cutoff: co\n"
"  sleep 0.5\n"
"end"

#: A.12-sample-slicing.md:1
msgid "A.12 Sample Slicing"
msgstr ""

#: A.12-sample-slicing.md:3
msgid "Sample Slicing"
msgstr ""

#: A.12-sample-slicing.md:5
msgid ""
"Way back in episode 3 of this Sonic Pi series we looked at how to loop, stretc"
"h and filter one of the most famous drum breaks of all time - the Amen Break. "
"In this tutorial we're going to take this one step further and learn how to sl"
"ice it up, shuffle the slices and glue it back together in a completely new or"
"der. If that sounds a bit crazy to you, don't worry, it will all become clear "
"and you'll soon master a powerful new tool for your live coded sets."
msgstr ""

#: A.12-sample-slicing.md:13
msgid "Sound as Data"
msgstr ""

#: A.12-sample-slicing.md:15
msgid ""
"Before we get started let's just take a brief moment to understand how to work"
" with samples. By now, you've all hopefully played with Sonic Pi's powerful sa"
"mpler. If not, there's no time like the present! Boot up your Raspberry Pi, la"
"unch Sonic Pi from the Programming menu, type the following into a fresh buffe"
"r and then hit the Run button to hear a pre-recorded drum beat:"
msgstr ""

#: A.12-sample-slicing.md:26
msgid ""
"A recording of a sound is simply represented as data - lots of numbers between"
" -1 and 1 which represent the peaks and troughs of the sound wave. If we play "
"those numbers back in order, we get the original sound. However, what's to sto"
"p us from playing them back in a different order and creating a new sound?"
msgstr ""

#: A.12-sample-slicing.md:32
msgid ""
"How are samples actually recorded? It's actually pretty simple once you unders"
"tand the basic physics of sound. When you make a sound - for example by hittin"
"g a drum, the noise travels through the air in a similar fashion to how the su"
"rface of a lake ripples when you throw a pebble into it. When those ripples re"
"ach your ears, your eardrum moves sympathetically and converts those movements"
" into the sound you hear. If we wish to record and play back the sound, we the"
"refore need a way of capturing, storing and reproducing those ripples. One way"
" is to use a microphone which acts like an eardrum and moves back and forth as"
" the sound ripples hit it. The microphone then converts its position into a ti"
"ny electric signal which is then measured many times a second. These measureme"
"nts are then represented as a series of numbers between -1 and 1."
msgstr ""

#: A.12-sample-slicing.md:46
msgid ""
"If we were to plot a visualisation of the sound it would be a simple graph of "
"data with time on the x axis and microphone/speaker position as a value betwee"
"n -1 and 1 on the y axis. You can see an example of such a graph at the top of"
" the diagram."
msgstr ""

#: A.12-sample-slicing.md:51
msgid "Playing Part of a Sample"
msgstr ""

#: A.12-sample-slicing.md:53
msgid ""
"So, how do we code Sonic Pi to play a sample back in a different order? To ans"
"wer this question we need to take a look at the `start:` and `finish:` opts fo"
"r `sample`. These let us control the start and finish positions of our playbac"
"k of the numbers which represent the sound. The values for both of these opts "
"are represented as a number between `0` and `1` where `0` represents the start"
" of the sample and `1` is the end. So, to play the first half of the Amen Brea"
"k, we just need to specify a `finish:` of `0.5`:"
msgstr ""

#: A.12-sample-slicing.md:66
msgid "We can add in a `start:` value to play an even smaller section of the sample:"
msgstr ""

#: A.12-sample-slicing.md:68
#, no-wrap
msgid "sample :loop_amen, start: 0.25, finish: 0.5"
msgstr "sample :loop_amen, start: 0.25, finish: 0.5"

#: A.12-sample-slicing.md:72
msgid ""
"For fun, you can even have the `finish:` opt's value be *before* `start:` and "
"it will play the section backwards:"
msgstr ""

#: A.12-sample-slicing.md:75
#, no-wrap
msgid "sample :loop_amen, start: 0.5, finish: 0.25"
msgstr "sample :loop_amen, start: 0.5, finish: 0.25"

#: A.12-sample-slicing.md:79
msgid "Re-ordering Sample Playback"
msgstr ""

#: A.12-sample-slicing.md:81
msgid ""
"Now that we know that a sample is simply a list of numbers that can be played "
"back in any order and also how to play a specific part of a sample we can now "
"start having fun playing a sample back in the 'wrong' order."
msgstr ""

#: A.12-sample-slicing.md:86
msgid "![Amen Slices](../images/tutorial/articles/A.12-sample-slicing/amen_slice.png)"
msgstr ""

#: A.12-sample-slicing.md:88
msgid ""
"Let's take our Amen Break and chop it up into 8 equally-sized slices and then "
"shuffle the pieces around. Take a look at the diagram: at the top A) represent"
"s the graph of our original sample data. Chopping it into 8 slices gives us B)"
" - notice that we've given each slice a different colour to help distinguish t"
"hem. You can see each slice's start and finish values at the top. Finally C) i"
"s one possible re-ordering of the slices. We can then play this back to create"
" a new beat. Take a look at the code to do this:"
msgstr ""

#: A.12-sample-slicing.md:97
#, no-wrap
msgid ""
"live_loop :beat_slicer do\n"
"  slice_idx = rand_i(8)\n"
"  slice_size = 0.125\n"
"  s = slice_idx * slice_size\n"
"  f = s + slice_size\n"
"  sample :loop_amen, start: s, finish: f\n"
"  sleep sample_duration :loop_amen, start: s, finish: f\n"
"end"
msgstr ""
"live_loop :beat_slicer do\n"
"  slice_idx = rand_i(8)\n"
"  slice_size = 0.125\n"
"  s = slice_idx * slice_size\n"
"  f = s + slice_size\n"
"  sample :loop_amen, start: s, finish: f\n"
"  sleep sample_duration :loop_amen, start: s, finish: f\n"
"end"

#: A.12-sample-slicing.md:108
msgid ""
"we choose a random slice to play which should be a random number between 0 and"
" 7 (remember that we start counting at 0). Sonic Pi has a handy function for e"
"xactly this: `rand_i(8)`. We then store this random slice index in the variabl"
"e `slice_idx`."
msgstr ""

#: A.12-sample-slicing.md:113
msgid ""
"We define our `slice_size` which is 1/8 or 0.125. The `slice_size` is necessar"
"y for us to convert our `slice_idx` into a value between 0 and 1 so we can use"
" it as our `start:` opt."
msgstr ""

#: A.12-sample-slicing.md:117
msgid ""
"We calculate the start position `s` by multiplying the `slice_idx` by the `sli"
"ce_size`."
msgstr ""

#: A.12-sample-slicing.md:120
msgid ""
"We calculate the finish position `f` by adding the `slice_size` to the start p"
"osition `s`."
msgstr ""

#: A.12-sample-slicing.md:123
msgid ""
"We can now play the sample slice by plugging in the `s` and `f` values into th"
"e `start:` and `finish:` opts for `sample`."
msgstr ""

#: A.12-sample-slicing.md:126
msgid ""
"Before we play the next slice we need to know how long to `sleep` which should"
" be the duration of the sample slice. Luckily, Sonic Pi has us covered with `s"
"ample_duration` which accepts all the same opts as `sample` and simply returns"
" the duration. Therefore, by passing `sample_duration` our `start:` and `finis"
"h:` opts, we can find out the duration of a single slice."
msgstr ""

#: A.12-sample-slicing.md:133
msgid ""
"We wrap all of this code in a `live_loop` so that we continue to pick new rand"
"om slices to play."
msgstr ""

#: A.12-sample-slicing.md:139
msgid ""
"Let's combine everything we've seen so far into a final example which demonstr"
"ates how we can take a similar approach to combine randomly sliced beats with "
"some bass to create the start of an interesting track. Now it's your turn - ta"
"ke the code below as a starting point and see if you can take it in your own d"
"irection and create something new..."
msgstr ""

#: A.12-sample-slicing.md:145
#, no-wrap
msgid ""
"live_loop :sliced_amen do\n"
"  n = 8\n"
"  s =  line(0, 1, steps: n).choose\n"
"  f = s + (1.0 / n)\n"
"  sample :loop_amen, beat_stretch: 2, start: s, finish: f\n"
"  sleep 2.0  / n\n"
"end\n"
"live_loop :acid_bass do\n"
"  with_fx :reverb, room: 1, reps: 32, amp: 0.6 do\n"
"    tick\n"
"    n = (octs :e0, 3).look - (knit 0, 3 * 8, -4, 3 * 8).look\n"
"    co = rrand(70, 110)\n"
"    synth :beep, note: n + 36, release: 0.1, wave: 0, cutoff: co\n"
"    synth :tb303, note: n, release: 0.2, wave: 0, cutoff: co\n"
"    sleep (ring 0.125, 0.25).look\n"
"  end\n"
"end"
msgstr ""
"live_loop :sliced_amen do\n"
"  n = 8\n"
"  s =  line(0, 1, steps: n).choose\n"
"  f = s + (1.0 / n)\n"
"  sample :loop_amen, beat_stretch: 2, start: s, finish: f\n"
"  sleep 2.0  / n\n"
"end\n"
"live_loop :acid_bass do\n"
"  with_fx :reverb, room: 1, reps: 32, amp: 0.6 do\n"
"    tick\n"
"    n = (octs :e0, 3).look - (knit 0, 3 * 8, -4, 3 * 8).look\n"
"    co = rrand(70, 110)\n"
"    synth :beep, note: n + 36, release: 0.1, wave: 0, cutoff: co\n"
"    synth :tb303, note: n, release: 0.2, wave: 0, cutoff: co\n"
"    sleep (ring 0.125, 0.25).look\n"
"  end\n"
"end"

#: A.13-probabilistic-sequencer.md:1
msgid "A.13 Code a Probabilistic Sequencer"
msgstr ""

#: A.13-probabilistic-sequencer.md:3
msgid "Code a Probabilistic Sequencer"
msgstr ""

#: A.13-probabilistic-sequencer.md:5
msgid ""
"In a previous episode of this Sonic Pi series we explored the power of randomi"
"sation to introduce variety, surprise and change into our live coded tracks an"
"d performances. For example, we randomly picked notes from a scale to create n"
"ever-ending melodies. Today we're going to learn a new technique which uses ra"
"ndomisation for rhythm - probabilistic beats!"
msgstr ""

#: A.13-probabilistic-sequencer.md:12
#, fuzzy
msgid "Probability"
msgstr "Переносимость"

#: A.13-probabilistic-sequencer.md:14
msgid ""
"Before we can start making new beats and synth rhythms we need to take a quick"
" dive into the basics of probability. This might sound daunting and complicate"
"d, but really it's just as simple as rolling a dice - honestly! When you take "
"a regular 6 sided board game dice and roll it what's actually happening? Well,"
" firstly you'll roll either a 1, 2, 3, 4, 5 or 6 with exactly the same chance "
"of getting any of the numbers. In fact, given that it's a 6 sided dice, on ave"
"rage (if you roll lots and lots of times) you'll throw a 1 every 6 throws. Thi"
"s means you have a 1 in 6 chance of throwing a 1. We can emulate dice rolls in"
" Sonic Pi with the fn `dice`. Let's roll one 8 times:"
msgstr ""

#: A.13-probabilistic-sequencer.md:25
#, no-wrap
msgid ""
"8.times do\n"
"  puts dice\n"
"  sleep 1\n"
"end"
msgstr ""

#: A.13-probabilistic-sequencer.md:32
msgid ""
"Notice how the log prints values between 1 and 6 just as if we'd rolled a real"
" dice ourselves."
msgstr ""

#: A.13-probabilistic-sequencer.md:35
#, fuzzy
msgid "Random Beats"
msgstr "Начальные Точки Случайных Чисел"

#: A.13-probabilistic-sequencer.md:37
#, fuzzy
msgid ""
"Now imagine you had a drum and every time you were about to hit it you rolled "
"a dice. If you rolled a 1, you hit the drum and if you rolled any other number"
" you didn't. You now have a probabilistic drum machine working with a probabil"
"ity of 1/6! Let's hear what that sounds like:"
msgstr "Послушаем, на что это похоже:"

#: A.13-probabilistic-sequencer.md:42
#, no-wrap
msgid ""
"live_loop :random_beat do\n"
"  sample :drum_snare_hard if dice == 1\n"
"  sleep 0.125\n"
"end"
msgstr ""

#: A.13-probabilistic-sequencer.md:50
msgid ""
"Let's quickly go over each line to make sure everything is very clear. First w"
"e create a new `live_loop` called `:random_beat` which will continually repeat"
" the two lines between `do` and `end`. The first of these lines is a call to `"
"sample` which will play a pre-recorded sound (the `:drum_snare_hard` sound in "
"this case). However, this line has a special conditional `if` ending. This mea"
"ns that the line will only be executed if the statement on the right hand side"
" of the `if` is `true`. The statement in this case is `dice == 1`. This calls "
"our `dice` function which, as we have seen, returns a value between 1 and 6. W"
"e then use the equality operator `==` to check to see if this value is `1`. If"
" it is `1`, then the statement resolves to `true` and our snare drum sounds, i"
"f it isn't `1` then the statement resolves to `false` and the snare is skipped"
". The second line simply waits for `0.125` seconds before rolling the dice aga"
"in."
msgstr ""

#: A.13-probabilistic-sequencer.md:65
msgid "Changing Probabilities"
msgstr ""

#: A.13-probabilistic-sequencer.md:67
msgid ""
"Those of you that have played role play games will be familiar with lots of st"
"rangely shaped dice with different ranges. For example there is the tetrahedro"
"n shaped dice which has 4 sides and even a 20 sided dice in the shape of a ico"
"sahedron. The number of sides on the dice changes the chance, or probability o"
"f rolling a 1. The fewer sides, the more likely you are to roll a 1 and the mo"
"re sides the less likely. For example, with a 4 sided dice, there's a one in 4"
" chance of rolling a 1 and with a 20 sided dice there's a one in 20 chance. Lu"
"ckily, Sonic Pi has the handy `one_in` fn for describing exactly this. Let's p"
"lay:"
msgstr ""

#: A.13-probabilistic-sequencer.md:77
#, no-wrap
msgid ""
"live_loop :different_probabilities do\n"
"  sample :drum_snare_hard if one_in(6)\n"
"  sleep 0.125\n"
"end"
msgstr ""

#: A.13-probabilistic-sequencer.md:84
msgid ""
"Start the live loop above and you'll hear the familiar random rhythm. However,"
" don't stop the code running. Instead, change the `6` to a different value suc"
"h as `2` or `20` and hit the `Run` button again. Notice that lower numbers mea"
"n the snare drum sounds more frequently and higher numbers mean the snare trig"
"gers fewer times. You're making music with probabilities!"
msgstr ""

#: A.13-probabilistic-sequencer.md:91
msgid "Combining Probabilities"
msgstr ""

#: A.13-probabilistic-sequencer.md:93
msgid ""
"Things get really exciting when you combine multiple samples being triggered w"
"ith different probabilities. For example:"
msgstr ""

#: A.13-probabilistic-sequencer.md:96
#, no-wrap
msgid ""
"live_loop :multi_beat do\n"
"  sample :elec_hi_snare if one_in(6)\n"
"  sample :drum_cymbal_closed if one_in(2)\n"
"  sample :drum_cymbal_pedal if one_in(3)\n"
"  sample :bd_haus if one_in(4)\n"
"  sleep 0.125\n"
"end"
msgstr ""

#: A.13-probabilistic-sequencer.md:106
msgid ""
"Again, run the code above and then start changing the probabilities to modify "
"the rhythm. Also, try changing the samples to create an entirely new feel. For"
" example try changing `:drum_cymbal_closed` to `:bass_hit_c` for extra bass!"
msgstr ""

#: A.13-probabilistic-sequencer.md:112
#, fuzzy
msgid "Repeatable Rhythms"
msgstr "Ритм"

#: A.13-probabilistic-sequencer.md:114
msgid ""
"Next, we can use our old friend `use_random_seed` to reset the random stream a"
"fter 8 iterations to create a regular beat. Type the following code to hear a "
"much more regular and repeating rhythm. Once you hear the beat, try changing t"
"he seed value from `1000` to another number. Notice how different numbers gene"
"rate different beats."
msgstr ""

#: A.13-probabilistic-sequencer.md:120
#, no-wrap
msgid ""
"live_loop :multi_beat do\n"
"  use_random_seed 1000\n"
"  8.times do\n"
"    sample :elec_hi_snare if one_in(6)\n"
"    sample :drum_cymbal_closed if one_in(2)\n"
"    sample :drum_cymbal_pedal if one_in(3)\n"
"    sample :bd_haus if one_in(4)\n"
"    sleep 0.125\n"
"  end\n"
"end"
msgstr ""

#: A.13-probabilistic-sequencer.md:133
msgid ""
"One thing I tend to do with this kind of structure is to remember which seeds "
"sound good and make a note of them. That way I can easily re-create my rhythms"
" in future practice sessions or performances."
msgstr ""

#: A.13-probabilistic-sequencer.md:139
msgid ""
"Finally, we can throw in some random bass to give it some nice melodic content"
". Notice that we can also use our newly discovered probabilistic sequencing me"
"thod on synths just as well as samples. Don't leave it at that though - tweak "
"the numbers and make your own track with the power of probabilities!"
msgstr ""

#: A.13-probabilistic-sequencer.md:145
#, no-wrap
msgid ""
"live_loop :multi_beat do\n"
"  use_random_seed 2000\n"
"  8.times do\n"
"    c = rrand(70, 130)\n"
"    n = (scale :e1, :minor_pentatonic).take(3).choose\n"
"    synth :tb303, note: n, release: 0.1, cutoff: c if rand < 0.9\n"
"    sample :elec_hi_snare if one_in(6)\n"
"    sample :drum_cymbal_closed if one_in(2)\n"
"    sample :drum_cymbal_pedal if one_in(3)\n"
"    sample :bd_haus, amp: 1.5 if one_in(4)\n"
"    sleep 0.125\n"
"  end\n"
"end"
msgstr ""

#: A.14-amplitude-modulation.md:1
#, fuzzy
msgid "A.14 Amplitude Modulation"
msgstr "Амплитуда"

#: A.14-amplitude-modulation.md:3
#, fuzzy
msgid "Amplitude Modulation"
msgstr "Амплитуда"

#: A.14-amplitude-modulation.md:5
msgid ""
"This month we're going to take a deep dive into one of Sonic Pi's most powerfu"
"l and flexible audio FX - the `:slicer`. By the end of this article you will h"
"ave learned how to manipulate the overall volume of parts of our live coded so"
"und in powerful new ways. This will allow you to create new rhythmic and timbr"
"al structures and broaden your sonic possibilities."
msgstr ""

#: A.14-amplitude-modulation.md:12
msgid "Slice that Amp"
msgstr ""

#: A.14-amplitude-modulation.md:14
msgid ""
"So, what does the `:slicer` FX actually do? One way to think about it is that "
"it's just like having someone play around with the volume control on your TV o"
"r home hi-fi. Let's take a look but first, listen to the deep growl of the fol"
"lowing code which triggers the `:prophet` synth:"
msgstr ""

#: A.14-amplitude-modulation.md:20
#, no-wrap
msgid ""
"synth :prophet, note: :e1, release: 8, cutoff: 70\n"
"synth :prophet, note: :e1 + 4, release: 8, cutoff: 80"
msgstr ""

#: A.14-amplitude-modulation.md:25
msgid "Now, let's pipe it through the `:slicer` FX:"
msgstr ""

#: A.14-amplitude-modulation.md:27
#, no-wrap
msgid ""
"\n"
"with_fx :slicer do\n"
"  synth :prophet, note: :e1, release: 8, cutoff: 70\n"
"  synth :prophet, note: :e1 + 4, release: 8, cutoff: 80\n"
"end"
msgstr ""
"\n"
"with_fx :slicer do\n"
"  synth :prophet, note: :e1, release: 8, cutoff: 70\n"
"  synth :prophet, note: :e1 + 4, release: 8, cutoff: 80\n"
"end"

#: A.14-amplitude-modulation.md:35
msgid ""
"Hear how the slicer acts like it's muting and unmuting the audio with a regula"
"r beat. Also, notice how the `:slicer` affects all the audio generated between"
" the `do`/`end` blocks. You can control the speed at which it turns the audio "
"on and off with the `phase:` opt which is short for phase duration. Its defaul"
"t value is `0.25` which means 4 times a second at the default BPM of 60. Let's"
" make it faster:"
msgstr ""

#: A.14-amplitude-modulation.md:42
#, no-wrap
msgid ""
"with_fx :slicer, phase: 0.125 do\n"
"  synth :prophet, note: :e1, release: 8, cutoff: 70\n"
"  synth :prophet, note: :e1 + 4, release: 8, cutoff: 80\n"
"end"
msgstr ""
"with_fx :slicer, phase: 0.125 do\n"
"  synth :prophet, note: :e1, release: 8, cutoff: 70\n"
"  synth :prophet, note: :e1 + 4, release: 8, cutoff: 80\n"
"end"

#: A.14-amplitude-modulation.md:49
msgid ""
"Now, play with different `phase:` durations yourself. Try longer and shorter v"
"alues. See what happens when you choose a really short value. Also, try differ"
"ent synths such as `:beep` or `:dsaw` and different notes. Take a look at the "
"following diagram to see how different `phase:` values change the number of am"
"plitude changes per beat."
msgstr ""

#: A.14-amplitude-modulation.md:56
msgid ""
"![Phase Durations](../images/tutorial/articles/A.14-amplitude-modulation/slice"
"r_phase_durations.png)"
msgstr ""
"![Длительность фазы](../images/tutorial/articles/A.14-amplitude-modulation/sli"
"cer_phase_durations.png)"

#: A.14-amplitude-modulation.md:58
msgid ""
"Phase duration is the length of time for one on/off cycle. Therefore smaller v"
"alues will make the FX switch on and off much faster than larger values. Good "
"values to start playing with are `0.125`, `0.25`, `0.5` and `1`."
msgstr ""

#: A.14-amplitude-modulation.md:64
#, fuzzy
msgid "Control Waves"
msgstr "Контроль волн"

#: A.14-amplitude-modulation.md:66
msgid ""
"By default, the `:slicer` FX uses a square wave to manipulate the amplitude th"
"rough time. This is why we hear the amplitude on for a period, then immediatel"
"y off for a period, then back on again. It turns out that the square wave is j"
"ust one of 4 different control waves that are supported by `:slicer`. The othe"
"rs are saw, triangle and (co)sine. Take a look at the diagram below to see wha"
"t these look like. We can also hear what they sound like. For example, the fol"
"lowing code uses (co)sine as the control wave. Hear how the sound doesn't turn"
" on and off abruptly but instead smoothly fades in and out:"
msgstr ""

#: A.14-amplitude-modulation.md:76
#, no-wrap
msgid ""
"with_fx :slicer, phase: 0.5, wave: 3 do\n"
"  synth :dsaw, note: :e3, release: 8, cutoff: 120\n"
"  synth :dsaw, note: :e2, release: 8, cutoff: 100\n"
"end"
msgstr ""
"with_fx :slicer, phase: 0.5, wave: 3 do\n"
"  synth :dsaw, note: :e3, release: 8, cutoff: 120\n"
"  synth :dsaw, note: :e2, release: 8, cutoff: 100\n"
"end"

#: A.14-amplitude-modulation.md:83
msgid ""
"Have a play with the different wave forms by changing the `wave:` opt to `0` f"
"or saw, `1` for square, `2` for triangle and `3` for sine. See how different w"
"aves sound with different `phase:` opts too."
msgstr ""

#: A.14-amplitude-modulation.md:87
msgid ""
"Each of these waves can be inverted with the `invert_wave:` opt which flips it"
" on the y axis. For example, in a single phase the saw wave typically starts h"
"igh, and slowly goes down before jumping back to the top. With `invert_wave: 1"
"` it will start low and slowly go up before jumping back down again. Additiona"
"lly, the control wave can be started at different points with the `phase_offse"
"t:` opt which should be a value between `0` and `1`. By playing around with `p"
"hase:`, `wave:`, `invert_wave:` and `phase_offset` opts you can dramatically c"
"hange how the amplitude is modified through time."
msgstr ""

#: A.14-amplitude-modulation.md:97
msgid ""
"![Phase Durations](../images/tutorial/articles/A.14-amplitude-modulation/slice"
"r_control_waves.png)"
msgstr ""
"![Длительность фаз](../images/tutorial/articles/A.14-amplitude-modulation/slic"
"er_control_waves.png)"

#: A.14-amplitude-modulation.md:100
#, fuzzy
msgid "Setting your levels"
msgstr "Устанавливаем собственные уровни"

#: A.14-amplitude-modulation.md:102
msgid ""
"By default, `:slicer` switches between amplitude values `1` (fully loud) and `"
"0` (silent). This can be changed with the `amp_min:` and `amp_max:` opts. You "
"can use this alongside the sine wave setting to create a simple tremolo effect"
":"
msgstr ""

#: A.14-amplitude-modulation.md:107
#, no-wrap
msgid ""
"with_fx :slicer, amp_min: 0.25, amp_max: 0.75, wave: 3, phase: 0.25 do\n"
"  synth :saw, release: 8\n"
"end"
msgstr ""
"with_fx :slicer, amp_min: 0.25, amp_max: 0.75, wave: 3, phase: 0.25 do\n"
"  synth :saw, release: 8\n"
"end"

#: A.14-amplitude-modulation.md:113
msgid ""
"This is just like grabbing the volume knob on your hi-fi and moving it up and "
"down just a little so the sound 'wobbles' in and out."
msgstr ""

#: A.14-amplitude-modulation.md:117
msgid "Probabilities"
msgstr "Вероятности"

#: A.14-amplitude-modulation.md:119
msgid ""
"One of `:slicer`'s powerful features is its ability to use probability to choo"
"se whether or not to turn the slicer on or off. Before the `:slicer` FX starts"
" a new phase it rolls a dice and based on the result either uses the selected "
"control wave or keeps the amplitude off. Let's take a listen:"
msgstr ""

#: A.14-amplitude-modulation.md:125
#, no-wrap
msgid ""
"with_fx :slicer, phase: 0.125, probability: 0.6  do\n"
"  synth :tb303, note: :e1, cutoff_attack: 8, release: 8\n"
"  synth :tb303, note: :e2, cutoff_attack: 4, release: 8\n"
"  synth :tb303, note: :e3, cutoff_attack: 2, release: 8\n"
"end"
msgstr ""
"with_fx :slicer, phase: 0.125, probability: 0.6  do\n"
"  synth :tb303, note: :e1, cutoff_attack: 8, release: 8\n"
"  synth :tb303, note: :e2, cutoff_attack: 4, release: 8\n"
"  synth :tb303, note: :e3, cutoff_attack: 2, release: 8\n"
"end"

#: A.14-amplitude-modulation.md:133
msgid ""
"Hear how we now have an interesting rhythm of pulses. Try changing the `probab"
"ility:` opt to a different value between `0` and `1`. Values closer to `0` wil"
"l have more space between each sound due to the likelihood of the sound being "
"triggered being much lower."
msgstr ""

#: A.14-amplitude-modulation.md:138
msgid ""
"Another thing to notice is that the probability system in the FX is just like "
"the randomisation system accessible via fns such as `rand` and `shuffle`. They"
" are both completely deterministic. This means that each time you hit Run you'"
"ll hear exactly the same rhythm of pulses for a given probability. If you woul"
"d like to change things around you can use the `seed:` opt to select a differe"
"nt starting seed. This works exactly the same as `use_random_seed` but only af"
"fects that particular FX."
msgstr ""

#: A.14-amplitude-modulation.md:146
msgid ""
"Finally, you can change the 'resting' position of the control wave when the pr"
"obability test fails from `0` to any other position with the `prob_pos:` opt:"
msgstr ""

#: A.14-amplitude-modulation.md:150
#, no-wrap
msgid ""
"with_fx :slicer, phase: 0.125, probability: 0.6, prob_pos: 1  do\n"
"  synth :tb303, note: :e1, cutoff_attack: 8, release: 8\n"
"  synth :tb303, note: :e2, cutoff_attack: 4, release: 8\n"
"  synth :tb303, note: :e3, cutoff_attack: 2, release: 8\n"
"end"
msgstr ""
"with_fx :slicer, phase: 0.125, probability: 0.6, prob_pos: 1  do\n"
"  synth :tb303, note: :e1, cutoff_attack: 8, release: 8\n"
"  synth :tb303, note: :e2, cutoff_attack: 4, release: 8\n"
"  synth :tb303, note: :e3, cutoff_attack: 2, release: 8\n"
"end"

#: A.14-amplitude-modulation.md:158
msgid "Slicing Beats"
msgstr "\"Нарезаем\" биты"

#: A.14-amplitude-modulation.md:160
msgid "One really fun thing to do is to use `:slicer` to chop a drum beat in and out:"
msgstr ""

#: A.14-amplitude-modulation.md:163
#, no-wrap
msgid ""
"with_fx :slicer, phase: 0.125 do\n"
"  sample :loop_mika\n"
"end"
msgstr ""
"with_fx :slicer, phase: 0.125 do\n"
"  sample :loop_mika\n"
"end"

#: A.14-amplitude-modulation.md:169
msgid ""
"This allows us to take any sample and create new rhythmical possibilites which"
" is a lot of fun. However, one thing to be careful about is to make sure that "
"the tempo of the sample matches the current BPM in Sonic Pi otherwise the slic"
"ing will sound totally off. For example, try swapping `:loop_mika` with the `l"
"oop_amen` sample to hear how bad this can sound when the tempos don't align."
msgstr ""

#: A.14-amplitude-modulation.md:176
msgid "Changing tempo"
msgstr "Изменяем темп"

#: A.14-amplitude-modulation.md:178
msgid ""
"As we have already seen, changing the default BPM with `use_bpm` will make all"
" the sleep times and synth envelope durations grow or shrink to match the beat"
". The `:slicer` FX honours this too, as the `phase:` opt is actually measured "
"in beats not seconds. We can therefore fix the issue with `loop_amen` above by"
" changing the BPM to match the sample:"
msgstr ""

#: A.14-amplitude-modulation.md:184
#, no-wrap
msgid ""
"use_sample_bpm :loop_amen\n"
"with_fx :slicer, phase: 0.125 do\n"
"  sample :loop_amen\n"
"end"
msgstr ""
"use_sample_bpm :loop_amen\n"
"with_fx :slicer, phase: 0.125 do\n"
"  sample :loop_amen\n"
"end"

#: A.14-amplitude-modulation.md:194
msgid ""
"Let's apply all these ideas into a final example that only uses the `:slicer` "
"FX to create an interesting combination. Go ahead, start changing it and make "
"it into your own piece!"
msgstr ""

#: A.14-amplitude-modulation.md:198
#, no-wrap
msgid ""
"live_loop :dark_mist do\n"
"  co = (line 70, 130, steps: 8).tick\n"
"  with_fx :slicer, probability: 0.7, prob_pos: 1 do\n"
"    synth :prophet, note: :e1, release: 8, cutoff: co\n"
"  end\n"
"  \n"
"  with_fx :slicer, phase: [0.125, 0.25].choose do\n"
"    sample :guit_em9, rate: 0.5\n"
"  end\n"
"  sleep 8\n"
"end\n"
"live_loop :crashing_waves do\n"
"  with_fx :slicer, wave: 0, phase: 0.25 do\n"
"    sample :loop_mika, rate: 0.5\n"
"  end\n"
"  sleep 16\n"
"end"
msgstr ""
"live_loop :dark_mist do\n"
"  co = (line 70, 130, steps: 8).tick\n"
"  with_fx :slicer, probability: 0.7, prob_pos: 1 do\n"
"    synth :prophet, note: :e1, release: 8, cutoff: co\n"
"  end\n"
"  \n"
"  with_fx :slicer, phase: [0.125, 0.25].choose do\n"
"    sample :guit_em9, rate: 0.5\n"
"  end\n"
"  sleep 8\n"
"end\n"
"live_loop :crashing_waves do\n"
"  with_fx :slicer, wave: 0, phase: 0.25 do\n"
"    sample :loop_mika, rate: 0.5\n"
"  end\n"
"  sleep 16\n"
"end"

#: A.15-performance.md:1
msgid "A.15 Five Live Coding Techniques"
msgstr "A.15 Пять техник лайв-кодинга"

#: A.15-performance.md:3
msgid "Five Live Coding Techniques"
msgstr "Пять техник лайв-кодинга"

#: A.15-performance.md:5
msgid ""
"In this month's Sonic Pi tutorial we're going to take a look at how you can st"
"art treating Sonic Pi like a real instrument. We therefore need to start think"
"ing of code in a completely different way. Live coders think of code in a simi"
"lar way to how violinists think of their bow. In fact, just like a violinist c"
"an apply various bowing techniques to create different sounds (long slow motio"
"ns vs short fast hits) we will explore five of the basic live coding technique"
"s that Sonic Pi enables. By the end of this article you'll be able to start pr"
"acticing for your own live coded performances."
msgstr ""

#: A.15-performance.md:15
msgid "1. Memorise the Shortcuts"
msgstr ""

#: A.15-performance.md:17
msgid ""
"The first tip to live coding with Sonic Pi is to start using the shortcuts. Fo"
"r example, instead of wasting valuable time reaching for the mouse, moving it "
"over to the Run button and clicking, you can simply press `alt` and `r` at the"
" same time which is much faster and keeps your fingers at the keyboard ready f"
"or the next edit. You can find out the shortcuts for the main buttons at the t"
"op by hovering the mouse over them. See section 10.2 of the built-in tutorial "
"for the full list of shortcuts."
msgstr ""

#: A.15-performance.md:26
msgid ""
"When performing, one fun thing to do is to add a bit of flair with your arm mo"
"tion when hitting shortcuts. For example, it's often good to communicate to th"
"e audience when you're about to make a change - so embellish your movement whe"
"n hitting `alt-r` just like a guitarist would do when hitting a big power chor"
"d."
msgstr ""

#: A.15-performance.md:32
msgid "2. Manually Layer your Sounds"
msgstr ""

#: A.15-performance.md:34
msgid ""
"Now you can trigger code instantly with the keyboard, you can instantly apply "
"this skill for our second technique which is to layer your sounds manually. In"
"stead of 'composing' using lots of calls to `play`, and `sample` separated by "
"calls to `sleep` we will have one call to `play` which we will manually trigge"
"r using `alt-r`. Let's try it. Type the following code into a fresh buffer:"
msgstr ""

#: A.15-performance.md:41
#, no-wrap
#, fuzzy
msgid "synth :tb303, note: :e2 - 0, release: 12, cutoff: 90"
msgstr "synth :prophet, note: :e1, release: 8, cutoff: 100"

#: A.15-performance.md:46
msgid ""
"Now, hit `Run` and whilst the sound is playing, modify the code in order to dr"
"op down four notes by changing it to the following:"
msgstr ""

#: A.15-performance.md:50
#, no-wrap
#, fuzzy
msgid "synth :tb303, note: :e2 - 4, release: 12, cutoff: 90"
msgstr "synth :prophet, note: :e1, release: 8, cutoff: 100"

#: A.15-performance.md:55
msgid ""
"Now, hit `Run` again, to hear both sounds playing at the same time. This is be"
"cause Sonic Pi's `Run` button doesn't wait for any previous code to finish, bu"
"t instead starts the code running at the same time. This means you can easily "
"layer lots of sounds manually with minor or major modifications between each t"
"rigger. For example, try changing both the `note:` and the `cutoff:` opts and "
"then re-trigger."
msgstr ""

#: A.15-performance.md:63
msgid "You can also try this technique with long abstract samples. For example:"
msgstr "Также вы можете опробовать эту технику с длинными абстрактными сэмплами:"

#: A.15-performance.md:65
#, no-wrap
#, fuzzy
msgid "sample :ambi_lunar_land, rate: 1"
msgstr "sample :ambi_lunar_land"

#: A.15-performance.md:69
msgid ""
"Try starting the sample off, and then progressively halving the `rate:` opt be"
"tween hitting `Run` from `1` to `0.5` to `0.25` to `0.125` and then even try s"
"ome negative values such as `-0.5`. Layer the sounds together and see where yo"
"u can take it. Finally, try adding some FX."
msgstr ""

#: A.15-performance.md:74
msgid ""
"When performing, working with simple lines of code in this way means that an a"
"udience new to Sonic Pi has a good chance to follow what you're doing and rela"
"te the code that they can read to the sounds they are hearing."
msgstr ""

#: A.15-performance.md:80
#, fuzzy
msgid "3. Master Live Loops"
msgstr "Живые циклы"

#: A.15-performance.md:82
msgid ""
"When working with more rhythmic music, it can often be hard to manually trigge"
"r everything and keep good time. Instead, it is often better to use a `live_lo"
"op`. This provides repetition for your code whilst also giving the ability to "
"edit the code for the next time round the loop. They also will run at the same"
" time as other `live_loop`s which means you can layer them together both with "
"each other and manual code triggers. Take a look at section 9.2 of the built-i"
"n tutorial for more information about working with live loops."
msgstr ""

#: A.15-performance.md:91
msgid ""
"When performing, remember to make use of `live_loop`'s `sync:` opt to allow yo"
"u to recover from accidental runtime mistakes which stop the live loop running"
" due to an error. If you already have the `sync:` opt pointing to another vali"
"d `live_loop`, then you can quickly fix the error and re-run the code to re-st"
"art things without missing a beat."
msgstr ""

#: A.15-performance.md:97
msgid "4. Use the Master Mixer"
msgstr ""

#: A.15-performance.md:99
msgid ""
"One of Sonic Pi's best kept secrets is that it has a master mixer through whic"
"h all sound flows. This mixer has both a low pass filter and a high pass filte"
"r built-in, so you can easily perform global modifications to the sound. The m"
"aster mixer's functionality can be accessed via the fn `set_mixer_control!`. F"
"or example, whilst some code is running and making sound, enter this into a sp"
"are buffer and hit `Run`:"
msgstr ""

#: A.15-performance.md:107
msgid "` set_mixer_control! lpf: 50 `"
msgstr "` set_mixer_control! lpf: 50 `"

#: A.15-performance.md:111
msgid ""
"After you run this code, all existing and new sounds will have a low pass filt"
"er applied to them and will therefore sound more muffled. Note that this means"
" that the new mixer values stick until they are changed again. However, if you"
" want, you can always reset the mixer back to its default state with `reset_mi"
"xer!`. Some of the currently supported opts are: `pre_amp:`, `lpf:` `hpf:`, an"
"d `amp:`. For the full list, see the built-in docs for `set_mixer_control!`."
msgstr ""

#: A.15-performance.md:119
msgid ""
"Use the mixer's `*_slide` opts to slide one or many opts values over time. For"
" example, to slowly slide the mixer's low pass filter down from the current va"
"lue to 30, use the following:"
msgstr ""

#: A.15-performance.md:123
#, no-wrap
msgid "set_mixer_control! lpf_slide: 16, lpf: 30"
msgstr "set_mixer_control! lpf_slide: 16, lpf: 30"

#: A.15-performance.md:127
msgid "You can then slide quickly back to a high value with:"
msgstr "Затем вы можете быстро перескочить обратно к высокому значению:"

#: A.15-performance.md:129
#, no-wrap
msgid "set_mixer_control! lpf_slide: 1, lpf: 130"
msgstr "set_mixer_control! lpf_slide: 1, lpf: 130"

#: A.15-performance.md:133
msgid ""
"When performing, it's often useful to keep a buffer free for working with the "
"mixer like this."
msgstr ""

#: A.15-performance.md:136
msgid "5. Practice"
msgstr "5. Практика"

#: A.15-performance.md:138
msgid ""
"The most important technique for live coding is practice. The most common attr"
"ibute across professional musicians of all kinds is that they practice playing"
" with their instruments - often for many hours a day. Practice is just as impo"
"rtant for a live coder as a guitarist. Practice allows your fingers to memoris"
"e certain patterns and common edits so you can type and work with them more fl"
"uently. Practice also gives you opportunities to explore new sounds and code c"
"onstructs."
msgstr ""

#: A.15-performance.md:146
msgid ""
"When performing, you'll find the more practice you do, the easier it will be f"
"or you to relax into the gig. Practice will also give you a wealth of experien"
"ce to draw from. This can help you understand which kinds of modifications wil"
"l be interesting and also work well with the current sounds."
msgstr ""

#: A.15-performance.md:154
msgid ""
"This month, instead of giving you a final example that combines all the things"
" discussed, let's part by setting down a challenge. See if you can spend a wee"
"k practicing one of these ideas every day. For example, one day practice manua"
"l triggers, the next do some basic `live_loop` work and the following day play"
" around with the master mixer. Then repeat. Don't worry if things feel slow an"
"d clunky at first - just keep practicing and before you know it you'll be live"
" coding for a real audience."
msgstr ""

#: A.16-practice.md:1
msgid "A.16 How to Practice Live Coding"
msgstr "А. 16 Как практиковаться в лайв-кодинге"

#: A.16-practice.md:3
msgid "8 Tips for Live Coding Practice"
msgstr "8 Советов, которые помогут вам при лайв-кодинге"

#: A.16-practice.md:5
msgid ""
"Last month we took a look at five important techniques for mastering live codi"
"ng - in other words, we explored how we could use Sonic Pi to approach code in"
" the same way we would approach a musical instrument. One of the important con"
"cepts that we discussed was practice. This month we're going to take a deeper "
"dive into understanding why live coding practice is important and how you migh"
"t start."
msgstr ""

#: A.16-practice.md:13
msgid "Practice regularly"
msgstr "Регулярно практикуйтесь"

#: A.16-practice.md:15
msgid ""
"The most important piece of advice is to make sure you practice regularly. As "
"a rule I typically practice for 1-2 hours a day, but 20 mins is just fine when"
" you're starting out. Little but often is what you're aiming for - so if you c"
"an only manage 10 minutes, that's a great start."
msgstr ""

#: A.16-practice.md:21
msgid ""
"Practice tip #1 - start to develop a practice routine. Find a nice time in the"
" day that works for you and try and practice at that time as many days of the "
"week as you can. Before long you'll be looking forward to your regular session"
"."
msgstr ""

#: A.16-practice.md:27
msgid "Learn to Touch Type"
msgstr "Научитесь слепому набору"

#: A.16-practice.md:29
msgid ""
"If you watch a professional musician performing on stage you'll likely notice "
"a few things. Firstly, when they play they don't stare at their instrument. Th"
"eir fingers, arms and bodies know which keys to press, strings to pluck or dru"
"ms to hit without them having to think about it too much. This is known as \"mu"
"scle memory\" and although it might sound like something only professionals can"
" do - it's just the same as when you first learned to walk or ride a bike - pr"
"acticing through repetition. Live coders use muscle memory to free their minds"
" from having to think about where to move their fingers so they can focus on t"
"he music. This is called touch-typing - typing without having to look at the k"
"eyboard."
msgstr ""

#: A.16-practice.md:41
msgid ""
"Practice tip #2 - learn how to touch type. There are many apps, websites and e"
"ven games which can help you achieve this. Find one you like the look of and s"
"tick at it until you can code without looking down."
msgstr ""
"Практический совет #2 - тренируйтесь слепой печати. Есть множество приложений,"
" вебсайтов и даже игр, которые могут помочь вам в этом деле. Найдите то, котор"
"ое вам нравится и поупражняйтесь в нём, пока у вас не получится набирать текст"
" не глядя."

#: A.16-practice.md:46
msgid "Code whilst standing"
msgstr "Программируйте стоя"

#: A.16-practice.md:48
msgid ""
"The body of a musician is conditioned for playing their instrument. For exampl"
"e, a trumpet player needs to be able to blow hard, a guitar player needs to be"
" able to grip the fretboard with strength and a drummer needs to be able to co"
"ntinually hit the drums for long periods of time. So, what's physical about li"
"ve coding? Just like DJs, live coders typically perform whilst standing up and"
" some even dance whilst they code! If you practice live coding whilst sitting "
"at a desk and then have to get up and stand at a gig, you'll likely find the d"
"ifference very difficult and frustrating."
msgstr ""

#: A.16-practice.md:58
msgid ""
"Practice tip #3 - stand whilst you practice. The easiest way to do this is to "
"use a standing height desk. However, if like me you don't have one at home, th"
"ere's a couple of low-fi options. The approach I take is to use an ironing boa"
"rd which happens to work rather well. Another is to stack some boxes or large "
"books on a normal desk and place your keyboard on top of that. Also, make sure"
" you stretch before you start practicing and try and dance a little during the"
" session. Remember, nobody is watching you, so have fun and you'll feel much m"
"ore natural on stage."
msgstr ""

#: A.16-practice.md:68
msgid "Practice setting up"
msgstr "Практикуйтесь в развёртке оборудования"

#: A.16-practice.md:70
msgid ""
"Most instruments require some assembly and tuning before they can be played. U"
"nless you're a rockstar with a bus full of roadies, you'll have to set up your"
" own instrument before your gig. This is often a stressful time and it is easy"
" for problems to occur. One way to help with this is to incorporate the setup "
"process into your practice sessions."
msgstr ""

#: A.16-practice.md:76
msgid ""
"Practice tip #4 - treat setting up as an important part of your practice. For "
"example, have a box or bag that you can keep your Raspberry Pi and keyboard in"
" etc. Before each practice session, take out all the parts, connect everything"
", and work through the boot process until you have Sonic Pi running and can ma"
"ke sounds. Once you've finished practicing, take the time to carefully pack ev"
"erything away afterwards. This may take some time at first, but before long yo"
"u'll be able to setup and pack everything away incredibly quickly without havi"
"ng to think about it."
msgstr ""

#: A.16-practice.md:87
msgid "Experiment Musically"
msgstr "Проводите множество музыкальных экспериментов"

#: A.16-practice.md:89
msgid ""
"Once you've set up and are ready to start making music, you might find yoursel"
"f struggling to know where to start. One problem many people face is that they"
" might have a good idea of the kinds of sounds they want to make, but are frus"
"trated that they can't produce them. Some people don't even know what kind of "
"sounds they want to make! The first thing to do is not to worry - this is very"
" common and happens to every musician - even if they've been practicing for a "
"long time. It is much more important to be making sounds you don't like than n"
"ot making any sounds at all."
msgstr ""

#: A.16-practice.md:99
msgid ""
"Practice tip #5 - spend time making sounds and music you don't like. Try to ma"
"ke time to explore new sounds and ideas. Don't worry that it might sound terri"
"ble if it's not the style you're looking for. When you're experimenting like t"
"his you increase the chance of stumbling over a sound or combination of sounds"
" which you love! Even if 99% of the sounds you make are bad, that 1% might be "
"the riff or intro to your new track. Forget the things you don't like and reme"
"mber the parts you do. This is even easier when you're making music with code "
"- just hit save!"
msgstr ""

#: A.16-practice.md:110
msgid "Hear the Code"
msgstr "Учитесь слышать код"

#: A.16-practice.md:112
msgid ""
"Many musicians can look at a musical score and hear the music in their head wi"
"thout having to play it. This is a very useful skill and it's well worth incor"
"porating into your live coding practice sessions. The imporant point is to be "
"able to have some understanding of what the code is going to sound like. You d"
"on't need to be able to hear it exactly in your head, but instead it's useful "
"to know if the code is going to be fast, slow, loud, rhythmic, melodic, random"
", etc. The final goal is then to be able to reverse this process - to be able "
"to hear music in your head and know what code to write to make it. It may take"
" you a long time to master this, but once you do, you'll be able to improvise "
"on stage and express your ideas fluently."
msgstr ""

#: A.16-practice.md:124
msgid ""
"Practice tip #6 - write some code into Sonic Pi but don't hit the Run button. "
"Instead, try to imagine what sound it is going to produce. Then, hit Run, list"
"en, and think about what you got right and what you didn't. Keep repeating thi"
"s until it become a natural part of your coding process. When I practice I nor"
"mally have a good idea of what the code will sound like. However, I still am o"
"ccasionally surprised, and then I'll stop and spend some time thinking about w"
"hy I was wrong. Each time this happens, I learn new tricks which allow me to e"
"xpress myself in new ways."
msgstr ""

#: A.16-practice.md:134
msgid "Remove all distractions"
msgstr "Устраните все отвлекающие факторы"

#: A.16-practice.md:136
msgid ""
"A common problem when practicing is to become distracted with other things. Pr"
"acticing is hard and requires real discipline regardless of the kind of music "
"you're making - from jazz to classical to EDM. If you're struggling to get sta"
"rted or make progress, it's often too easy to hop on social media, or look som"
"ething up on the internet etc. If you've set yourself a target of 20 minutes o"
"f practice, it's important to try and spend all that time being as productive "
"as possible."
msgstr ""

#: A.16-practice.md:144
msgid ""
"Practice tip #7 - before you start practicing remove as many distractions as p"
"ossible. For example, disconnect from the internet, put your phone in another "
"room and try to practice in a quiet place where you're unlikely to be disturbe"
"d. Try to focus on coding music and you can return to your distractions when y"
"ou've finished."
msgstr ""

#: A.16-practice.md:151
msgid "Keep a practice diary"
msgstr "Ведите дневник практики"

#: A.16-practice.md:153
msgid ""
"When you are practicing, you'll often find your mind is full of new exciting i"
"deas - new musical directions, new sounds to try out, new functions to write, "
"etc. These ideas are often so interesting that you might stop what you're doin"
"g and start working on the idea. This is another form of distraction!"
msgstr ""

#: A.16-practice.md:159
msgid ""
"Practice tip #8 - keep a practice diary by your keyboard. When you get an exci"
"ting new idea, temporarily pause your practice session, quickly jot the idea d"
"own, then forget about it and carry on practicing. You can then spend some qua"
"lity time thinking about and working on your ideas after you've finished pract"
"icing."
msgstr ""

#: A.16-practice.md:168
msgid ""
"Try to establish a practice routine which incorporates as many of these ideas "
"as possible. Try to keep the sessions as fun as possible but be aware that som"
"e practice sessions will be hard and feel a little like work. However, it will"
" all be worth it once you've created your first piece or given your first perf"
"ormance. Remember, practice is the key to success!"
msgstr ""

#: A.17-sample-stretching.md:1
msgid "A.17 Sample Stretching"
msgstr ""

#: A.17-sample-stretching.md:3
#, fuzzy
msgid "Sample Stretching"
msgstr "Растяжение Ритмов"

#: A.17-sample-stretching.md:5
msgid ""
"When people discover Sonic Pi, one of the first things they learn is how simpl"
"e it is to play pre-recorded sounds using the `sample` function. For example, "
"you can play an industrial drum loop, hear the sound of a choir or even listen"
" to a vinyl scratch all via a single line of code. However, many people don't "
"realise that you can actually vary the speed that the sample is played back at"
" for some powerful effects and a whole new level of control over your recorded"
" sounds. So, fire up a copy of Sonic Pi and let's get started stretching some "
"samples!"
msgstr ""

#: A.17-sample-stretching.md:14
#, fuzzy
msgid "Slowing Samples Down"
msgstr "Сэмплы"

#: A.17-sample-stretching.md:16
msgid "To modify the playback rate of a sample we need to use the `rate:` opt:"
msgstr ""

#: A.17-sample-stretching.md:18
#, no-wrap
#, fuzzy
msgid "sample :guit_em9, rate: 1"
msgstr "sample :guit_em9, rate: 0.5"

#: A.17-sample-stretching.md:20
msgid ""
"If we specify a `rate:` of `1` then the sample is played back at the normal ra"
"te. If we want to play it back at half speed we simply use a `rate:` of `0.5`:"
msgstr ""

#: A.17-sample-stretching.md:27
#, fuzzy
msgid ""
"Notice that this has two effects on the audio. Firstly the sample sounds lower"
" in pitch and secondly it takes twice as long to play back (see the sidebar fo"
"r an explanation of why this is the case). We can even choose lower and lower "
"rates moving towards `0`, so a `rate:` of `0.25` is a quarter speed, `0.1` is "
"a tenth of the speed, etc. Try playing with some low rates and see if you can "
"turn the sound into a low rumble."
msgstr "choose"

#: A.17-sample-stretching.md:34
#, fuzzy
msgid "Speeding Samples Up"
msgstr "Сэмплы"

#: A.17-sample-stretching.md:36
msgid ""
"In addition to making the sound longer and lower using a small rate, we can us"
"e higher rates to make the sound shorter and higher. Let's play with a drum lo"
"op this time. First, take a listen to how it sounds at the default rate of `1`"
":"
msgstr ""

#: A.17-sample-stretching.md:41
#, no-wrap
#, fuzzy
msgid "sample :loop_amen, rate: 1"
msgstr "sample :loop_amen, rate: -1"

#: A.17-sample-stretching.md:44
msgid "Now, let's speed it up a little:"
msgstr ""

#: A.17-sample-stretching.md:48
msgid ""
"Ha! We just moved musical genres from old-skool techno to jungle. Notice how t"
"he pitch of each drum hit is higher as well as how the whole rhythm speeds up."
" Now, try even higher rates and see how high and short you can make the drum l"
"oop. For example, if you use a rate of `100`, the drum loop turns into a click"
"!"
msgstr ""

#: A.17-sample-stretching.md:54
msgid "Reverse Gear"
msgstr ""

#: A.17-sample-stretching.md:56
msgid ""
"Now, I'm sure many of you are thinking the same thing right now... \"what if yo"
"u use a negative number for the rate?\". Great question! Let's think about this"
" for a moment. If our `rate:` opt signifies the speed with which the sample is"
" played back, `1` being normal speed, `2` being double speed, `0.5` being half"
" speed, `-1` must mean backwards! Let's try it on a snare. First, play it back"
" at the normal rate:"
msgstr ""

#: A.17-sample-stretching.md:63
#, no-wrap
msgid "sample :elec_filt_snare, rate: 1"
msgstr ""

#: A.17-sample-stretching.md:65
#, fuzzy
msgid "Now, play it backwards:"
msgstr "Круто! Он играет задом-наперед!"

#: A.17-sample-stretching.md:67
#, no-wrap
msgid "sample :elec_filt_snare, rate: -1"
msgstr ""

#: A.17-sample-stretching.md:69
msgid ""
"Of course, you can play it backwards twice as fast with a rate of `-2` or back"
"wards at half speed with a rate of `-0.5`. Now, play around with different neg"
"ative rates and have fun. It's particularly amusing with the `:misc_burp` samp"
"le!"
msgstr ""

#: A.17-sample-stretching.md:75
msgid "Sample, Rate and Pitch [Sidebar]"
msgstr ""

#: A.17-sample-stretching.md:77
msgid ""
"One of the effects of rate modification on samples is that faster rates result"
" in the sample sounding higher in pitch and slower rates result in the sample "
"sounding lower in pitch. Another place you may have heard this effect in every"
" day life is when you're cycling or driving past a beeping pedestrian crossing"
" - as you're heading towards the sound source the pitch is higher than when yo"
"u're moving away from the sound - the so-called Doppler effect. Why is this?"
msgstr ""

#: A.17-sample-stretching.md:85
msgid ""
"Let's consider a simple beep which is represented by a sine wave. If we use an"
" oscilloscope to plot a beep, we'll see something like Figure A. If we plot a "
"beep an octave higher, we'll see Figure B and an octave lower will look like F"
"igure C. Notice that the waves of higher notes are more compact and the waves "
"of lower notes are more spread out."
msgstr ""

#: A.17-sample-stretching.md:91
msgid ""
"A sample of a beep is nothing more than a lot of numbers (x, y, coordinates) w"
"hich when plotted onto a graph will re-draw the original curves. See figure D "
"where each circle represents a coordinate. To turn the coordinates back into a"
"udio, the computer works through each x value and sends the corresponding y va"
"lue to the speakers. The trick here is that the rate at which the computer wor"
"ks through the x numbers does not have to be the same as the rate with which t"
"hey were recorded. In other words, the space (representing an amount of time) "
"between each circle can be stretched or compressed. So, if the computer walks "
"through the x values faster than the original rate, it will have the effect of"
" squashing the circles closer together which will result in a higher sounding "
"beep. It will also make the beep shorter as we will work through all the circl"
"es faster. This is shown in Figure E."
msgstr ""

#: A.17-sample-stretching.md:105
msgid ""
"Finally, one last thing to know is that a mathematician called Fourier proved "
"that any sound is actually lots and lots of sine waves all combined together. "
"Therefore, when we compress and stretch any recorded sound we're actually stre"
"tching and compressing many sine waves all at the same time in exactly this ma"
"nner."
msgstr ""

#: A.17-sample-stretching.md:111
msgid "Pitch Bending"
msgstr ""

#: A.17-sample-stretching.md:113
msgid ""
"As we've seen, using a faster rate will make the sound higher in pitch and a s"
"lower rate will make the sound lower in pitch. A very simple and useful trick "
"is to know that doubling the rate actually results in the pitch being an octav"
"e higher and inversely halving the rate results in the pitch being an octave l"
"ower. This means that for melodic samples, playing it alongside itself at doub"
"le/half rates actually sounds rather nice:"
msgstr ""

#: A.17-sample-stretching.md:121
#, no-wrap
msgid ""
"sample :bass_trance_c, rate: 1\n"
"sample :bass_trance_c, rate: 2\n"
"sample :bass_trance_c, rate: 0.5"
msgstr ""
"sample :bass_trance_c, rate: 1\n"
"sample :bass_trance_c, rate: 2\n"
"sample :bass_trance_c, rate: 0.5"

#: A.17-sample-stretching.md:125
msgid ""
"However, what if we just want to alter the rate such that the pitch goes up on"
"e semitone (one note up on a piano)? Sonic Pi makes this very easy via the `rp"
"itch:` opt:"
msgstr ""

#: A.17-sample-stretching.md:129
#, no-wrap
msgid ""
"sample :bass_trance_c\n"
"sample :bass_trance_c, rpitch: 3\n"
"sample :bass_trance_c, rpitch: 7"
msgstr ""
"sample :bass_trance_c\n"
"sample :bass_trance_c, rpitch: 3\n"
"sample :bass_trance_c, rpitch: 7"

#: A.17-sample-stretching.md:133
msgid ""
"If you take a look at the log on the right, you'll notice that an `rpitch:` of"
" `3` actually corresponds to a rate of `1.1892` and a `rpitch:` of `7` corresp"
"onds to a rate of `1.4983`. Finally, we can even combine `rate:` and `rpitch:`"
" opts:"
msgstr ""

#: A.17-sample-stretching.md:138
#, no-wrap
msgid ""
"sample :ambi_choir, rate: 0.25, rpitch: 3\n"
"sleep 3\n"
"sample :ambi_choir, rate: 0.25, rpitch: 5\n"
"sleep 2\n"
"sample :ambi_choir, rate: 0.25, rpitch: 6\n"
"sleep 1\n"
"sample :ambi_choir, rate: 0.25, rpitch: 1"
msgstr ""
"sample :ambi_choir, rate: 0.25, rpitch: 3\n"
"sleep 3\n"
"sample :ambi_choir, rate: 0.25, rpitch: 5\n"
"sleep 2\n"
"sample :ambi_choir, rate: 0.25, rpitch: 6\n"
"sleep 1\n"
"sample :ambi_choir, rate: 0.25, rpitch: 1"

#: A.17-sample-stretching.md:149
msgid ""
"Let's take a look at a simple piece which combines these ideas. Copy it into a"
"n empty Sonic Pi buffer, hit play, listen to it for a while and then use it as"
" a starting point for your own piece. See how much fun it is to manipulate the"
" playback rate of samples. As an added exercise try recording your own sounds "
"and play around with the rate to see what crazy sounds you can make."
msgstr ""

#: A.17-sample-stretching.md:156
#, no-wrap
msgid ""
"live_loop :beats do\n"
"  sample :guit_em9, rate: [0.25, 0.5, -1].choose, amp: 2\n"
"  sample :loop_garzul, rate: [0.5, 1].choose\n"
"  sleep 8\n"
"end\n"
" \n"
"live_loop :melody do\n"
"  oct = [-1, 1, 2].choose * 12\n"
"  with_fx :reverb, amp: 2 do\n"
"    16.times do\n"
"      n = (scale 0, :minor_pentatonic).choose\n"
"      sample :bass_voxy_hit_c, rpitch: n + 4 + oct\n"
"      sleep 0.125\n"
"    end\n"
"  end\n"
"end"
msgstr ""
"live_loop :beats do\n"
"  sample :guit_em9, rate: [0.25, 0.5, -1].choose, amp: 2\n"
"  sample :loop_garzul, rate: [0.5, 1].choose\n"
"  sleep 8\n"
"end\n"
" \n"
"live_loop :melody do\n"
"  oct = [-1, 1, 2].choose * 12\n"
"  with_fx :reverb, amp: 2 do\n"
"    16.times do\n"
"      n = (scale 0, :minor_pentatonic).choose\n"
"      sample :bass_voxy_hit_c, rpitch: n + 4 + oct\n"
"      sleep 0.125\n"
"    end\n"
"  end\n"
"end"

#: A.18-additive-synthesis.md:1
msgid "A.18 Sound Design - Additive Synthesis"
msgstr ""

#: A.18-additive-synthesis.md:3
msgid "Additive Synthesis"
msgstr ""

#: A.18-additive-synthesis.md:5
msgid ""
"This is the first of a short series of articles on how to use Sonic Pi for sou"
"nd design. We'll be take a quick tour of a number of different techniques avai"
"lable for you to craft your own unique sound. The first technique we'll look a"
"t is called *additive synthesis*. This may sound complicated - but if we expan"
"d each word slightly the meaning pops right out. Firstly, additive means a com"
"bination of things and secondly synthesis means to create sound. Additive synt"
"hesis therefore means nothing more complicated than *combining existing sounds"
" to create new ones*. This synthesis technique dates back a very long time - f"
"or example, pipe organs in the middle ages had lots of slightly different soun"
"ding pipes which you could enable or disable with stops. Pulling out the stop "
"for a given pipe 'added it to the mix' making the sound richer and more comple"
"x. Now, let's see how we can pull out all the stops with Sonic Pi."
msgstr ""

#: A.18-additive-synthesis.md:21
msgid "Simple Combinations"
msgstr ""

#: A.18-additive-synthesis.md:23
msgid ""
"Let's start with the most basic sound there is - the humble pure-toned sine wa"
"ve:"
msgstr ""

#: A.18-additive-synthesis.md:26
#, no-wrap
msgid "synth :sine, note: :d3"
msgstr "synth :sine, note: :d3"

#: A.18-additive-synthesis.md:30
msgid "Now, let's see how this sounds combined with a square wave:"
msgstr ""

#: A.18-additive-synthesis.md:32
#, no-wrap
msgid ""
"synth :sine, note: :d3\n"
"synth :square, note: :d3"
msgstr ""
"synth :sine, note: :d3\n"
"synth :square, note: :d3"

#: A.18-additive-synthesis.md:37
msgid ""
"Notice how the two sounds combine to form a new, richer sound. Of course, we d"
"on't have to stop there, we can add as many sounds as we need. However, we nee"
"d to be careful with how many sounds we add together. Just like when we mix pa"
"ints to create new colours, adding too many colours will result in a messy bro"
"wn, similarly - adding too many sounds together will result in a muddy sound."
msgstr ""

#: A.18-additive-synthesis.md:45
msgid "Blending"
msgstr ""

#: A.18-additive-synthesis.md:47
msgid ""
"Let's add something to make it sound a little brighter. We could use a triangl"
"e wave at an octave higher (for that high bright sound) yet only play it at am"
"p `0.4` so it adds something extra to the sound rather than taking it over:"
msgstr ""

#: A.18-additive-synthesis.md:52
#, no-wrap
msgid ""
"synth :sine, note: :d3\n"
"synth :square, note: :d3\n"
"synth :tri, note: :d4, amp: 0.4"
msgstr ""
"synth :sine, note: :d3\n"
"synth :square, note: :d3\n"
"synth :tri, note: :d4, amp: 0.4"

#: A.18-additive-synthesis.md:58
msgid ""
"Now, try creating your own sounds by combining 2 or more synths at different o"
"ctaves and amplitudes. Also, note that you can play around with each synth's o"
"pts to modify each source sound before it is mixed in for even more combinatio"
"ns of sounds."
msgstr ""

#: A.18-additive-synthesis.md:64
msgid "Detuning"
msgstr ""

#: A.18-additive-synthesis.md:66
msgid ""
"So far, when combining our different synths we've used either the same pitch o"
"r switched octave. How might it sound if we didn't stick to octaves but instea"
"d chose a slightly higher or lower note? Let's try it:"
msgstr ""

#: A.18-additive-synthesis.md:70
#, no-wrap
msgid ""
"detune = 0.7\n"
"synth :square, note: :e3\n"
"synth :square, note: :e3 + detune"
msgstr ""
"detune = 0.7\n"
"synth :square, note: :e3\n"
"synth :square, note: :e3 + detune"

#: A.18-additive-synthesis.md:76
msgid ""
"If we detune our square waves by 0.7 notes we hear something that perhaps does"
"n't sound in tune or correct - a 'bad' note. However, as we move closer to 0 i"
"t will sound less and less out of tune as the pitches of the two waves get clo"
"ser and more similar. Try it for yourself! Change the `detune:` opt value from"
" `0.7` to `0.5` and listen to the new sound. Try `0.2`, `0.1`, `0.05`, `0`. Ea"
"ch time you change the value, take a listen and see if you can hear how the so"
"und is changing. Notice that low detune values such as `0.1` produce a really "
"nice 'thick' sound, with both slightly different pitches interacting with each"
" other in interesting, often surprising, ways."
msgstr ""

#: A.18-additive-synthesis.md:87
#, fuzzy
msgid ""
"Some of the built-in synths already include a detune option that do exactly th"
"is in one synth. Try playing with the `detune:` opt of `:dsaw`, `:dpulse` and "
"`:dtri`."
msgstr "`:dsaw`"

#: A.18-additive-synthesis.md:92
#, fuzzy
msgid "Amplitude shaping"
msgstr "Амплитуда"

#: A.18-additive-synthesis.md:94
msgid ""
"Another way we can finely craft our sound is to use a different envelope and o"
"ptions for each synth trigger. For example this will allow you to make some as"
"pects of the sound percussive and other aspects ring out for a period of time."
msgstr ""

#: A.18-additive-synthesis.md:99
#, no-wrap
msgid ""
"detune = 0.1\n"
"synth :square, note: :e1, release: 2\n"
"synth :square, note: :e1 + detune, amp: 2, release: 2\n"
"synth :gnoise, release: 2, amp: 1, cutoff: 60\n"
"synth :gnoise, release: 0.5, amp: 1, cutoff: 100\n"
"synth :noise, release: 0.2, amp: 1, cutoff: 90"
msgstr ""
"detune = 0.1\n"
"synth :square, note: :e1, release: 2\n"
"synth :square, note: :e1 + detune, amp: 2, release: 2\n"
"synth :gnoise, release: 2, amp: 1, cutoff: 60\n"
"synth :gnoise, release: 0.5, amp: 1, cutoff: 100\n"
"synth :noise, release: 0.2, amp: 1, cutoff: 90"

#: A.18-additive-synthesis.md:108
msgid ""
"In the example above I have mixed in a noisy percussive element to the sound a"
"long with some more persistent background rumbling. This was achieved firstly "
"by using two noise synths with middling cutoff values (`90` and `100`) using s"
"hort release times along with a noise with a longer release time but with a lo"
"w cutoff value (which makes the noise less crisp and more rumbly.)"
msgstr ""

#: A.18-additive-synthesis.md:117
msgid ""
"Let's combine all these techniques to see if we can use additive synthesis to "
"re-create a basic bell sound. I've broken this example into four sections. Fir"
"stly we have the 'hit' section which is the initial onset part of the bell sou"
"nd - so uses a short envelope (e.g. a `release:` of around `0.1`). Next we hav"
"e the long ringing section in which I'm using the pure sound of the sine wave."
" Notice that I'm often increasing the note by roughly `12` and `24` which are "
"the number of notes in one and two octaves. I have also thrown in a couple of "
"low sine waves to give the sound some bass and depth. Finally, I used `define`"
" to wrap my code in a function which I can then use to play a melody. Try play"
"ing your own melody and also messing around with the contents of the `:bell` f"
"unction until you create your own crazy sound to play with!"
msgstr ""

#: A.18-additive-synthesis.md:130
msgid ""
"define :bell do \\|n\\| # Triangle waves for the 'hit' synth :tri, note: n - 12,"
" release: 0.1 synth :tri, note: n + 0.1, release: 0.1 synth :tri, note: n - 0."
"1, release: 0.1 synth :tri, note: n, release: 0.2"
msgstr ""

#: A.18-additive-synthesis.md:137
msgid ""
"\\# Sine waves for the 'ringing' synth :sine, note: n + 24, release: 2 synth :s"
"ine, note: n + 24.1, release: 2 synth :sine, note: n + 24.2, release: 0.5 synt"
"h :sine, note: n + 11.8, release: 2 synth :sine, note: n, release: 2"
msgstr ""

#: A.18-additive-synthesis.md:144
msgid ""
"\\# Low sine waves for the bass synth :sine, note: n - 11.8, release: 2 synth :"
"sine, note: n - 12, release: 2 end"
msgstr ""

#: A.18-additive-synthesis.md:149
msgid "Play a melody with our new bell!"
msgstr ""

#: A.18-additive-synthesis.md:150
msgid "bell :e3 sleep 1 bell :c2 sleep 1 bell :d3 sleep 1 bell :g2"
msgstr "bell :e3 sleep 1 bell :c2 sleep 1 bell :d3 sleep 1 bell :g2"

#: A.19-subtractive-synthesis.md:1
msgid "A.19 Sound Design - Subtractive Synthesis"
msgstr ""

#: A.19-subtractive-synthesis.md:3
msgid "Subtractive Synthesis"
msgstr ""

#: A.19-subtractive-synthesis.md:5
msgid ""
"This is the second in a series of articles on how to use Sonic Pi for sound de"
"sign. Last month we looked at additive synthesis which we discovered was the s"
"imple act of playing multiple sounds at the same time to make a new combined s"
"ound. For example we could combine different sounding synths or even the same "
"synth at different pitches to build a new complex sound from simple ingredient"
"s. This month we'll look at a new technique commonly called *subtractive synth"
"esis* which is simply the act of taking an existing complex sound and removing"
" parts of it to create something new. This is a technique which is commonly as"
"sociated with the sound of analog synthesisers of the 1960s and 1970s but also"
" with the recent renaissance of modular analog synths through popular standard"
"s such as Eurorack."
msgstr ""

#: A.19-subtractive-synthesis.md:18
msgid ""
"Despite this sounding like a particularly complicated and advanced technique, "
"Sonic Pi makes it surprisingly simple and easy - so let's dive right in."
msgstr ""

#: A.19-subtractive-synthesis.md:22
msgid "Complex Source Signal"
msgstr ""

#: A.19-subtractive-synthesis.md:24
msgid ""
"For a sound to work well with subtractive synthesis, it typically needs to be "
"fairly rich and interesting. This doesn't mean we need something hugely comple"
"x - in fact, just a standard `:square` or `:saw` wave will do:"
msgstr ""

#: A.19-subtractive-synthesis.md:29
#, no-wrap
msgid "synth :saw, note: :e2, release: 4"
msgstr "synth :saw, note: :e2, release: 4"

#: A.19-subtractive-synthesis.md:33
msgid ""
"Notice that this sound is already pretty interesting and contains many differe"
"nt frequencies above `:e2` (the second E on a piano) which add to create the t"
"imbre. If that didn't make much sense to you, try comparing it with the `:beep"
"`:"
msgstr ""

#: A.19-subtractive-synthesis.md:38
#, no-wrap
msgid "synth :beep, note: :e2, release: 4"
msgstr "synth :beep, note: :e2, release: 4"

#: A.19-subtractive-synthesis.md:42
msgid ""
"As the `:beep` synth is just a sine wave, you'll hear a much purer tone and on"
"ly at `:e2` and none of the high crispy/buzzy sounds which you heard in the `:"
"saw`. It's this buzziness and variation from a pure sine wave that we can play"
" with when we use subtractive synthesis."
msgstr ""

#: A.19-subtractive-synthesis.md:49
msgid ""
"Once we have our raw source signal, the next step is to pass it through a filt"
"er of some kind which will modify the sound by removing or reducing parts of i"
"t. One of the most common filters used for subtractive synthesis is something "
"called a low pass filter. This will allow all the low parts of the sound throu"
"gh but will reduce or remove the higher parts. Sonic Pi has a powerful yet sim"
"ple to use FX system that includes a low pass filter, called `:lpf`. Let's pla"
"y with it:"
msgstr ""

#: A.19-subtractive-synthesis.md:57
#, no-wrap
msgid ""
"with_fx :lpf, cutoff: 100 do\n"
"  synth :saw, note: :e2, release: 4\n"
"end"
msgstr ""
"with_fx :lpf, cutoff: 100 do\n"
"  synth :saw, note: :e2, release: 4\n"
"end"

#: A.19-subtractive-synthesis.md:63
msgid ""
"If you listen carefully you'll hear how some of that buzziness and crispiness "
"has been removed. In fact, all the frequencies in the sound above note `100` h"
"ave been reduced or removed and only the ones below are still present in the s"
"ound. Try changing that `cutoff:` point to lower notes, say `70` and then `50`"
" and compare the sounds."
msgstr ""

#: A.19-subtractive-synthesis.md:69
msgid ""
"Of course, the `:lpf` isn't the only filter you can use to manipulate the sour"
"ce signal. Another important FX is the high pass filter referred to as `:hpf` "
"in Sonic Pi. This does the opposite to `:lpf` in that it lets the high parts o"
"f the sound through and cuts off the low parts."
msgstr ""

#: A.19-subtractive-synthesis.md:74
#, no-wrap
msgid ""
"with_fx :hpf, cutoff: 90 do\n"
"  synth :saw, note: :e2, release: 4\n"
"end"
msgstr ""
"with_fx :hpf, cutoff: 90 do\n"
"  synth :saw, note: :e2, release: 4\n"
"end"

#: A.19-subtractive-synthesis.md:80
msgid ""
"Notice how this sounds much more buzzy and raspy now that all the low frequenc"
"y sounds have been removed. Play around with the cutoff value - notice how low"
"er values let more of the original bass parts of the source signal through and"
" higher values sound increasingly tinny and quiet."
msgstr ""

#: A.19-subtractive-synthesis.md:86
msgid "[Low Pass Filter] - breakout box"
msgstr ""

#: A.19-subtractive-synthesis.md:88
#, fuzzy
msgid ""
"The low pass filter is such an important part of every subtractive synthesis t"
"oolkit that it's worth taking a deeper look at how it works. This diagram show"
"s the same sound wave (the `:prophet` synth) with varying amounts of filtering"
". At the top, section A shows the audio wave with no filtering. Notice how the"
" wave form is very pointy and contains lots of sharp edges. It is these hard, "
"sharp angles that produce the high crispy/buzzy parts of the sound. Section B "
"shows the low pass filter in action - notice how it is less pointy and more ro"
"unded than the wave form above. This means that the sound will have fewer high"
" frequencies giving it a more mellow rounded feel. Section C shows the low pas"
"s filter with a fairly low cutoff value - this means that even more of the hig"
"h frequencies have been removed from the signal resulting in an even softer, r"
"ounder wave form. Finally, notice how the size of the wave form, which represe"
"nts the amplitude, decreases as we move from A to C. Subtractive synthesis wor"
"ks by removing parts of the signal which means that the overall amplitude is r"
"educed as the amount of filtering that is taking place increases."
msgstr "`:prophet`"

#: A.19-subtractive-synthesis.md:107
msgid "Filter Modulation"
msgstr ""

#: A.19-subtractive-synthesis.md:109
msgid ""
"So far we've just produced fairly static sounds. In other words, the sound doe"
"sn't change in any way for the entirety of its duration. Often you might want "
"some movement in the sound to give the timbre some life. One way to achieve th"
"is is via filter modulation - changing the filter's options through time. Luck"
"ily Sonic Pi gives you powerful tools to manipulate an FX's opts through time."
" For example, you can set a slide time to each modulatable opt to specify how "
"long it should take for the current value to linearly slide to the target valu"
"e:"
msgstr ""

#: A.19-subtractive-synthesis.md:118
#, no-wrap
msgid ""
"with_fx :lpf, cutoff: 50 do |fx|\n"
"  control fx, cutoff_slide: 3, cutoff: 130\n"
"  synth :prophet, note: :e2, sustain: 3.5\n"
"end"
msgstr ""
"with_fx :lpf, cutoff: 50 do |fx|\n"
"  control fx, cutoff_slide: 3, cutoff: 130\n"
"  synth :prophet, note: :e2, sustain: 3.5\n"
"end"

#: A.19-subtractive-synthesis.md:125
msgid ""
"Let's take a quick look at what's going on here. Firstly we start an `:lpf` FX"
" block as normal with an initial `cutoff:` of a very low `20`. However, the fi"
"rst line also finishes with the strange `|fx|` at the end. This is an optional"
" part of the `with_fx` syntax which allows you to directly name and control th"
"e running FX synth. Line 2 does exactly this and controls the FX to set the `c"
"utoff_slide:` opt to 4 and the new target `cutoff:` to be `130`. The FX will n"
"ow start sliding the `cutoff:` opt's value from `50` to `130` over a period of"
" 3 beats. Finally we also trigger a source signal synth so we can hear the eff"
"ect of the modulated low pass filter."
msgstr ""

#: A.19-subtractive-synthesis.md:139
msgid ""
"This is just a very basic taster of what's possible when you use filters to mo"
"dify and change a source sound. Try playing with Sonic Pi's many built-in FX t"
"o see what crazy sounds you can design. If your sound feels too static, rememb"
"er you can start modulating the options to create some movement."
msgstr ""

#: A.19-subtractive-synthesis.md:145
msgid ""
"Let's finish by designing a function which will play a new sound created with "
"subtractive synthesis. See if you can figure out what's going on here - and fo"
"r the advanced Sonic Pi readers out there - see if you can work out why I wrap"
"ped everything inside a call to `at` (please send answers to @samaaron on Twit"
"ter)."
msgstr ""

#: A.19-subtractive-synthesis.md:151
#, no-wrap
msgid ""
"define :subt_synth do |note, sus|\n"
"  at do\n"
"    with_fx :lpf, cutoff: 40, amp: 2 do |fx|\n"
"      control fx, cutoff_slide: 6, cutoff: 100\n"
"      synth :prophet, note: note, sustain: sus\n"
"    end\n"
"    with_fx :hpf, cutoff_slide: 0.01 do |fx|\n"
"      synth :dsaw, note: note + 12, sustain: sus\n"
"      (sus * 8).times do\n"
"        control fx, cutoff: rrand(70, 110)\n"
"        sleep 0.125\n"
"      end\n"
"    end\n"
"  end\n"
"end\n"
"subt_synth :e1, 8\n"
"sleep 8\n"
"subt_synth :e1 - 4, 8"
msgstr ""
"define :subt_synth do |note, sus|\n"
"  at do\n"
"    with_fx :lpf, cutoff: 40, amp: 2 do |fx|\n"
"      control fx, cutoff_slide: 6, cutoff: 100\n"
"      synth :prophet, note: note, sustain: sus\n"
"    end\n"
"    with_fx :hpf, cutoff_slide: 0.01 do |fx|\n"
"      synth :dsaw, note: note + 12, sustain: sus\n"
"      (sus * 8).times do\n"
"        control fx, cutoff: rrand(70, 110)\n"
"        sleep 0.125\n"
"      end\n"
"    end\n"
"  end\n"
"end\n"
"subt_synth :e1, 8\n"
"sleep 8\n"
"subt_synth :e1 - 4, 8"

#: B-Essential-Knowledge.md:1
#, fuzzy
msgid "B Essential Knowledge"
msgstr "Необходимые Знания"

#: B-Essential-Knowledge.md:3
#, fuzzy
msgid "Essential Knowledge"
msgstr "Необходимые Знания"

#: B-Essential-Knowledge.md:5
#, fuzzy
msgid ""
"This section will cover some very useful - in fact *essential* - knowledge for"
" getting the most out of your Sonic Pi experience."
msgstr ""
"Этот раздел будет охватывать некоторые очень полезные - на самом деле даже *не"
"обходимые* знания для получения максимальной отдачи от вашего опыта работы с S"
"onic Pi."

#: B-Essential-Knowledge.md:8
#, fuzzy
msgid ""
"We'll cover how to take advantage of the many keyboard shortcuts available to "
"you, how to share your work and some tips on performing with Sonic Pi."
msgstr ""
"Мы поговорим о том, как получить пользу от множества доступных вам клавиатурны"
"х сочетаний, как делиться своими работами, а ещё, я дам вам несколько советов "
"о выступлениях с Sonic Pi."

#: B.01-Using-Shortcuts.md:1
#, fuzzy
msgid "B.1 Using Shortcuts"
msgstr "Использование Клавиатурных Сочетаний"

#: B.01-Using-Shortcuts.md:3
#, fuzzy
msgid "Using Shortcuts"
msgstr "Использование Клавиатурных Сочетаний"

#: B.01-Using-Shortcuts.md:5
#, fuzzy
msgid ""
"Sonic Pi is as much an instrument as a coding environment. Shortcuts can there"
"fore make playing Sonic Pi much more *efficient and natural* - especially when"
" you're playing live in front of an audience."
msgstr ""
"Sonic Pi такой же инструмент, как и среда разработки. Следовательно, клавиатур"
"ные сочетания моуг сделать работу c Sonic Pi намного более *эффективной и есте"
"ственной* - особенно когда вы играете вживую перед аудиторией."

#: B.01-Using-Shortcuts.md:9
#, fuzzy
msgid ""
"Much of Sonic Pi can be controlled through the keyboard. As you gain more fami"
"liarity working and performing with Sonic Pi, you'll likely start using the sh"
"ortcuts more and more. *I personally touch-type* (I recommend you consider lea"
"rning too) and find myself frustrated whenever I need to reach for the mouse a"
"s it slows me down. I therefore use all of these shortcuts on a very regular b"
"asis!"
msgstr ""
"Многое в Sonic Pi может контролироваться с помощью клавиатуры. Когда вы лучше "
"познакомитесь с работой и выступлениями с Sonic Pi, вы, вероятно, начнёте испо"
"льзовать клавиатурные сочетания всё чаще и чаще. *Лично я печатаю вслепую* (ре"
"комендую обдумать возможность обучения этому навыку) и огорчаюсь всякий раз, к"
"огда мне нужно тянуться за мышкой, так как это меня замедляет. Поэтому я испол"
"ьзую все эти клавиатурные сочетания на постоянной основе!"

#: B.01-Using-Shortcuts.md:16
#, fuzzy
msgid ""
"Therefore, if you learn the shortcuts, you'll learn to use your keyboard effec"
"tively and you'll be live coding like a pro in no time."
msgstr ""
"Следовательно, если вы изучите эти клавиатурные сочетания, вы узнаете, как эфф"
"ективно использовать клавиатуру, и вы начнёте кодировать вживую как профи в кр"
"атчайшие сроки."

#: B.01-Using-Shortcuts.md:19
#, fuzzy
msgid ""
"However, *don't try and learn them all at once*, just try and remember the one"
"s you use most and then keep adding more to your practice."
msgstr ""
"Однако, *не пытайтесь выучить все сочетания за один раз*, просто пробуйте и за"
"поминайте те сочетания, которые вы используете наиболее часто, а затем продолж"
"айте добавлять новые в свою практику."

#: B.01-Using-Shortcuts.md:22
#, fuzzy
msgid "Consistency across Platforms"
msgstr "Согласованность Всех Платформ"

#: B.01-Using-Shortcuts.md:24
#, fuzzy
msgid ""
"Imagine you're learning the clarinet. You'd expect all clarinets of all makes "
"to have similar controls and fingerings. If they didn't, you'd have a tough ti"
"me switching between different clarinets and you'd be stuck to using just one "
"make."
msgstr ""
"Представьте, что вы учитесь играть на кларнете. Вы ожидаете, что все кларнеты "
"производятся со схожими элементами управления и аппликатурой. Если нет, вам бу"
"дет трудно переключаться между различными кларнетами и вы будете вынуждены исп"
"ользовать всего один."

#: B.01-Using-Shortcuts.md:29
#, fuzzy
msgid ""
"Unfortunately the three major operating systems (Linux, Mac OS X and Windows) "
"come with their own standard defaults for actions such as cut and paste etc. S"
"onic Pi will try and honour these standards. However *priority is placed on co"
"nsistency across platforms* within Sonic Pi rather than attempting to conform "
"to a given platform's standards. This means that when you learn the shortcuts "
"whilst playing with Sonic Pi on your Raspberry Pi, you can move to the Mac or "
"PC and feel right at home."
msgstr ""
"К сожалению три основные операционные системы (Linux, Mac ОС X и Windows) пост"
"авляются с собственными стандартами по умолчанию для таких действий, как вырез"
"ать, вставить и т. д. Sonic Pi будет пытаться соблюдать эти стандарты. Однако,"
" вместо попыток соответствовать стандартам текущей платформы, Sonic Pi *приори"
"тетное внимание уделяет согласованности между платформами*. Это значит, что ес"
"ли вы изучите сочетания клавиш во время игры с Sonic Pi на Raspberry Pi, то см"
"ожете перейти на Mac или PC и чувствовать себя там как дома."

#: B.01-Using-Shortcuts.md:37
#, fuzzy
msgid "Control and Meta"
msgstr "Control и Meta"

#: B.01-Using-Shortcuts.md:39
#, fuzzy
msgid ""
"Part of the notion of consistency is the naming of shortcuts. In Sonic Pi we u"
"se the names *Control* and *Meta* to refer to the two main combination keys. O"
"n all platforms *Control* is the same. However, on Linux and Windows, *Meta* i"
"s actually the *Alt* key while on Mac *Meta* is the *Command* key. For consist"
"ency we'll use the term *Meta* - just remember to map that to the appropriate "
"key on your operating system."
msgstr ""
"Частью понятия согласованности является именование клавиатурных сочетаний. В S"
"onic Pi мы используем имена *Control* и *Meta*, ссылаясь на две главные комбин"
"ации клавиш. На всех платформах *Control* один и тот же (Ctrl). Однако, на Lin"
"ux и Windows, *Meta* - это клавиша *Alt*, в то время как на Mac, *Meta* - это "
"клавиша *Command*. Для единообразия мы будем использовать термин *Meta* - толь"
"ко не забудьте сопоставить его с соответствующей клавишей вашей операционной с"
"истемы."

#: B.01-Using-Shortcuts.md:46
#, fuzzy
msgid "Abbreviations"
msgstr "Аббревиатуры"

#: B.01-Using-Shortcuts.md:48
#, fuzzy
msgid ""
"To help keep things simple and readable, we'll use the abbreviations *C-* for "
"*Control* plus another key and *M-* for *Meta* plus another key. For example, "
"if a shortcut requires you to hold down both *Meta* and *r* we'll write that a"
"s `M-r`. The *-* just means \"at the same time as.\""
msgstr ""
"Чтобы сохранить вещи простыми и читабельными, мы будем использовать аббревиату"
"ры - *С-* для *Control* плюс ещё одна клавиша, и *М-* - для *Meta* плюс ещё од"
"на клавиша. Например, если клавиатурное сочетание требует от нас нажать одновр"
"еменно *Meta* и *r*, мы напишем это как `M-r`. Символ *-* означает \"одновремен"
"но с\"."

#: B.01-Using-Shortcuts.md:53
#, fuzzy
msgid "The following are some of the shortcuts I find most useful."
msgstr "Ниже приведены клавиатурные сочетания, которые я считаю самыми полезными."

#: B.01-Using-Shortcuts.md:55
#, fuzzy
msgid "Stopping and starting"
msgstr "Выполнение и Остановка"

#: B.01-Using-Shortcuts.md:57
#, fuzzy
msgid ""
"Instead of always reaching for the mouse to run your code, you can simply pres"
"s `M-r`. Similarly, to stop running code you can press `M-s`."
msgstr ""
"Вместо того, чтобы постоянно тянуться за мышью, чтобы выполнить свой код, вы м"
"ожешьте просто нажать `M-r`. Аналогично, чтобы остановить выполнение кода, вы "
"можешьте нажать `M-s`."

#: B.01-Using-Shortcuts.md:60 B.02-Shortcut-Cheatsheet.md:52
#, fuzzy
msgid "Navigation"
msgstr "Навигация"

#: B.01-Using-Shortcuts.md:62
#, fuzzy
msgid ""
"I'm really lost without the navigation shortcuts. I therefore highly recommend"
" you spend the time to learn them. These shortcuts also work extremely well wh"
"en you've learned to touch type as they use the standard letters rather than r"
"equiring you to move your hand to the mouse or the arrow keys on your keyboard"
"."
msgstr ""
"Я действительно потерялся бы без навигационных клавиш. Поэтому я настоятельно "
"рекомендую вам потратить время, чтобы выучить их. Эти клавиатурные комбинации "
"работают чрезвычайно хорошо в том случае, если вы освоили слепую печать, так к"
"ак они используют обычные буквы и не нужно перемещать руку на мышь или клавиши"
" со стрелками на вашей клавиатуре."

#: B.01-Using-Shortcuts.md:68
#, fuzzy
msgid ""
"You can move to the beginning of the line with `C-a`, the end of the line with"
" `C-e`, up a line with `C-p`, down a line with `C-n`, forward a character with"
" `C-f`, and back a character with `C-b`. You can even delete all the character"
"s from the cursor to the end of the line with `C-k`."
msgstr ""
"Вы можете двигаться к началу строки, используя `C-a`, к концу строки, использу"
"я `C-e`, на строку вверх - `C-p`, на строку вниз - `C-n`, на символ вперёд - `"
"C-f`, и на символ назад - `C-b`."

#: B.01-Using-Shortcuts.md:74
#, fuzzy
msgid "Tidy Code"
msgstr "Аккуратный Код"

#: B.01-Using-Shortcuts.md:76
#, fuzzy
msgid "To auto-align your code simply press `M-m`."
msgstr "Чтобы применить автовыравнивание к вашему коду, просто нажмите `M-m`"

#: B.01-Using-Shortcuts.md:78
#, fuzzy
msgid "Help System"
msgstr "Справочная Система"

#: B.01-Using-Shortcuts.md:80
#, fuzzy
msgid ""
"To toggle the help system you can press `M-i`. However, a much more useful sho"
"rtcut to know is `C-i` which will look up the word underneath the cursor and d"
"isplay the docs if it finds anything. Instant help!"
msgstr ""
"Для переключения к справочной системе вы можете нажать `M-i`. Однако, гораздо "
"полезнее знать сочетание `C-i`, которое будет искать слово под курсором в доку"
"ментации и отображать её, если что-нибудь найдет. Мгновенная помощь!"

#: B.01-Using-Shortcuts.md:84
#, fuzzy
msgid "For a full list take a look at section 10.2 Shortcut Cheatsheet."
msgstr ""
"Чтобы увидеть полный список клавиатурных сочетаний, загляните в раздел 10.2 Шп"
"аргалка по клавиатурным сочетаниям."

#: B.02-Shortcut-Cheatsheet.md:1
#, fuzzy
msgid "B.2 Shortcut Cheatsheet"
msgstr "Шпаргалка По Клавиатурным Сочетаниям"

#: B.02-Shortcut-Cheatsheet.md:3
#, fuzzy
msgid "Shortcut Cheatsheet"
msgstr "Шпаргалка По Клавиатурным Сочетаниям"

#: B.02-Shortcut-Cheatsheet.md:5
#, fuzzy
msgid ""
"The following is a summary of the main shortcuts available within Sonic Pi. Pl"
"ease see Section 10.1 for motivation and background."
msgstr ""
"Ниже приводится обзор основных клавиатурных сочетаний, доступных в Sonic Pi. П"
"ожалуйста, посмотрите раздел 10.1 для подготовки и мотивации."

#: B.02-Shortcut-Cheatsheet.md:8
#, fuzzy
msgid "Conventions"
msgstr "Соглашения"

#: B.02-Shortcut-Cheatsheet.md:10
#, fuzzy
msgid ""
"In this list, we use the following conventions (where *Meta* is one of *Alt* o"
"n Windows/Linux or *Cmd* on Mac):"
msgstr ""
"В этом списке мы используем следующие соглашения (где *Meta* называется *Alt* "
"в Windows/Linux или *Cmd* в Mac):"

#: B.02-Shortcut-Cheatsheet.md:13
#, fuzzy
msgid ""
"`C-a` means hold the *Control* key then press the *a* key whilst holding them "
"both at the same time, then releasing."
msgstr ""
"`C-a` значит удерживая клавишу *Control*, нажмите клавишу *a*. И после того, к"
"ак обе клваиши будут нажаты одновременно, отпустите их."

#: B.02-Shortcut-Cheatsheet.md:14
#, fuzzy
msgid ""
"`M-r` means hold the *Meta* key and then press the *r* key whilst holding them"
" both at the same time, then releasing."
msgstr ""
"`M-r` значит удерживая клавишу *Meta*, нажмите клавишу *r*. И после того, как "
"обе клваиши будут нажаты одновременно, отпустите их."

#: B.02-Shortcut-Cheatsheet.md:15
#, fuzzy
msgid ""
"`S-M-z` means hold the *Shift* key, then the *Meta* key, then finally the *z* "
"key all at the same time, then releasing."
msgstr ""
"`S-M-z` значит удерживая клавиши *Shift* и *Meta*, нажмите клавишу *z*. И посл"
"е того, как все три клваиши будут нажаты одновременно, отпустите их."

#: B.02-Shortcut-Cheatsheet.md:16
#, fuzzy
msgid ""
"`C-M-f` means hold the *Control* key, then press *Meta* key, finally the *f* k"
"ey all at the same time, then releasing."
msgstr ""
"`C-M-f` значит удерживая клавиши *Control* и *Meta*, нажмите клавишу *f*. И по"
"сле того, как все три клваиши будут нажаты одновременно, отпустите их."

#: B.02-Shortcut-Cheatsheet.md:18
#, fuzzy
msgid "Main Application Manipulation"
msgstr "Основные Манипуляции С Приложением"

#: B.02-Shortcut-Cheatsheet.md:20
#, fuzzy
msgid "`M-r` - Run code"
msgstr "`M-r` - Выполнить код"

#: B.02-Shortcut-Cheatsheet.md:21
#, fuzzy
msgid "`M-s` - Stop code"
msgstr "`M-s` - Остановить выполнение кода"

#: B.02-Shortcut-Cheatsheet.md:22
#, fuzzy
msgid "`M-i` - Toggle Help System"
msgstr "`M-i` - Показать/скрыть справочную систему"

#: B.02-Shortcut-Cheatsheet.md:23
#, fuzzy
msgid "`M-p` - Toggle Preferences"
msgstr "`M-p` - Показать/скрыть настройки"

#: B.02-Shortcut-Cheatsheet.md:24
#, fuzzy
msgid "`M-{` - Switch buffer to the left"
msgstr "`M-{` - Переключить буфер влево"

#: B.02-Shortcut-Cheatsheet.md:25
#, fuzzy
msgid "`M-}` - Switch buffer to the right"
msgstr "`M-}` - Переключить буфер вправо"

#: B.02-Shortcut-Cheatsheet.md:26
#, fuzzy
msgid "`M-+` - Increase text size of current buffer"
msgstr "`M-+` - Увеличить размер текста в текущем буфере"

#: B.02-Shortcut-Cheatsheet.md:27
#, fuzzy
msgid "`M--` - Decrease text size of current buffer"
msgstr "`M--` - Уменьшить размер текста в текущем буфере"

#: B.02-Shortcut-Cheatsheet.md:30
#, fuzzy
msgid "Selection/Copy/Paste"
msgstr "Выделение/Копирование/Вставка"

#: B.02-Shortcut-Cheatsheet.md:32
#, fuzzy
msgid "`M-a` - Select all"
msgstr "`M-a` - Выбрать всё"

#: B.02-Shortcut-Cheatsheet.md:33
#, fuzzy
msgid "`M-c` - Copy selection to paste buffer"
msgstr "`M-c` - Копировать выделение в буфер обмена"

#: B.02-Shortcut-Cheatsheet.md:34
#, fuzzy
msgid "`M-]` - Copy selection to paste buffer"
msgstr "`M-]` - Копировать выделение в буфер обмена"

#: B.02-Shortcut-Cheatsheet.md:35
#, fuzzy
msgid "`M-x` - Cut selection to paste buffer"
msgstr "`M-x` - Вырезать выделение в буфер обмена"

#: B.02-Shortcut-Cheatsheet.md:36
#, fuzzy
msgid "`C-]` - Cut selection to paste buffer"
msgstr "`C-]` - Вырезать выделение в буфер обмена"

#: B.02-Shortcut-Cheatsheet.md:37
#, fuzzy
msgid "`C-k` - Cut to the end of the line"
msgstr "`C-k` - Вырезать от курсора до конца строки"

#: B.02-Shortcut-Cheatsheet.md:38
#, fuzzy
msgid "`M-v` - Paste from paste buffer to editor"
msgstr "`M-v` - Вставить из буфера обмена в редактор"

#: B.02-Shortcut-Cheatsheet.md:39
#, fuzzy
msgid "`C-y` - Paste from paste buffer to editor"
msgstr "`C-y` - Вставить из буфера обмена в редактор"

#: B.02-Shortcut-Cheatsheet.md:40
#, fuzzy
msgid ""
"`C-SPACE` - Set mark. Navigation will now manipulate highlighted region. Use `"
"C-g` to escape."
msgstr ""
"`C-SPACE` - Установить метку. Теперь навигация управляет областью выделения. И"
"спользуйте `C-g` для отмены."

#: B.02-Shortcut-Cheatsheet.md:42
#, fuzzy
msgid "Text Manipulation"
msgstr "Работа С Тексом"

#: B.02-Shortcut-Cheatsheet.md:44
#, fuzzy
msgid "`M-m` - Align all text"
msgstr "`M-m` - Выровнять весь текст"

#: B.02-Shortcut-Cheatsheet.md:45
#, fuzzy
msgid "`Tab` - Align current line or selection (or select autocompletion)"
msgstr "`Tab` - Выровнять текущую линию/выделение"

#: B.02-Shortcut-Cheatsheet.md:46
#, fuzzy
msgid "`C-l` - Centre editor"
msgstr "`C-l` - Отобразить буфер с текущей строкой по центру экрана"

#: B.02-Shortcut-Cheatsheet.md:47
#, fuzzy
msgid "`M-/` - Comment/Uncomment current line or selection"
msgstr "`M-/` - Комментировать/раскомментировать текущую строку"

#: B.02-Shortcut-Cheatsheet.md:48
#, fuzzy
msgid "`C-t` - Transpose/swap characters"
msgstr "`C-t` - Перемещение/замена символов"

#: B.02-Shortcut-Cheatsheet.md:49
#, fuzzy
msgid "`M-u` - Convert next word (or selection) to upper case."
msgstr "`M-u` - Преобразовать следующее слово (или выделение) в верхний регистр"

#: B.02-Shortcut-Cheatsheet.md:50
#, fuzzy
msgid "`M-l` - Convert next word (or selection) to lower case."
msgstr "`M-l` - Преобразовать следующее слово (или выделение) в нижний регистр"

#: B.02-Shortcut-Cheatsheet.md:54
#, fuzzy
msgid "`C-a` - Move to beginning of line"
msgstr "`C-a` - Перейти в начало строки"

#: B.02-Shortcut-Cheatsheet.md:55
#, fuzzy
msgid "`C-e` - Move to end of line"
msgstr "`C-e` - Перейти в конец строки"

#: B.02-Shortcut-Cheatsheet.md:56
#, fuzzy
msgid "`C-p` - Move to previous line"
msgstr "`C-p` - Перейти на предыдущую строку"

#: B.02-Shortcut-Cheatsheet.md:57
#, fuzzy
msgid "`C-n` - Move to next line"
msgstr "`C-n` - Перейти на следующую строку"

#: B.02-Shortcut-Cheatsheet.md:58
#, fuzzy
msgid "`C-f` - Move forward one character"
msgstr "`C-f` - Перейти вперёд на один символ"

#: B.02-Shortcut-Cheatsheet.md:59
#, fuzzy
msgid "`C-b` - Move backward one character"
msgstr "`C-b` - Перейти назад на один символ"

#: B.02-Shortcut-Cheatsheet.md:60
#, fuzzy
msgid "`M-f` - Move forward one word"
msgstr "`M-f` - Перейти вперёд на одно слово"

#: B.02-Shortcut-Cheatsheet.md:61
#, fuzzy
msgid "`M-b` - Move backward one word"
msgstr "`M-b` - Перейти назад на одно слово"

#: B.02-Shortcut-Cheatsheet.md:62
#, fuzzy
msgid "`C-M-n` - Move line or selection down"
msgstr "`C-M-n` - Переместить строку или выделение вниз"

#: B.02-Shortcut-Cheatsheet.md:63
#, fuzzy
msgid "`C-M-p` - Move line or selection up"
msgstr "`C-M-p` - Переместить строку или выделение вверх"

#: B.02-Shortcut-Cheatsheet.md:64
#, fuzzy
msgid "`S-M-u` - Move up 10 lines"
msgstr "`S-M-u` - Подняться на 10 строк"

#: B.02-Shortcut-Cheatsheet.md:65
#, fuzzy
msgid "`S-M-d` - Move down 10 lines"
msgstr "`S-M-d` - Опуститься на 10 строк"

#: B.02-Shortcut-Cheatsheet.md:66
#, fuzzy
msgid "`M-<` - Move to beginning of buffer"
msgstr "`M-<` - Перейти в начало буфера"

#: B.02-Shortcut-Cheatsheet.md:67
#, fuzzy
msgid "`M->` - Move to end of buffer"
msgstr "`M->` - Перейти в конец буфера"

#: B.02-Shortcut-Cheatsheet.md:69
#, fuzzy
msgid "Deletion"
msgstr "Удаление"

#: B.02-Shortcut-Cheatsheet.md:71
#, fuzzy
msgid "`C-h` - Delete previous character"
msgstr "`C-h` - Удалить предыдущий символ"

#: B.02-Shortcut-Cheatsheet.md:72
#, fuzzy
msgid "`C-d` - Delete next character"
msgstr "`C-d` - Удалить следующий символ"

#: B.02-Shortcut-Cheatsheet.md:74
#, fuzzy
msgid "Advanced Editor Features"
msgstr "Расширенные Возможности Редактора"

#: B.02-Shortcut-Cheatsheet.md:76
#, fuzzy
msgid "`C-i` - Show docs for word under cursor"
msgstr "`C-i` - Показать документацию по слову под курсором"

#: B.02-Shortcut-Cheatsheet.md:77
#, fuzzy
msgid "`M-z` - Undo"
msgstr "`M-z` - Отмена"

#: B.02-Shortcut-Cheatsheet.md:78
#, fuzzy
msgid "`S-M-z` - Redo"
msgstr "`S-M-z` - Повтор"

#: B.02-Shortcut-Cheatsheet.md:79
msgid "`C-g` - Escape"
msgstr ""

#: B.02-Shortcut-Cheatsheet.md:80
#, fuzzy
msgid "`S-M-f` - Toggle fullscreen mode"
msgstr "`S-M-f` - Переключение полноэкранного режима"

#: B.02-Shortcut-Cheatsheet.md:81
#, fuzzy
msgid "`S-M-b` - Toggle visibility of buttons"
msgstr "`S-M-b` - Показать/скрыть кнопоки"

#: B.02-Shortcut-Cheatsheet.md:82
#, fuzzy
msgid "`S-M-l` - Toggle visibility of log"
msgstr "`S-M-l` - Показать/скрыть журнал"

#: B.02-Shortcut-Cheatsheet.md:83
#, fuzzy
msgid "`S-M-m` - Toggle between light/dark modes"
msgstr "`S-M-m` - Переключение между светлым и тёмным режимом"

#: B.02-Shortcut-Cheatsheet.md:84
msgid "`S-M-s` - Save contents of buffer to a file"
msgstr "`S-M-s` - Сохранить содержание буфера в файл"

#: B.02-Shortcut-Cheatsheet.md:85
msgid "`S-M-o` - Load contents of buffer from a file"
msgstr "`S-M-o` - Загрузить содержания из файла в буфер"

#: B.03-Sharing.md:1
#, fuzzy
msgid "B.3 Sharing"
msgstr "Обмен"

#: B.03-Sharing.md:3
#, fuzzy
msgid "Sharing"
msgstr "Обмен"

#: B.03-Sharing.md:5
#, fuzzy
msgid "Sonic Pi is all about sharing and learning with each other."
msgstr "Sonic Pi создан для обучения и обмена друг с другом."

#: B.03-Sharing.md:7
#, fuzzy
msgid ""
"Once you've learned how to code music, sharing your compositions is as simple "
"as sending an email containing your code. Please do *share* your code with oth"
"ers so they can *learn* from your work and even use parts in a new *mash-up*."
msgstr ""
"Как только вы научитесь кодировать музыку, делитесь своими композициями. Это т"
"ак же просто, как отправка электронной почты, содержащей ваш код. Пожалуйста, "
"*поделитесь* своим кодом с окружающими, чтобы они могли *учиться* с помощью ва"
"шей работы или использовать её части в своём *миксе*."

#: B.03-Sharing.md:12
#, fuzzy
msgid ""
"If you're unsure of the best way to share your work with others I recommend pu"
"tting your code on [GitHub](https://github.com) and your music on [SoundCloud]"
"(https://soundcloud.com). That way you'll be able to easily reach a large audi"
"ence."
msgstr ""
"Если вы не уверены, какой способ поделиться своей работой с остальными лучший,"
" я рекомендую размещать свой код на [GitHub](https://github.com) и музыку на ["
"SoundCloud](https://soundcloud.com). Таким образом вы сможете охватить большую"
" аудиторию."

#: B.03-Sharing.md:17
#, fuzzy
msgid "Code -> GitHub"
msgstr "Код -> GitHub"

#: B.03-Sharing.md:19
#, fuzzy
msgid ""
"[GitHub](https://github.com) is a site for sharing and working with code. It's"
" used by professional developers as well as artists for sharing and collaborat"
"ing with code. The simplest way to share a new piece of code (or even an unfin"
"ished piece) is to create a [Gist](https://gist.github.com). A [Gist](https://"
"gist.github.com) is a simple way of uploading your code in a simple way that o"
"thers can see, copy and share."
msgstr ""
"[GitHub](https://github.com) - это сайт для обмена и работы с кодом. Он исполь"
"зуется профессиональными разработчиками, а также художниками для обмена и совм"
"естной работы с кодом. Самый простой способ поделиться новым куском кода (или "
"даже незавершённым куском) - создать [Gist](https://gist.github.com). [Gist](h"
"ttps://gist.github.com) - это простой способ загружать свой код в удобной форм"
"е, чтобы другие могли увидеть, скопировать и поделиться им."

#: B.03-Sharing.md:27
#, fuzzy
msgid "Audio -> SoundCloud"
msgstr "Аудио -> SoundCloud"

#: B.03-Sharing.md:29
#, fuzzy
msgid ""
"Another important way of sharing your work is to record the audio and upload i"
"t to [SoundCloud](https://soundcloud.com). Once you've uploaded your piece, ot"
"her users can comment and discuss your work. I also recommend placing a link t"
"o a [Gist](https://gist.github.com) of your code in the track description."
msgstr ""
"Еще один отличный способ поделиться вашей работой - сделать аудио запись и заг"
"рузить её на [SoundCloud](https://soundcloud.com). После того как вы загрузили"
" свою запись, другие пользователи могут комментировать и обсуждать её. Я также"
" рекомендую поместить ссылку на ваш код в [Gist](https://gist.github.com) в оп"
"исание трека."

#: B.03-Sharing.md:35
#, fuzzy
msgid ""
"To record your work, hit the `Rec` button in the toolbar, and recording starts"
" immediately. Hit `Run` to start your code if it isn't already in progress. Wh"
"en you're done recording, press the flashing `Rec` button again, and you'll be"
" prompted to enter a filename. The recording will be saved as a WAV file, whic"
"h can be edited and converted to MP3 by any number of free programs (try Audac"
"ity for instance)."
msgstr ""
"Для того, чтобы записать свою работу, нажмите кнопку `Запись` в панели инструм"
"ентов, и запись начнётся немедленно. Нажмите кнопку `Выполнить`, чтобы запусти"
"ть свой код, если он ещё не запущен. Когда вы закончите запись, нажмите мигающ"
"ую кнопку `Запись` снова, и вам будет предложено ввести имя файла. Запись буде"
"т сохранена в формате WAV-файл, который можно редактировать и конвертировать л"
"юбым аудиоредактором с открытым исходным кодом (попробуйте, например, Audacity"
")."

#: B.03-Sharing.md:43
#, fuzzy
msgid "Hope"
msgstr "Надежда"

#: B.03-Sharing.md:45
#, fuzzy
msgid ""
"I encourage you to share your work and really hope that we'll all teach each o"
"ther new tricks and moves with Sonic Pi. I'm really excited by what you'll hav"
"e to show me."
msgstr ""
"Я призываю вас делиться своей работой и на самом деле надеюсь, что мы все буде"
"м учить друг друга новым трюкам и развиваться вместе с Sonic Pi. Я действитель"
"но очень воодушевлён тем, что у вас будет, что показать мне."

#: B.04-Performing.md:1
#, fuzzy
msgid "B.4 Performing"
msgstr "Выступление"

#: B.04-Performing.md:3
#, fuzzy
msgid "Performing"
msgstr "Выступление"

#: B.04-Performing.md:5
#, fuzzy
msgid ""
"One of the most exciting aspects of Sonic Pi is that it enables you to use cod"
"e as a *musical instrument*. This means that writing code live can now be seen"
" as a new way of performing music."
msgstr ""
"Один из самых интересных аспектов Sonic Pi заключается в том, что он позволяет"
" использовать код как *музыкальный инструмент*. Это значит, что написание кода"
" вживую может теперь рассматриваться как новый вид музыкального исполнения."

#: B.04-Performing.md:9
#, fuzzy
msgid "We call this *Live Coding*."
msgstr "Мы называем это *Лайвкодинг*."

#: B.04-Performing.md:11
#, fuzzy
msgid "Show Your Screen"
msgstr "Показывай Свой Экран"

#: B.04-Performing.md:13
#, fuzzy
msgid ""
"When you live code I recommend you *show your screen* to your audience. Otherw"
"ise it's like playing a guitar but hiding your fingers and the strings. When I"
" practice at home I use a Raspberry Pi and a little mini projector on my livin"
"g room wall. You could use your TV or one of your school/work projectors to gi"
"ve a show. Try it, it's a lot of fun."
msgstr ""
"Я рекомендую вам *показывать сой экран* аудитории во время лайвкодинга. Это ка"
"к играть на гитаре, но скрывая свои пальцы и струны. Когда я практикуюсь дома,"
" я использую Raspberry Pi и небольшой мини-проектор, направленный на стену мое"
"й гостинной. Вы можете использовать свой телевизор или один из своих школьных/"
"рабочих проекторов для своего шоу. Попробуйте, это очень весело."

#: B.04-Performing.md:20
#, fuzzy
msgid "Form a Band"
msgstr "Собери группу"

#: B.04-Performing.md:22
#, fuzzy
msgid ""
"Don't just play on your own - form a live coding band! It's a lot of fun jammi"
"ng with others. One person could do beats, another ambient background, etc. Se"
"e what interesting combinations of sounds you can have together."
msgstr ""
"Играйте не просто для себя - соберите группу! Это очень весело - играть с друг"
"ими. Один человек может делать бит, другой - эмбиент фон, и т.д. Посмотрите, к"
"акие интересные сочетания звуков вы сможете получить вместе."

#: B.04-Performing.md:27
msgid "TOPLAP"
msgstr ""

#: B.04-Performing.md:29
#, fuzzy
msgid ""
"Live coding isn't completely new - a small number of people have been doing it"
" for a few years now, typically using bespoke systems they've built for themse"
"lves. A great place to go and find out more about other live coders and system"
"s is [TOPLAP](http://toplap.org)."
msgstr ""
"Кодирование вживую не такая уж и новинка - небольшое количество людей делало э"
"то в течение последних нескольких лет, обычно используя самописные системы, ко"
"торые они сконструировали для себя сами. Отличное место для того, чтобы узнать"
" больше о других людях, занимающихся лайвкодингом и их системах, это [TOPLAP]("
"http://toplap.org)."

#: B.04-Performing.md:34
#, fuzzy
msgid "Algorave"
msgstr "Алгорэйв"

#: B.04-Performing.md:36
#, fuzzy
msgid ""
"Another great resource for exploring the live coding world is [Algorave](http:"
"//algorave.com). Here you can find all about a specific strand of live coding "
"for making music in nightclubs."
msgstr ""
"Ещё один отличный ресурс для изучения лайвкодинга, это [Algorave](http://algor"
"ave.com). Здесь вы можете найти всё о конкретном направлении лайвкодинга - соз"
"дании музыки в ночных клубах."

#: C-Minecraft-Pi.md:1
msgid "C Minecraft Pi"
msgstr ""

#: C-Minecraft-Pi.md:3
msgid "Minecraft Pi"
msgstr ""

#: C-Minecraft-Pi.md:5
#, fuzzy
msgid ""
"Sonic Pi now supports a simple API for interacting with Minecraft Pi - the spe"
"cial edition of Minecraft which is installed by default on the Raspberry Pi's "
"Raspbian Linux-based operating system."
msgstr ""
"Sonic Pi теперь поддерживает простой API для взаимодействия с Minecraft Pi - с"
"пециальным изданием Minecraft, которое устанавливается по умолчанию в Raspbian"
" - операционную систему на основе Linux."

#: C-Minecraft-Pi.md:9
#, fuzzy
msgid "No need to import libraries"
msgstr "Нет Нужды Импортировать Библиотеки"

#: C-Minecraft-Pi.md:11
#, fuzzy
msgid ""
"The Minecraft Pi integration has been designed to be insanely easy to use. All"
" you need to do is to launch Minecraft Pi and create a world. You're then free"
" to use the `mc_*` fns just like you might use `play` and `synth`. There's no "
"need to import anything or install any libraries - it's all ready to go and wo"
"rks out of the box."
msgstr ""
"Интеграция в Minecraft Pi была разработана с целью быть безумно простой в испо"
"льзовании. Все, что вам нужно сделать, это запустить Minecraft Pi и создать ми"
"р. Затем можно свободно использовать `mc_*` функции так, как если бы вы могли "
"использовать `play` и `synth`. Не надо ничего импортировать или устанавливать "
"какие-либо библиотеки - все готово и работает из коробки."

#: C-Minecraft-Pi.md:17
#, fuzzy
msgid "Automatic Connection"
msgstr "Автоматическое Подключение"

#: C-Minecraft-Pi.md:19
#, fuzzy
msgid ""
"The Minecraft Pi API takes care of managing your connection to the Minecraft P"
"i application. This means you don't need to worry about a thing. If you try an"
"d use the Minecraft Pi API when Minecraft Pi isn't open, Sonic Pi will politel"
"y tell you. Similarly, if you close Minecraft Pi whilst you're still running a"
" `live_loop` that uses the API, the live loop will stop and politely tell you "
"that it can't connect. To reconnect, just launch Minecraft Pi again and Sonic "
"Pi will automatically detect and re-create the connection for you."
msgstr ""
"Minecraft Pi API отвечает за управление подключением в приложении Sonic Pi. Эт"
"о означает, что вам не надо беспокоиться ни о чем. Если вы попытаетесь использ"
"овать Minecraft API, пока Minecraft не запущен, Sonic Pi вежливо сообщит вам о"
"б этом. Аналогично, если закрыть Minecraft Pi в то время, как всё ещё повторяе"
"тся цикл `live_loop`, использующий Minecraft API, цикл остановится и Sonic Pi "
"вежливо скажет вам, что не может подключиться к Minecraft. Чтобы переподключит"
"ься, просто запустите Minecraft снова и Sonic Pi автоматически обнаружит и зан"
"ово создаст подключение."

#: C-Minecraft-Pi.md:28
#, fuzzy
msgid "Designed to be Live Coded"
msgstr "Разработано Для Лайвкодинга"

#: C-Minecraft-Pi.md:30
#, fuzzy
msgid ""
"The Minecraft Pi API has been designed to work seamlessly within `live_loop`s."
" This means it's possible to synchronise modifications in your Minecraft Pi wo"
"rlds with modifications in your Sonic Pi sounds. Instant Minecraft-based music"
" videos! Note however that Minecraft Pi is alpha software and is known to be s"
"lightly buggy. If you encounter any problems simply restart Minecraft Pi and c"
"arry on as before. Sonic Pi's automatic connection functionality will take car"
"e of things for you."
msgstr ""
"Minecraft Pi API был разработан для безупречной работы с циклами `live_loop`. "
"Это значит, что можно синхронизировать изменения в вашем Minecraft Pi мире с и"
"зменениями звука в Sonic Pi. Мгновенные, основанные на Minecraft, музыкальные "
"клипы! Заметим, однако, что Minecraft Pi - альфа версия программы и, как извес"
"тно, немного глючит. Если у вас возникнут проблемы, просто перезапустите Minec"
"raft Pi и продолжайте как ни в чём не бывало. Sonic Pi позаботится о том, чтоб"
"ы автоматически соедениться c Minecraft Pi."

#: C-Minecraft-Pi.md:39
#, fuzzy
msgid "Requires a Raspberry Pi 2.0"
msgstr "Требуется Raspberry Pi 2"

#: C-Minecraft-Pi.md:41
#, fuzzy
msgid ""
"It is highly recommended that you use a Raspberry Pi 2 if you wish to run both"
" Sonic Pi and Minecraft at the same time - especially if you want to use Sonic"
" Pi's sound capabilities."
msgstr ""
"Настоятельно рекомендуется, использовать Raspberry Pi 2, если вы хотите запуск"
"ать Sonic Pi и Minecraft в одно и то же время - особенно если вы хотите исполь"
"зовать звуковые возможности Sonic Pi."

#: C-Minecraft-Pi.md:45
#, fuzzy
msgid "API Support"
msgstr "Поддержка API"

#: C-Minecraft-Pi.md:47
#, fuzzy
msgid ""
"At this stage, Sonic Pi supports basic block and player manipulations which ar"
"e detailed in Section 11.1. Support for event callbacks triggered by player in"
"teractions in the world is planned for a future release."
msgstr ""
"На данном этапе, Sonic Pi поддерживает базовые манипуляции блоками и игроком, "
"подробно описанные в разделе 11.1. Поддержка обратных вызовов событий, вызванн"
"ых взаимодействием игрока с миром, планируется в будущих релизах."

#: C.01-Basic-API.md:1
msgid "11.1 Basic API"
msgstr "11.1 Основной API"

#: C.01-Basic-API.md:3
#, fuzzy
msgid "Basic Minecraft Pi API"
msgstr "Базовый API Minecraft Pi"

#: C.01-Basic-API.md:5
#, fuzzy
msgid ""
"Sonic Pi currently supports the following basic interactions with Minecraft Pi"
":"
msgstr ""
"Sonic Pi в настоящее время поддерживает следующие основные взаимосвязи с Minec"
"raft Pi:"

#: C.01-Basic-API.md:7 C.01-Basic-API.md:16
#, fuzzy
msgid "Displaying chat messages"
msgstr "Отображение сообщений в чате"

#: C.01-Basic-API.md:8 C.01-Basic-API.md:33
#, fuzzy
msgid "Setting the position of the user"
msgstr "Установка позиции пользователя"

#: C.01-Basic-API.md:9
#, fuzzy
msgid "Getting the position of the user"
msgstr "Получение позиции пользователя"

#: C.01-Basic-API.md:10
#, fuzzy
msgid "Setting the block type at a given coordinate"
msgstr "Установка типа блока по заданным координатам"

#: C.01-Basic-API.md:11
#, fuzzy
msgid "Getting the block type at a given coordinate"
msgstr "Получение типа блока по заданным координатам"

#: C.01-Basic-API.md:14
#, fuzzy
msgid "Let's look at each of these in turn."
msgstr "Давайте рассмотрим каждую из них по очереди."

#: C.01-Basic-API.md:18
#, fuzzy
msgid ""
"Let's see just how easy it is to control Minecraft Pi from Sonic Pi. First, ma"
"ke sure you have both Minecraft Pi and Sonic Pi open at the same time and also"
" make sure you've entered a Minecraft world and can walk around."
msgstr ""
"Давайте посмотрим, как легко управлять Minecraft Pi из Sonic Pi. Во-первых, уб"
"едись, что и Minecraft Pi, и Sonic Pi, открыты в одно и то же время, а также, "
"что вы вошли в мир Minecraft и можете там передвигаться."

#: C.01-Basic-API.md:23
#, fuzzy
msgid "In a fresh Sonic Pi buffer simply enter the following code:"
msgstr "Просто наберите в пустом буфере Sonic Pi следующий код:"

#: C.01-Basic-API.md:25
#, no-wrap
msgid "mc_message \"Hello from Sonic Pi\""
msgstr "mc_message \"Hello from Sonic Pi\""

#: C.01-Basic-API.md:29
#, fuzzy
msgid ""
"When you hit the *Run* button, you'll see your message flash up on the Minecra"
"ft window. Congratulations, you've written your first Minecraft code! That was"
" easy wasn't it."
msgstr ""
"Когда вы нажмёте кнопку *Выполнить*, вы увидите своё сообщение в окне Minecraf"
"t. Поздравляю, вы написали свой первый код в Minecraft! Это было просто, не та"
"к ли?"

#: C.01-Basic-API.md:35
#, fuzzy
msgid ""
"Now, let's try a little magic. Let's teleport ourselves somewhere! Try the fol"
"lowing:"
msgstr ""
"Теперь давайте попробуем немного магии. Телепортируем себя куда-нибудь! Набери"
"те следующее:"

#: C.01-Basic-API.md:38
#, no-wrap
msgid "mc_teleport 50, 50, 50"
msgstr "mc_teleport 50, 50, 50"

#: C.01-Basic-API.md:42
#, fuzzy
msgid ""
"When you hit *Run* - boom! You're instantantly transported to a new place. Mos"
"t likely it was somewhere in the sky and you fell down either to dry land or i"
"nto water. Now, what are those numbers: `50, 50, 50`? They're the coordinates "
"of the location you're trying to teleport to. Let's take a brief moment to exp"
"lore what coordinates are and how they work because they're really, really imp"
"ortant for programming Minecraft."
msgstr ""
"Когда вы нажмёте *Выполнить* - бум! Вы мгновенно переноситесь на новое место. "
"Скорее всего, это будет где-то в небе, и вы упадёте на землю, либо на сушу, ил"
"и в воду. Что это за цифры: `50, 50, 50`? Это координаты места, в которыое вы "
"пытаетесь телепортироваться. Давайте сделаем короткий перерыв, чтобы выяснить,"
" что такое координаты и как они работают, потому что они очень, очень важны дл"
"я программирования Minecraft."

#: C.01-Basic-API.md:50
#, fuzzy
msgid "Coordinates"
msgstr "Координаты"

#: C.01-Basic-API.md:52
#, fuzzy
msgid ""
"Imagine a pirate's map with a big `X` marking the location of some treasure. T"
"he exact location of the `X` can be described with two numbers - how far along"
" the map from left to right and how far along the map from bottom to top. For "
"example `10cm` across and `8cm` up. These two numbers `10` and `8` are coordin"
"ates. You could easily imagine describing the locations of other stashes of tr"
"easure with other pairs of numbers. Perhaps there's a big chest of gold at `2`"
" across and `9` up..."
msgstr ""
"Представьте пиратскую карту с большой `X` меткой на месте расположения каких-н"
"ибудь сокровищ. Точное местоположение `X` может быть описано с помощью двух чи"
"сел - как далеко по карте слева направо и как далеко по карте снизу вверх. Нап"
"ример `10см` по горизонтали и `8 см` вверх. Эти числа `10` и `8` - это координ"
"аты. Вы можете легко представить местоположение других тайников с сокровищами,"
" описанное другой парой чисел. Возможно, есть большой сундук золота на `2` по "
"горизонтали и `9` по вертикали..."

#: C.01-Basic-API.md:61
#, fuzzy
msgid ""
"Now, in Minecraft two numbers isn't quite enough. We also need to know how hig"
"h we are. We therefore need three numbers:"
msgstr ""
"Но, в Minecraft двух чисел не достаточно. Нам также нужно знать как высоко мы "
"находимся. Следовательно, нам нужно три числа:"

#: C.01-Basic-API.md:64
#, fuzzy
msgid "How far from right to left in the world - `x`"
msgstr "Как далеко с права на лево в мире - `x`"

#: C.01-Basic-API.md:65
#, fuzzy
msgid "How far from front to back in the world - `z`"
msgstr "Как далеко от передней до задней части мира - `z`"

#: C.01-Basic-API.md:66
#, fuzzy
msgid "How high up we are in the world - `y`"
msgstr "Как высоко мы находимся в мире - `y`"

#: C.01-Basic-API.md:68
#, fuzzy
msgid ""
"One more thing - we typically describe these coordinates in this order `x`, `y"
"`, `z`."
msgstr "Ещё один ньюанс - мы описываем эти координаты в таком порядке: `x`, `y`, `z`."

#: C.01-Basic-API.md:71
#, fuzzy
msgid "Finding your current coordinates"
msgstr "Нахождение Твоих Текущих Координат"

#: C.01-Basic-API.md:73
#, fuzzy
msgid ""
"Let's have a play with coordinates. Navigate to a nice place in the Minecraft "
"map and then switch over to Sonic Pi. Now enter the following:"
msgstr ""
"Давайте поиграем с координатами. Переместитесь в приятное место на карте Minec"
"raft, а потом переключитесь на Sonic Pi. Введите следующее:"

#: C.01-Basic-API.md:76
#, no-wrap
msgid "puts mc_location"
msgstr "puts mc_location"

#: C.01-Basic-API.md:80
#, fuzzy
msgid ""
"When you hit the *Run* button you'll see the coordinates of your current posit"
"ion displayed in the log window. Take a note of them, then move forward in the"
" world and try again. Notice how the coordinates changed! Now, I recommend you"
" spend some time repeating exactly this - move a bit in the world, take a look"
" at the coordinates and repeat. Do this until you start to get a feel for how "
"the coordinates change when you move. Once you've understood how coordinates w"
"ork, programming with the Minecraft API will be a complete breeze."
msgstr ""
"Когда вы нажмёте кнопку *Выполнить* вы увидите, что координаты текущего положе"
"ния отобразятся в окне журнала. Запишите их, затем двигайтесь вперёд в мире Mi"
"necraft и попробуйте получить координаы снова. Обратите внимание, как они изме"
"нились! А сейчас, я рекомендую вам потратить некоторое время на повторение име"
"нно этого - немного переместитесь в мире, посмотрите координаты и повтори это "
"снова. Делайте это до тех пор, пока не начнёте чувствовать, как изменяются коо"
"рдинаты, когда вы перемещаетесь. Как только вы поймёте, как координаты работаю"
"т, программирование с Minecraft API будет совершенной мелочью."

#: C.01-Basic-API.md:89
#, fuzzy
msgid "Let's Build!"
msgstr "Давайте Строить!"

#: C.01-Basic-API.md:91
#, fuzzy
msgid ""
"Now that you know how to find the current position and to teleport using coord"
"inates, you have all the tools you need to start building things in Minecraft "
"with code. Let's say you want to make the block with coordinates `40`, `50`, `"
"60` to be glass. That's super easy:"
msgstr ""
"Теперь, когда вы знаете, как найти текущую позицию и телепортироваться, исполь"
"зуя координаты, у вас есть все инструменты, чтобы начать строить различные вещ"
"и в Minecraft с помощью кода. Допустим, вы хочтите сделать блок с координатами"
" `40`, `50`, `60` стеклянным. Это супер просто:"

#: C.01-Basic-API.md:96
#, no-wrap
msgid "mc_set_block :glass, 40, 50, 60"
msgstr "mc_set_block :glass, 40, 50, 60"

#: C.01-Basic-API.md:100
#, fuzzy
msgid ""
"Haha, it really was that easy. To see your handywork just teleport nearby and "
"take a look:"
msgstr ""
"Ха-ха, это действительно было просто. Увидеть дело рук своих проще простого - "
"телепортируйтесь рядом и посмотрите:"

#: C.01-Basic-API.md:103
#, no-wrap
msgid "mc_teleport 35, 50, 60"
msgstr "mc_teleport 35, 50, 60"

#: C.01-Basic-API.md:107
#, fuzzy
msgid ""
"Now turn around and you should see your glass block! Try changing it to diamon"
"d:"
msgstr ""
"Теперь повернитесь и ты увидите свой стеклянный блок! Попробуйте изменить его "
"на алмаз:"

#: C.01-Basic-API.md:110
#, no-wrap
msgid "mc_set_block :diamond, 40, 50, 60"
msgstr "mc_set_block :diamond, 40, 50, 60"

#: C.01-Basic-API.md:114
#, fuzzy
msgid ""
"If you were looking in the right direction you might have even seen it change "
"in front of your eyes! This is the start of something exciting..."
msgstr ""
"Если вы смотрели в правильном направлении, то могли увидеть эти изменения соим"
"и глазами! Это начало чего-то захватывающего..."

#: C.01-Basic-API.md:117
#, fuzzy
msgid "Looking at blocks"
msgstr "Смотрим На Блоки"

#: C.01-Basic-API.md:119
#, fuzzy
msgid ""
"Let's look at one last thing before we move onto something a bit more involved"
". Given a set of coordinates we can ask Minecraft what the type of a specific "
"block is. Let's try it with the diamond block you just created:"
msgstr ""
"Давай рассмотрим ещё одну, последнюю вещь, прежде чем перейдём к чему-то немно"
"го более сложному. Задавая набор координат, можно указать какого типа должен б"
"ыть блок. Давайте попробуем это с алмазным блоком, который мы только что созда"
"ли:"

#: C.01-Basic-API.md:124
#, no-wrap
msgid "puts mc_get_block 40, 50, 60"
msgstr "puts mc_get_block 40, 50, 60"

#: C.01-Basic-API.md:128
#, fuzzy
msgid ""
"Yey! It's `:diamond`. Try changing it back to glass and asking again - does it"
" now say `:glass`? I'm sure it does :-)"
msgstr ""
"Эй! Это `:diamond`. Попробуйте изменить его обратно на стекло и спросите Minec"
"raft об этом снова - он ответит `:glass`? Я уверен, что да :-)"

#: C.01-Basic-API.md:131
#, fuzzy
msgid "Available block types"
msgstr "Доступные Типы Блоков"

#: C.01-Basic-API.md:133
#, fuzzy
msgid ""
"Before you go on a Minecraft Pi coding rampage, you might find this list of av"
"ailable block types useful:"
msgstr ""
"Перед тем, как пойти неистово кодировать на Minecraft Pi, вы могли бы найти эт"
"от список доступных типов блоков полезным:"

#: C.01-Basic-API.md:136
#, no-wrap
msgid ""
"    :air\n"
"    :stone\n"
"    :grass\n"
"    :dirt\n"
"    :cobblestone\n"
"    :wood_plank\n"
"    :sapling\n"
"    :bedrock\n"
"    :water_flowing\n"
"    :water\n"
"    :water_stationary\n"
"    :lava_flowing\n"
"    :lava\n"
"    :lava_stationary\n"
"    :sand\n"
"    :gravel\n"
"    :gold_ore\n"
"    :iron_ore\n"
"    :coal_ore\n"
"    :wood\n"
"    :leaves\n"
"    :glass\n"
"    :lapis\n"
"    :lapis_lazuli_block\n"
"    :sandstone\n"
"    :bed\n"
"    :cobweb\n"
"    :grass_tall\n"
"    :flower_yellow\n"
"    :flower_cyan\n"
"    :mushroom_brown\n"
"    :mushroom_red\n"
"    :gold_block\n"
"    :gold\n"
"    :iron_block\n"
"    :iron\n"
"    :stone_slab_double\n"
"    :stone_slab\n"
"    :brick\n"
"    :brick_block\n"
"    :tnt\n"
"    :bookshelf\n"
"    :moss_stone\n"
"    :obsidian\n"
"    :torch\n"
"    :fire\n"
"    :stairs_wood\n"
"    :chest\n"
"    :diamond_ore\n"
"    :diamond_block\n"
"    :diamond\n"
"    :crafting_table\n"
"    :farmland\n"
"    :furnace_inactive\n"
"    :furnace_active\n"
"    :door_wood\n"
"    :ladder\n"
"    :stairs_cobblestone\n"
"    :door_iron\n"
"    :redstone_ore\n"
"    :snow\n"
"    :ice\n"
"    :snow_block\n"
"    :cactus\n"
"    :clay\n"
"    :sugar_cane\n"
"    :fence\n"
"    :glowstone_block\n"
"    :bedrock_invisible\n"
"    :stone_brick\n"
"    :glass_pane\n"
"    :melon\n"
"    :fence_gate\n"
"    :glowing_obsidian\n"
"    :nether_reactor_core"
msgstr ""
"    :air\n"
"    :stone\n"
"    :grass\n"
"    :dirt\n"
"    :cobblestone\n"
"    :wood_plank\n"
"    :sapling\n"
"    :bedrock\n"
"    :water_flowing\n"
"    :water\n"
"    :water_stationary\n"
"    :lava_flowing\n"
"    :lava\n"
"    :lava_stationary\n"
"    :sand\n"
"    :gravel\n"
"    :gold_ore\n"
"    :iron_ore\n"
"    :coal_ore\n"
"    :wood\n"
"    :leaves\n"
"    :glass\n"
"    :lapis\n"
"    :lapis_lazuli_block\n"
"    :sandstone\n"
"    :bed\n"
"    :cobweb\n"
"    :grass_tall\n"
"    :flower_yellow\n"
"    :flower_cyan\n"
"    :mushroom_brown\n"
"    :mushroom_red\n"
"    :gold_block\n"
"    :gold\n"
"    :iron_block\n"
"    :iron\n"
"    :stone_slab_double\n"
"    :stone_slab\n"
"    :brick\n"
"    :brick_block\n"
"    :tnt\n"
"    :bookshelf\n"
"    :moss_stone\n"
"    :obsidian\n"
"    :torch\n"
"    :fire\n"
"    :stairs_wood\n"
"    :chest\n"
"    :diamond_ore\n"
"    :diamond_block\n"
"    :diamond\n"
"    :crafting_table\n"
"    :farmland\n"
"    :furnace_inactive\n"
"    :furnace_active\n"
"    :door_wood\n"
"    :ladder\n"
"    :stairs_cobblestone\n"
"    :door_iron\n"
"    :redstone_ore\n"
"    :snow\n"
"    :ice\n"
"    :snow_block\n"
"    :cactus\n"
"    :clay\n"
"    :sugar_cane\n"
"    :fence\n"
"    :glowstone_block\n"
"    :bedrock_invisible\n"
"    :stone_brick\n"
"    :glass_pane\n"
"    :melon\n"
"    :fence_gate\n"
"    :glowing_obsidian\n"
"    :nether_reactor_core"
